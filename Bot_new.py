# file: Bot_new.py

import os
import logging
import random
import time
import asyncio
import secrets
import html
import re
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update, ForceReply
from telegram.error import BadRequest, Forbidden
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
    ConversationHandler,
    MessageHandler,
    filters,
)
import database as db
from collections import defaultdict
import config
from typing import Dict
from fullhelp import fullhelp_command
from admin import admin_command
from admin2 import (
    admin2_command,
    receipt_command,
    verifyreceipt_command,
    tgstock_command,
    tgadd_command,
    tgset_command,
    stock_command,
    stockadd_command,
    stockset_command,
    addvip_command,
    addautosearch_command,
    listboosts_command,
    removeboost_command,
    booststats_command,
    boosthistory_command,
)
from constants import (
    SEARCH_COOLDOWN,
    DAILY_BONUS_COOLDOWN,
    ENERGY_IMAGES_DIR,
    RARITIES,
    COLOR_EMOJIS,
    RARITY_ORDER,
    ITEMS_PER_PAGE,
    VIP_EMOJI,
    VIP_COSTS,
    VIP_DURATIONS_SEC,
    TG_PREMIUM_COST,
    TG_PREMIUM_DURATION_SEC,
    ADMIN_USERNAMES,
    AUTO_SEARCH_DAILY_LIMIT,
)
# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏–º–ø–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è –∏–∑ constants.py

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ---
# —Å–º. constants.py

# --- VIP –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ---
# —Å–º. constants.py

# --- TG Premium –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ---
# –°—Ç–æ–∏–º–æ—Å—Ç—å (–≤ —Å–µ–ø—Ç–∏–º–∞—Ö) –∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö) –¥–ª—è 3 –º–µ—Å—è—Ü–µ–≤
# (–∏–º–ø–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è –∏–∑ constants.py)

# ADMIN_USERNAMES –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è –∏–∑ constants.py
ADMIN_USER_IDS: set[int] = set()  # legacy, –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø—Ä–∞–≤, –æ—Å—Ç–∞–≤–ª–µ–Ω–æ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏

ADD_NAME, ADD_DESCRIPTION, ADD_SPECIAL, ADD_PHOTO = range(4)

PENDING_ADDITIONS: dict[int, dict] = {}
NEXT_PENDING_ID = 1

GIFT_OFFERS: dict[int, dict] = {}
NEXT_GIFT_ID = 1
GIFT_SELECT_TOKENS: dict[str, dict] = {}

# --- –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥–∞–±–ª–∫–ª–∏–∫–æ–≤/–≥–æ–Ω–æ–∫ ---
_LOCKS: Dict[str, asyncio.Lock] = {}

# --- –û–∂–∏–¥–∞–Ω–∏–µ –ø—Ä–∏—á–∏–Ω—ã –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è (–∫–ª—é—á = (chat_id, prompt_message_id)) ---
REJECT_PROMPTS: Dict[tuple[int, int], dict] = {}

def _get_lock(key: str) -> asyncio.Lock:
    lock = _LOCKS.get(key)
    if lock is None:
        lock = asyncio.Lock()
        _LOCKS[key] = lock
    return lock

TEXTS = {
    'menu_title': {
        'ru': '–ü—Ä–∏–≤–µ—Ç, {user}!\n\n–ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å?',
        'en': 'Hi, {user}!\n\nWhat shall we do?'
    },
    'search': {'ru': 'üîé –ù–∞–π—Ç–∏ —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫', 'en': 'üîé Find energy'},
    'inventory': {'ru': 'üì¶ –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å', 'en': 'üì¶ Inventory'},
    'stats': {'ru': 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'en': 'üìä Stats'},
    'settings': {'ru': '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', 'en': '‚öôÔ∏è Settings'},
    # --- Settings menu ---
    'settings_title': {'ru': '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', 'en': '‚öôÔ∏è Settings'},
    'current_language': {'ru': 'üåê –Ø–∑—ã–∫', 'en': 'üåê Language'},
    'auto_reminder': {'ru': '‚è∞ –ê–≤—Ç–æ–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ', 'en': '‚è∞ Auto-reminder'},
    'on': {'ru': '–í–∫–ª', 'en': 'On'},
    'off': {'ru': '–í—ã–∫–ª', 'en': 'Off'},
    'btn_change_lang': {'ru': 'üåê –ò–∑–º–µ–Ω–∏—Ç—å —è–∑—ã–∫', 'en': 'üåê Change language'},
    'btn_toggle_rem': {'ru': '‚è∞ –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ', 'en': '‚è∞ Toggle reminder'},
    'auto_search': {'ru': 'ü§ñ –ê–≤—Ç–æ–ø–æ–∏—Å–∫ VIP', 'en': 'ü§ñ VIP Auto-search'},
    'btn_toggle_auto': {'ru': 'ü§ñ –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–ø–æ–∏—Å–∫ VIP', 'en': 'ü§ñ Toggle VIP auto-search'},
    'auto_requires_vip': {'ru': '–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Å –∞–∫—Ç–∏–≤–Ω—ã–º V.I.P.', 'en': 'This feature requires an active V.I.P.'},
    'auto_enabled': {'ru': '–ê–≤—Ç–æ–ø–æ–∏—Å–∫ –≤–∫–ª—é—á—ë–Ω. –õ–∏–º–∏—Ç: {limit}/—Å—É—Ç–∫–∏.', 'en': 'Auto-search enabled. Limit: {limit}/day.'},
    'auto_disabled': {'ru': '–ê–≤—Ç–æ–ø–æ–∏—Å–∫ –≤—ã–∫–ª—é—á–µ–Ω.', 'en': 'Auto-search disabled.'},
    'auto_limit_reached': {'ru': '–î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –∞–≤—Ç–æ–ø–æ–∏—Å–∫–∞ –∏—Å—á–µ—Ä–ø–∞–Ω. –ê–≤—Ç–æ–ø–æ–∏—Å–∫ –æ—Ç–∫–ª—é—á—ë–Ω –¥–æ —Å–±—Ä–æ—Å–∞.', 'en': 'Daily auto-search limit reached. Auto-search disabled until reset.'},
    'auto_vip_expired': {'ru': '–°—Ä–æ–∫ V.I.P. –∏—Å—Ç—ë–∫. –ê–≤—Ç–æ–ø–æ–∏—Å–∫ –æ—Ç–∫–ª—é—á—ë–Ω.', 'en': 'V.I.P. expired. Auto-search has been disabled.'},
    'btn_reset': {'ru': 'üîÑ –°–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö', 'en': 'üîÑ Reset data'},
    'btn_back': {'ru': 'üîô –ù–∞–∑–∞–¥', 'en': 'üîô Back'},
    'choose_lang': {'ru': '–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:', 'en': 'Choose language:'},
    'confirm_delete': {'ru': '–¢–æ—á–Ω–æ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ?', 'en': 'Really delete all your data?'},
    'data_deleted': {'ru': '–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ /start', 'en': 'Your data has been erased. Use /start to begin again.'},
    'daily_bonus': {'ru': 'üéÅ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å', 'en': 'üéÅ Daily Bonus'},
    # --- Extra bonuses ---
    'extra_bonuses': {'ru': 'üéÅ –î–æ–ø. –ë–æ–Ω—É—Å—ã', 'en': 'üéÅ Extra Bonuses'},
    'extra_bonuses_title': {'ru': '–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –±–æ–Ω—É—Å:', 'en': 'Choose an extra bonus:'},
    'tg_premium_3m': {'ru': '–¢–ì –ø—Ä–µ–º–∏—É–º (3 –º–µ—Å)', 'en': 'TG Premium (3 mo)'},
    'steam_game_500': {'ru': '–ò–≥—Ä–∞ –≤ —Å—Ç–∏–º–µ (500 –≥—Ä–Ω)', 'en': 'Steam game (500 UAH)'},
    'tg_premium_details': {
        'ru': '<b>–¢–ì –ø—Ä–µ–º–∏—É–º (3 –º–µ—Å)</b>\n\n–î–æ—Å—Ç—É–ø–Ω–æ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –Ω–∞ —Å–∫–ª–∞–¥–µ. –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏, –µ—Å–ª–∏ —Ç–æ–≤–∞—Ä –≤ –Ω–∞–ª–∏—á–∏–∏.',
        'en': '<b>TG Premium (3 months)</b>\n\nAvailable while in stock. You can purchase when it is in stock.'
    },
    'steam_game_details': {
        'ru': '<b>–ò–≥—Ä–∞ –≤ —Å—Ç–∏–º–µ (500 –≥—Ä–Ω)</b>\n\n–î–æ—Å—Ç—É–ø–Ω–æ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –Ω–∞ —Å–∫–ª–∞–¥–µ. –ü–æ–∫—É–ø–∫–∞ –≤–æ–∑–º–æ–∂–Ω–∞ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏.',
        'en': '<b>Steam game (500 UAH)</b>\n\nAvailable while in stock. Purchase is possible when in stock.'
    },
    # TG Premium ‚Äî —Ç–µ–∫—Å—Ç—ã –¥–ª—è –ø–æ–∫—É–ø–∫–∏
    'tg_title': {'ru': '<b>–¢–ì –ø—Ä–µ–º–∏—É–º (3 –º–µ—Å)</b>', 'en': '<b>TG Premium (3 months)</b>'},
    'tg_price': {'ru': '–¶–µ–Ω–∞: {cost} —Å–µ–ø—Ç–∏–º–æ–≤', 'en': 'Price: {cost} septims'},
    'tg_stock': {'ru': '–û—Å—Ç–∞—Ç–æ–∫ –Ω–∞ —Å–∫–ª–∞–¥–µ: {stock}', 'en': 'Stock left: {stock}'},
    'tg_until': {'ru': 'TG Premium –∞–∫—Ç–∏–≤–µ–Ω –¥–æ: {dt}', 'en': 'TG Premium active until: {dt}'},
    'tg_buy': {'ru': '–ö—É–ø–∏—Ç—å', 'en': 'Buy'},
    'tg_not_enough': {'ru': '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç.', 'en': 'Not enough coins.'},
    'tg_out_of_stock': {'ru': '–ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏.', 'en': 'Out of stock.'},
    'tg_bought': {'ru': '–ü–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–∞! üíé –î–æ: {dt}\n–ë–∞–ª–∞–Ω—Å: {coins}', 'en': 'Purchased! üíé Until: {dt}\nBalance: {coins}'},
    'tg_insufficient': {'ru': '‚ùó –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç: {coins}/{cost}', 'en': '‚ùó Not enough coins: {coins}/{cost}'},
    'tg_view_receipt': {'ru': 'üßæ –ü–æ–∫–∞–∑–∞—Ç—å —á–µ–∫', 'en': 'üßæ View receipt'},
    'tg_my_receipts': {'ru': 'üßæ –ú–æ–∏ —á–µ–∫–∏', 'en': 'üßæ My receipts'},
    # TG Premium ‚Äî –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã (–ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è)
    'tg_admin_stock_view': {
        'ru': '–¢–µ–∫—É—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫ TG Premium: {stock}',
        'en': 'Current TG Premium stock: {stock}'
    },
    'tg_admin_added': {
        'ru': '–û—Å—Ç–∞—Ç–æ–∫ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ {delta}. –ù–æ–≤—ã–π –æ—Å—Ç–∞—Ç–æ–∫: {stock}',
        'en': 'Stock changed by {delta}. New stock: {stock}'
    },
    'tg_admin_set': {
        'ru': '–û—Å—Ç–∞—Ç–æ–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {stock}',
        'en': 'Stock set to: {stock}'
    },
    'tg_admin_usage_add': {
        'ru': '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /tgadd <—á–∏—Å–ª–æ> (–º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º)',
        'en': 'Usage: /tgadd <number> (may be negative)'
    },
    'tg_admin_usage_set': {
        'ru': '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /tgset <—á–∏—Å–ª–æ>' ,
        'en': 'Usage: /tgset <number>'
    },
    'admin_denied_lvl3': {
        'ru': '–ù–µ—Ç –ø—Ä–∞–≤: –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –°–æ–∑–¥–∞—Ç–µ–ª—é –∏ —É—Ä.3.',
        'en': 'No permission: only Creator and level 3 admins.'
    },
    # --- V.I.P submenu ---
    'vip': {'ru': 'V.I.P', 'en': 'V.I.P'},
    'vip_title': {
        'ru': '–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ V.I.P:\n\n–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:\n‚Ä¢ üëë –ó–Ω–∞—á–æ–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ –ª–∏–¥–µ—Ä–æ–≤\n‚Ä¢ ‚è± –ö—É–ª–¥–∞—É–Ω –ø–æ–∏—Å–∫–∞ ‚Äî x0.5\n‚Ä¢ üéÅ –ö—É–ª–¥–∞—É–Ω –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞ ‚Äî x0.5\n‚Ä¢ üí∞ –ù–∞–≥—Ä–∞–¥–∞ –º–æ–Ω–µ—Ç –∑–∞ –ø–æ–∏—Å–∫ ‚Äî x2\n‚Ä¢ üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø–æ–∏—Å–∫–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ —Å–æ–∫—Ä–∞—â—ë–Ω–Ω–æ–º—É –ö–î',
        'en': 'Choose V.I.P duration:\n\nPerks:\n‚Ä¢ üëë Badge in the leaderboard\n‚Ä¢ ‚è± Search cooldown ‚Äî x0.5\n‚Ä¢ üéÅ Daily bonus cooldown ‚Äî x0.5\n‚Ä¢ üí∞ Coin reward from search ‚Äî x2\n‚Ä¢ üîî Search reminder respects reduced cooldown'
    },
    'vip_1d': {'ru': '1 –î–µ–Ω—å', 'en': '1 Day'},
    'vip_7d': {'ru': '7 –¥–Ω–µ–π', 'en': '7 days'},
    'vip_30d': {'ru': '30 –¥–Ω–µ–π', 'en': '30 days'},
    'vip_details_1d': {
        'ru': '<b>V.I.P –Ω–∞ 1 –¥–µ–Ω—å</b>\n\n–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:\n‚Ä¢ üëë –ó–Ω–∞—á–æ–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ –ª–∏–¥–µ—Ä–æ–≤\n‚Ä¢ ‚è± –ö—É–ª–¥–∞—É–Ω –ø–æ–∏—Å–∫–∞ ‚Äî x0.5\n‚Ä¢ üéÅ –ö—É–ª–¥–∞—É–Ω –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞ ‚Äî x0.5\n‚Ä¢ üí∞ –ù–∞–≥—Ä–∞–¥–∞ –º–æ–Ω–µ—Ç –∑–∞ –ø–æ–∏—Å–∫ ‚Äî x2\n‚Ä¢ üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø–æ–∏—Å–∫–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ —Å–æ–∫—Ä–∞—â—ë–Ω–Ω–æ–º—É –ö–î\n',
        'en': '<b>V.I.P for 1 day</b>\n\nPerks:\n‚Ä¢ üëë Badge in the leaderboard\n‚Ä¢ ‚è± Search cooldown ‚Äî x0.5\n‚Ä¢ üéÅ Daily bonus cooldown ‚Äî x0.5\n‚Ä¢ üí∞ Coin reward from search ‚Äî x2\n‚Ä¢ üîî Search reminder respects reduced cooldown\n'
    },
    'vip_details_7d': {
        'ru': '<b>V.I.P –Ω–∞ 7 –¥–Ω–µ–π</b>\n\n–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:\n‚Ä¢ üëë –ó–Ω–∞—á–æ–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ –ª–∏–¥–µ—Ä–æ–≤\n‚Ä¢ ‚è± –ö—É–ª–¥–∞—É–Ω –ø–æ–∏—Å–∫–∞ ‚Äî x0.5\n‚Ä¢ üéÅ –ö—É–ª–¥–∞—É–Ω –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞ ‚Äî x0.5\n‚Ä¢ üí∞ –ù–∞–≥—Ä–∞–¥–∞ –º–æ–Ω–µ—Ç –∑–∞ –ø–æ–∏—Å–∫ ‚Äî x2\n‚Ä¢ üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø–æ–∏—Å–∫–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ —Å–æ–∫—Ä–∞—â—ë–Ω–Ω–æ–º—É –ö–î\n',
        'en': '<b>V.I.P for 7 days</b>\n\nPerks:\n‚Ä¢ üëë Badge in the leaderboard\n‚Ä¢ ‚è± Search cooldown ‚Äî x0.5\n‚Ä¢ üéÅ Daily bonus cooldown ‚Äî x0.5\n‚Ä¢ üí∞ Coin reward from search ‚Äî x2\n‚Ä¢ üîî Search reminder respects reduced cooldown\n'
    },
    'vip_details_30d': {
        'ru': '<b>V.I.P –Ω–∞ 30 –¥–Ω–µ–π</b>\n\n–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:\n‚Ä¢ üëë –ó–Ω–∞—á–æ–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ –ª–∏–¥–µ—Ä–æ–≤\n‚Ä¢ ‚è± –ö—É–ª–¥–∞—É–Ω –ø–æ–∏—Å–∫–∞ ‚Äî x0.5\n‚Ä¢ üéÅ –ö—É–ª–¥–∞—É–Ω –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞ ‚Äî x0.5\n‚Ä¢ üí∞ –ù–∞–≥—Ä–∞–¥–∞ –º–æ–Ω–µ—Ç –∑–∞ –ø–æ–∏—Å–∫ ‚Äî x2\n‚Ä¢ üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø–æ–∏—Å–∫–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ —Å–æ–∫—Ä–∞—â—ë–Ω–Ω–æ–º—É –ö–î\n',
        'en': '<b>V.I.P for 30 days</b>\n\nPerks:\n‚Ä¢ üëë Badge in the leaderboard\n‚Ä¢ ‚è± Search cooldown ‚Äî x0.5\n‚Ä¢ üéÅ Daily bonus cooldown ‚Äî x0.5\n‚Ä¢ üí∞ Coin reward from search ‚Äî x2\n‚Ä¢ üîî Search reminder respects reduced cooldown\n'
    },
    'vip_buy': {'ru': '–ö—É–ø–∏—Ç—å', 'en': 'Buy'},
    'vip_price': {'ru': '–¶–µ–Ω–∞: {cost} —Å–µ–ø—Ç–∏–º–æ–≤', 'en': 'Price: {cost} septims'},
    'vip_until': {'ru': 'V.I.P –∞–∫—Ç–∏–≤–µ–Ω –¥–æ: {dt}', 'en': 'V.I.P active until: {dt}'},
    'vip_not_enough': {'ru': '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç.', 'en': 'Not enough coins.'},
    'vip_bought': {'ru': '–ü–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–∞! {emoji} –î–æ: {dt}\n–ë–∞–ª–∞–Ω—Å: {coins}', 'en': 'Purchased! {emoji} Until: {dt}\nBalance: {coins}'},
    'vip_insufficient': {
        'ru': '‚ùó –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç: {coins}/{cost}',
        'en': '‚ùó Not enough coins: {coins}/{cost}'
    },
    # --- VIP menu: auto-search info ---
    'vip_auto_header': {'ru': '\n<b>ü§ñ –ê–≤—Ç–æ–ø–æ–∏—Å–∫</b>', 'en': '\n<b>ü§ñ Auto-search</b>'},
    'vip_auto_state': {'ru': '–°–æ—Å—Ç–æ—è–Ω–∏–µ: {state}', 'en': 'State: {state}'},
    'vip_auto_today': {'ru': '–°–µ–≥–æ–¥–Ω—è: {count}/{limit}', 'en': 'Today: {count}/{limit}'},
    # --- Stars submenu ---
    'stars': {'ru': '‚≠ê –ó–≤–µ–∑–¥—ã', 'en': '‚≠ê Stars'},
    'stars_title': {'ru': '–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–∫–µ—Ç –∑–≤—ë–∑–¥:', 'en': 'Choose a stars pack:'},
    'stars_500': {'ru': '500 –∑–≤—ë–∑–¥', 'en': '500 stars'},
    'stars_details_500': {
        'ru': '<b>–ü–∞–∫–µ—Ç 500 –∑–≤—ë–∑–¥</b>\n\n–î–æ—Å—Ç—É–ø–Ω–æ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –Ω–∞ —Å–∫–ª–∞–¥–µ. –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–∞–∫–µ—Ç, –µ—Å–ª–∏ –æ–Ω –≤ –Ω–∞–ª–∏—á–∏–∏.',
        'en': '<b>Pack of 500 stars</b>\n\nAvailable while in stock. You can purchase when it is in stock.'
    },
}

def t(lang: str, key: str) -> str:
    return TEXTS.get(key, {}).get(lang, TEXTS.get(key, {}).get('ru', key))

# --- –§—É–Ω–∫—Ü–∏–∏-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ ---

async def show_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –£–ú–ï–ï–¢ –û–ë–†–ê–ë–ê–¢–´–í–ê–¢–¨ –í–û–ó–í–†–ê–¢ –° –§–û–¢–û."""
    user = update.effective_user
    player = db.get_or_create_player(user.id, user.username or user.first_name)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—É–ª–¥–∞—É–Ω–∞ –ø–æ–∏—Å–∫–∞ (VIP ‚Äî –≤ 2 —Ä–∞–∑–∞ –º–µ–Ω—å—à–µ)
    vip_active = db.is_vip(player.user_id)
    search_cd = SEARCH_COOLDOWN / 2 if vip_active else SEARCH_COOLDOWN
    search_time_left = max(0, search_cd - (time.time() - player.last_search))
    lang = player.language

    base_search = t(lang, 'search')
    if search_time_left > 0:
        search_status = f"{base_search} (‚è≥ {int(search_time_left // 60)}:{int(search_time_left % 60):02d})"
    else:
        search_status = base_search

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—É–ª–¥–∞—É–Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞ (VIP ‚Äî –≤ 2 —Ä–∞–∑–∞ –º–µ–Ω—å—à–µ)
    bonus_cd = DAILY_BONUS_COOLDOWN / 2 if vip_active else DAILY_BONUS_COOLDOWN
    bonus_time_left = max(0, bonus_cd - (time.time() - player.last_bonus_claim))
    base_bonus = t(lang, 'daily_bonus')
    if bonus_time_left > 0:
        hours, remainder = divmod(int(bonus_time_left), 3600)
        minutes, seconds = divmod(remainder, 60)
        bonus_status = f"{base_bonus} (‚è≥ {hours:02d}:{minutes:02d}:{seconds:02d})"
    else:
        bonus_status = base_bonus

    keyboard = [
        [InlineKeyboardButton(search_status, callback_data='find_energy')],
        [InlineKeyboardButton(bonus_status, callback_data='claim_bonus')],
        [InlineKeyboardButton(t(lang, 'extra_bonuses'), callback_data='extra_bonuses')],
        [InlineKeyboardButton("üõí –†—ã–Ω–æ–∫", callback_data='market_menu')],
        [InlineKeyboardButton(t(lang, 'inventory'), callback_data='inventory')],
        [InlineKeyboardButton(t(lang, 'stats'), callback_data='stats')],
        [InlineKeyboardButton(t(lang, 'settings'), callback_data='settings')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    menu_text = t(lang, 'menu_title').format(user=user.mention_html())
    
    query = update.callback_query
    
    # –ï—Å–ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞ /start, –∞ –Ω–µ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏
    if not query:
        await update.message.reply_html(menu_text, reply_markup=reply_markup)
        return

    message = query.message
    
    # >>>>> –ì–õ–ê–í–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–î–ï–°–¨ <<<<<
    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –ø—Ä–∏—à–µ–ª –∑–∞–ø—Ä–æ—Å, —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ–æ—Ç–æ
    if message.photo:
        # –ú—ã –Ω–µ –º–æ–∂–µ–º –µ–≥–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å. –£–¥–∞–ª—è–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ.
        try:
            await message.delete()
        except BadRequest as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ: {e}")
        await context.bot.send_message(
            chat_id=message.chat_id,
            text=menu_text,
            reply_markup=reply_markup,
            parse_mode='HTML'
        )
    else:
        # –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ã—á–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –µ–≥–æ
        try:
            await message.edit_text(
                text=menu_text,
                reply_markup=reply_markup,
                parse_mode='HTML'
            )
        except BadRequest as e:
            if "Message is not modified" not in str(e):
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –º–µ–Ω—é: {e}")


async def search_reminder_job(context: ContextTypes.DEFAULT_TYPE):
    """JobQueue: –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∫—É–ª–¥–∞—É–Ω–∞ –ø–æ–∏—Å–∫–∞."""
    try:
        await context.bot.send_message(chat_id=context.job.chat_id, text="–ö—É–ª–¥–∞—É–Ω –∑–∞–∫–æ–Ω—á–∏–ª—Å—è! –ú–æ–∂–Ω–æ –∏—Å–∫–∞—Ç—å —Å–Ω–æ–≤–∞.")
    except Exception as ex:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ (job): {ex}")

async def auto_search_job(context: ContextTypes.DEFAULT_TYPE):
    """JobQueue: –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∞–≤—Ç–æ–ø–æ–∏—Å–∫ –¥–ª—è VIP-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
    –°–∞–º–æ–ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–∞–µ—Ç—Å—è —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º, —Ä–∞–≤–Ω—ã–º –æ—Å—Ç–∞–≤—à–µ–º—É—Å—è –∫—É–ª–¥–∞—É–Ω—É.
    –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –∏—Å—á–µ—Ä–ø–∞–Ω–∏–∏ –ª–∏–º–∏—Ç–∞/–æ–∫–æ–Ω—á–∞–Ω–∏–∏ VIP/–≤—ã–∫–ª—é—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
    """
    try:
        user_id = context.job.chat_id
        player = db.get_or_create_player(user_id, str(user_id))

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ–ª –≤—ã–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–ø–æ–∏—Å–∫ ‚Äî –≤—ã—Ö–æ–¥–∏–º (–Ω–µ –ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–∞–µ–º)
        if not getattr(player, 'auto_search_enabled', False):
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ VIP
        if not db.is_vip(user_id):
            db.update_player(user_id, auto_search_enabled=False)
            lang = player.language
            try:
                await context.bot.send_message(chat_id=user_id, text=t(lang, 'auto_vip_expired'))
            except Exception:
                pass
            return

        # –°–±—Ä–æ—Å –¥–Ω–µ–≤–Ω–æ–≥–æ —Å—á—ë—Ç—á–∏–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—É–ø–ª–µ–Ω–∏–∏ reset_ts –∏–ª–∏ –µ—Å–ª–∏ –æ–Ω –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
        now_ts = int(time.time())
        reset_ts = int(getattr(player, 'auto_search_reset_ts', 0) or 0)
        count = int(getattr(player, 'auto_search_count', 0) or 0)
        if reset_ts == 0 or now_ts >= reset_ts:
            count = 0
            reset_ts = now_ts + 24*60*60
            db.update_player(user_id, auto_search_count=count, auto_search_reset_ts=reset_ts)

        # –õ–∏–º–∏—Ç –≤ —Å—É—Ç–∫–∏ (—Å —É—á—ë—Ç–æ–º –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –±—É—Å—Ç–∞)
        daily_limit = db.get_auto_search_daily_limit(user_id)
        if count >= daily_limit:
            db.update_player(user_id, auto_search_enabled=False)
            lang = player.language
            try:
                await context.bot.send_message(chat_id=user_id, text=t(lang, 'auto_limit_reached'))
            except Exception:
                pass
            return

        # –£—á–∏—Ç—ã–≤–∞–µ–º –∫—É–ª–¥–∞—É–Ω (—Å VIP - x0.5)
        vip_active = True  # —É–∂–µ –ø—Ä–æ–≤–µ—Ä–∏–ª–∏ –≤—ã—à–µ
        eff_search_cd = SEARCH_COOLDOWN / 2 if vip_active else SEARCH_COOLDOWN
        time_since_last = time.time() - float(getattr(player, 'last_search', 0) or 0.0)
        if time_since_last < eff_search_cd:
            delay = max(1.0, eff_search_cd - time_since_last)
            try:
                context.application.job_queue.run_once(
                    auto_search_job,
                    when=delay,
                    chat_id=user_id,
                    name=f"auto_search_{user_id}",
                )
            except Exception:
                pass
            return

        # –ê–Ω—Ç–∏-–≥–æ–Ω–∫–∏: –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–π –ª–æ–∫–µ—Ä –¥–ª—è –ø–æ–∏—Å–∫–∞
        lock = _get_lock(f"user:{user_id}:search")
        if lock.locked():
            # –ï—Å–ª–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –∏–¥—ë—Ç —Ä—É—á–Ω–æ–π –ø–æ–∏—Å–∫ ‚Äî –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–∑–∂–µ
            try:
                context.application.job_queue.run_once(
                    auto_search_job,
                    when=5,
                    chat_id=user_id,
                    name=f"auto_search_{user_id}",
                )
            except Exception:
                pass
            return
        async with lock:
            result = await _perform_energy_search(user_id, player.username or str(user_id), context)

        if result.get('status') == 'ok':
            # –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç —Å—á—ë—Ç—á–∏–∫–∞ –∏ –ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ –∫—É–ª–¥–∞—É–Ω—É
            try:
                player = db.get_or_create_player(user_id, player.username or str(user_id))
                count = int(getattr(player, 'auto_search_count', 0) or 0) + 1
                db.update_player(user_id, auto_search_count=count)
            except Exception:
                pass

            # –û—Ç–ø—Ä–∞–≤–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º –ø—Ä–µ–¥–º–µ—Ç–æ–º
            try:
                img_path = result.get("image_path")
                if img_path and os.path.exists(img_path):
                    with open(img_path, 'rb') as photo:
                        await context.bot.send_photo(
                            chat_id=user_id,
                            photo=photo,
                            caption=result.get("caption"),
                            reply_markup=result.get("reply_markup"),
                            parse_mode='HTML'
                        )
                else:
                    await context.bot.send_message(
                        chat_id=user_id,
                        text=result.get("caption"),
                        reply_markup=result.get("reply_markup"),
                        parse_mode='HTML'
                    )
            except Exception:
                pass

            # –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç ‚Äî –æ—Ç–∫–ª—é—á–∞–µ–º –∏ —É–≤–µ–¥–æ–º–ª—è–µ–º
            daily_limit = db.get_auto_search_daily_limit(user_id)
            if count >= daily_limit:
                db.update_player(user_id, auto_search_enabled=False)
                lang = player.language
                try:
                    await context.bot.send_message(chat_id=user_id, text=t(lang, 'auto_limit_reached'))
                except Exception:
                    pass
                return

            # –ù–∞–∑–Ω–∞—á–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—É—Å–∫ –ø–æ—Å–ª–µ –ø–æ–ª–Ω–æ–≥–æ –ö–î
            try:
                context.application.job_queue.run_once(
                    auto_search_job,
                    when=eff_search_cd,
                    chat_id=user_id,
                    name=f"auto_search_{user_id}",
                )
            except Exception:
                pass
            return

        elif result.get('status') == 'cooldown':
            delay = max(1.0, float(result.get('time_left', 5)))
            try:
                context.application.job_queue.run_once(
                    auto_search_job,
                    when=delay,
                    chat_id=user_id,
                    name=f"auto_search_{user_id}",
                )
            except Exception:
                pass
            return
        elif result.get('status') == 'no_drinks':
            # –°–æ–æ–±—â–∏–º –æ–¥–∏–Ω —Ä–∞–∑ –∏ –ø–æ–ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç
            try:
                await context.bot.send_message(chat_id=user_id, text="–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –Ω–µ—Ç —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫–æ–≤ –¥–ª—è –∞–≤—Ç–æ–ø–æ–∏—Å–∫–∞.")
            except Exception:
                pass
            try:
                context.application.job_queue.run_once(
                    auto_search_job,
                    when=600,
                    chat_id=user_id,
                    name=f"auto_search_{user_id}",
                )
            except Exception:
                pass
            return
    except Exception:
        logger.exception("[AUTO] –û—à–∏–±–∫–∞ –≤ auto_search_job")
        # –ù–∞ —Å–ª—É—á–∞–π –∏—Å–∫–ª—é—á–µ–Ω–∏–π –ø–æ–ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ 1 –º–∏–Ω—É—Ç—É
        try:
            context.application.job_queue.run_once(
                auto_search_job,
                when=60,
                chat_id=context.job.chat_id if getattr(context, 'job', None) else None,
                name=f"auto_search_{context.job.chat_id}" if getattr(context, 'job', None) else None,
            )
        except Exception:
            pass

async def _perform_energy_search(user_id: int, username: str, context: ContextTypes.DEFAULT_TYPE):
    """
    –Ø–¥—Ä–æ –ª–æ–≥–∏–∫–∏ –ø–æ–∏—Å–∫–∞ —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫–∞. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫—É–ª–¥–∞—É–Ω, –∏—â–µ—Ç –Ω–∞–ø–∏—Ç–æ–∫,
    –æ–±–Ω–æ–≤–ª—è–µ—Ç –ë–î –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –≤–∏–¥–µ —Å–ª–æ–≤–∞—Ä—è.
    """
    player = db.get_or_create_player(user_id, username)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—É–ª–¥–∞—É–Ω–∞ (VIP ‚Äî –≤ 2 —Ä–∞–∑–∞ –º–µ–Ω—å—à–µ)
    current_time = time.time()
    vip_active = db.is_vip(user_id)
    eff_search_cd = SEARCH_COOLDOWN / 2 if vip_active else SEARCH_COOLDOWN
    if current_time - player.last_search < eff_search_cd:
        time_left = eff_search_cd - (current_time - player.last_search)
        return {"status": "cooldown", "time_left": time_left}

    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫
    all_drinks = db.get_all_drinks()
    if not all_drinks:
        return {"status": "no_drinks"}

    found_drink = random.choice(all_drinks)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–¥–∫–æ—Å—Ç—å
    if found_drink.is_special:
        rarity = 'Special'
    else:
        rarity = random.choices(list(RARITIES.keys()), weights=list(RARITIES.values()), k=1)[0]

    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–∞ + –Ω–∞–≥—Ä–∞–¥–∞ —Å–µ–ø—Ç–∏–º–∞–º–∏
    septims_reward = random.randint(5, 10)
    if vip_active:
        septims_reward *= 2
    new_coins = (player.coins or 0) + septims_reward
    db.add_drink_to_inventory(user_id=user_id, drink_id=found_drink.id, rarity=rarity)
    db.update_player(user_id, last_search=current_time, coins=new_coins)
    logger.info(
        f"[SEARCH] User {username} ({user_id}) found {found_drink.name} | rarity={rarity} | +{septims_reward} coins -> {new_coins}"
    )

    # –ü–ª–∞–Ω–∏—Ä—É–µ–º –∞–≤—Ç–æ–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —á–µ—Ä–µ–∑ JobQueue, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ (—É—á—ë—Ç VIP-–∫—É–ª–¥–∞—É–Ω–∞)
    if player.remind and context.application and context.application.job_queue:
        try:
            context.application.job_queue.run_once(
                search_reminder_job,
                when=eff_search_cd,
                chat_id=user_id,
                name=f"search_reminder_{user_id}_{int(time.time())}",
            )
        except Exception as ex:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {ex}")

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    rarity_emoji = COLOR_EMOJIS.get(rarity, '‚ö´')
    vip_ts = db.get_vip_until(user_id)
    vip_line = f"\n{VIP_EMOJI} V.I.P –¥–æ: {time.strftime('%d.%m.%Y %H:%M', time.localtime(vip_ts))}" if vip_ts and time.time() < vip_ts else ''
    # TODO: –ø—Ä–∏–º–µ–Ω–∏—Ç—å —ç—Ñ—Ñ–µ–∫—Ç—ã VIP (–º–µ—Ö–∞–Ω–∏–∫–∞ —à–∞–Ω—Å–æ–≤/–∫–¥) –ø–æ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—é
    caption = (
        f"üéâ –¢—ã –Ω–∞—à–µ–ª —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫!{vip_line}\n\n"
        f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {found_drink.name}\n"
        f"<b>–†–µ–¥–∫–æ—Å—Ç—å:</b> {rarity_emoji} {rarity}\n"
        f"üí∞ <b>–ù–∞–≥—Ä–∞–¥–∞:</b> +{septims_reward} —Å–µ–ø—Ç–∏–º–æ–≤ (–±–∞–ª–∞–Ω—Å: {new_coins})\n\n"
        f"<i>{found_drink.description}</i>"
    )
    image_full_path = os.path.join(ENERGY_IMAGES_DIR, found_drink.image_path) if found_drink.image_path else None
    
    return {
        "status": "ok",
        "caption": caption,
        "image_path": image_full_path,
        "reply_markup": InlineKeyboardMarkup([[InlineKeyboardButton("üîô –í –º–µ–Ω—é", callback_data='menu')]])
    }


async def find_energy(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–∏—Å–∫ —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É."""
    query = update.callback_query
    user = query.from_user
    
    # –ê–Ω—Ç–∏-–¥–∞–±–ª–∫–ª–∏–∫: –±–ª–æ–∫–∏—Ä—É–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ —É –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    lock = _get_lock(f"user:{user.id}:search")
    if lock.locked():
        await query.answer("–ü–æ–∏—Å–∫ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è‚Ä¶", show_alert=True)
        return
    async with lock:
        # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫—É–ª–¥–∞—É–Ω–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        player = db.get_or_create_player(user.id, user.username or user.first_name)
        vip_active = db.is_vip(user.id)
        eff_search_cd = SEARCH_COOLDOWN / 2 if vip_active else SEARCH_COOLDOWN
        if time.time() - player.last_search < eff_search_cd:
            await query.answer("–ï—â—ë –Ω–µ –≤—Ä–µ–º—è! –ü–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ.", show_alert=True)
            return
        
        await query.answer()

        # –ü–ª–∞–≤–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è –ø–æ–∏—Å–∫–∞
        search_frames = [
            "‚è≥ –ò—â–µ–º —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫‚Ä¶",
            "üîç –ò—â–µ–º —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫‚Ä¶",
            "üïµÔ∏è‚Äç‚ôÇÔ∏è –ò—â–µ–º —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫‚Ä¶"
        ]
        for frame in search_frames:
            try:
                await query.edit_message_text(frame)
            except BadRequest:
                pass  # –º–æ–∂–µ—Ç –±—ã—Ç—å, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
            await asyncio.sleep(0.7)

        # –í—ã–ø–æ–ª–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –ª–æ–≥–∏–∫—É
        result = await _perform_energy_search(user.id, user.username or user.first_name, context)

        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if result["status"] == "no_drinks":
            await query.edit_message_text("–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –Ω–µ—Ç —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫–æ–≤! –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.",
                                          reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –í –º–µ–Ω—é", callback_data='menu')]]))
            return
        
        # –í —Å–ª—É—á–∞–µ —É—Å–ø–µ—Ö–∞ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
        await query.message.delete()
        
        if result["status"] == "ok":
            if result["image_path"] and os.path.exists(result["image_path"]):
                with open(result["image_path"], 'rb') as photo:
                    await context.bot.send_photo(
                        chat_id=query.message.chat_id,
                        photo=photo,
                        caption=result["caption"],
                        reply_markup=result["reply_markup"],
                        parse_mode='HTML'
                    )
            else:
                await context.bot.send_message(
                    chat_id=query.message.chat_id,
                    text=result["caption"],
                    reply_markup=result["reply_markup"],
                    parse_mode='HTML'
                )


async def claim_daily_bonus(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–õ–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞."""
    query = update.callback_query
    await query.answer()

    user = query.from_user
    
    # –ê–Ω—Ç–∏-–¥–∞–±–ª–∫–ª–∏–∫: –æ–¥–∏–Ω –±–æ–Ω—É—Å –∑–∞ —Ä–∞–∑
    lock = _get_lock(f"user:{user.id}:bonus")
    if lock.locked():
        await query.answer("–ó–∞–ø—Ä–æ—Å –±–æ–Ω—É—Å–∞ —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è‚Ä¶", show_alert=True)
        return
    async with lock:
        player = db.get_or_create_player(user.id, user.username or user.first_name)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—É–ª–¥–∞—É–Ω–∞
        current_time = time.time()
        vip_active = db.is_vip(user.id)
        eff_bonus_cd = DAILY_BONUS_COOLDOWN / 2 if vip_active else DAILY_BONUS_COOLDOWN
        if current_time - player.last_bonus_claim < eff_bonus_cd:
            time_left = int(eff_bonus_cd - (current_time - player.last_bonus_claim))
            hours, remainder = divmod(time_left, 3600)
            minutes, seconds = divmod(remainder, 60)
            await query.answer(f"–ï—â—ë —Ä–∞–Ω–æ! –î–æ –±–æ–Ω—É—Å–∞: {hours:02d}:{minutes:02d}:{seconds:02d}", show_alert=True)
            return

    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫
    all_drinks = db.get_all_drinks()
    if not all_drinks:
        await query.edit_message_text("–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –Ω–µ—Ç —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫–æ–≤! –ë–æ–Ω—É—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–¥–∞–Ω.",
                                      reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –í –º–µ–Ω—é", callback_data='menu')]]))
        return
        
    found_drink = random.choice(all_drinks)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–¥–∫–æ—Å—Ç—å
    if found_drink.is_special:
        rarity = 'Special'
    else:
        rarity = random.choices(list(RARITIES.keys()), weights=list(RARITIES.values()), k=1)[0]

    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–∞
    db.add_drink_to_inventory(user_id=user.id, drink_id=found_drink.id, rarity=rarity)
    db.update_player(user.id, last_bonus_claim=current_time)
    logger.info(
        f"[DAILY BONUS] User {user.username or user.id} ({user.id}) received {found_drink.name} | rarity={rarity}"
    )

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    rarity_emoji = COLOR_EMOJIS.get(rarity, '‚ö´')
    vip_ts = db.get_vip_until(user.id)
    vip_line = f"\n{VIP_EMOJI} V.I.P –¥–æ: {time.strftime('%d.%m.%Y %H:%M', time.localtime(vip_ts))}" if vip_ts and time.time() < vip_ts else ''
    # TODO: –ø—Ä–∏–º–µ–Ω–∏—Ç—å —ç—Ñ—Ñ–µ–∫—Ç—ã VIP (–º–µ—Ö–∞–Ω–∏–∫–∞ —à–∞–Ω—Å–æ–≤/–¥–æ–ø. –±–æ–Ω—É—Å–æ–≤) –ø–æ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—é
    caption = (
        f"üéâ –¢—ã –ø–æ–ª—É—á–∏–ª —Å–≤–æ–π –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å!{vip_line}\n\n"
        f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {found_drink.name}\n"
        f"<b>–†–µ–¥–∫–æ—Å—Ç—å:</b> {rarity_emoji} {rarity}\n\n"
        f"<i>{found_drink.description}</i>"
    )

    keyboard = [[InlineKeyboardButton("üîô –í –º–µ–Ω—é", callback_data='menu')]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.message.delete()
    
    image_full_path = os.path.join(ENERGY_IMAGES_DIR, found_drink.image_path) if found_drink.image_path else None
    if image_full_path and os.path.exists(image_full_path):
        with open(image_full_path, 'rb') as photo:
            await context.bot.send_photo(
                chat_id=query.message.chat_id,
                photo=photo,
                caption=caption,
                reply_markup=reply_markup,
                parse_mode='HTML'
            )
    else:
        await context.bot.send_message(
            chat_id=query.message.chat_id,
            text=caption,
            reply_markup=reply_markup,
            parse_mode='HTML'
        )


async def show_inventory(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –∏–≥—Ä–æ–∫–∞ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π."""
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id
    inventory_items = db.get_player_inventory_with_details(user_id)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–∑ callback_data: inventory_p{num}
    page = 1
    try:
        if query.data and query.data.startswith('inventory_p'):
            page = int(query.data.removeprefix('inventory_p'))
    except Exception:
        page = 1
    if page < 1:
        page = 1

    # –ï—Å–ª–∏ –ø—É—Å—Ç–æ
    if not inventory_items:
        inventory_text = "–¢–≤–æ–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É—Å—Ç. –ü–æ—Ä–∞ –Ω–∞ –ø–æ–∏—Å–∫–∏!"
        keyboard_rows = []
        total_pages = 1
    else:
        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏—è
        sorted_items = sorted(
            inventory_items,
            key=lambda i: (
                RARITY_ORDER.index(i.rarity) if i.rarity in RARITY_ORDER else len(RARITY_ORDER),
                i.drink.name.lower(),
            )
        )
        total_items = len(sorted_items)
        total_pages = max(1, (total_items + ITEMS_PER_PAGE - 1) // ITEMS_PER_PAGE)
        if page > total_pages:
            page = total_pages
        start_idx = (page - 1) * ITEMS_PER_PAGE
        end_idx = start_idx + ITEMS_PER_PAGE
        page_items = sorted_items[start_idx:end_idx]

        # –¢–µ–∫—Å—Ç —Å —É—á–µ—Ç–æ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        inventory_text = (
            f"<b>üì¶ –¢–≤–æ–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å</b> ‚Äî {total_items} –ø—Ä–µ–¥–º–µ—Ç(–æ–≤)\n"
            f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{total_pages}\n"
        )
        current_rarity = None
        for item in page_items:
            if item.rarity != current_rarity:
                rarity_emoji = COLOR_EMOJIS.get(item.rarity, '‚ö´')
                inventory_text += f"\n<b>{rarity_emoji} {item.rarity}</b>\n"
                current_rarity = item.rarity
            inventory_text += f"‚Ä¢ {item.drink.name} ‚Äî <b>{item.quantity} —à—Ç.</b>\n"

        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ (2 –≤ —Å—Ç—Ä–æ–∫–µ)
        keyboard_rows = []
        current_row = []
        for item in page_items:
            btn_text = f"{COLOR_EMOJIS.get(item.rarity,'‚ö´')} {item.drink.name}"
            callback = f"view_{item.id}"
            current_row.append(InlineKeyboardButton(btn_text, callback_data=callback))
            if len(current_row) == 2:
                keyboard_rows.append(current_row)
                current_row = []
        if current_row:
            keyboard_rows.append(current_row)

    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è (–∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏)
    if total_pages > 1:
        prev_page = max(1, page - 1)
        next_page = min(total_pages, page + 1)
        keyboard_rows.append([
            InlineKeyboardButton("‚¨ÖÔ∏è", callback_data=f"inventory_p{prev_page}" if page > 1 else 'noop'),
            InlineKeyboardButton(f"{page}/{total_pages}", callback_data='noop'),
            InlineKeyboardButton("‚û°Ô∏è", callback_data=f"inventory_p{next_page}" if page < total_pages else 'noop'),
        ])

    # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ –≤ –º–µ–Ω—é
    keyboard_rows.append([InlineKeyboardButton("üîô –í –º–µ–Ω—é", callback_data='menu')])
    reply_markup = InlineKeyboardMarkup(keyboard_rows)

    message = query.message
    # –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π –º–µ—Å—Å–µ–¥–∂ —Å–æ–¥–µ—Ä–∂–∏—Ç –º–µ–¥–∏–∞, —É–¥–∞–ª—è–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
    if getattr(message, 'photo', None) or getattr(message, 'document', None) or getattr(message, 'video', None):
        try:
            await message.delete()
        except BadRequest:
            pass
        await context.bot.send_message(
            chat_id=user_id,
            text=inventory_text,
            reply_markup=reply_markup,
            parse_mode='HTML'
        )
    else:
        try:
            await query.edit_message_text(inventory_text, reply_markup=reply_markup, parse_mode='HTML')
        except BadRequest:
            # –ù–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –Ω–µ–ª—å–∑—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)
            await context.bot.send_message(
                chat_id=user_id,
                text=inventory_text,
                reply_markup=reply_markup,
                parse_mode='HTML'
            )


async def show_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä–æ–∫–∞."""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    player = db.get_or_create_player(user_id, query.from_user.username or query.from_user.first_name)
    inventory_items = db.get_player_inventory_with_details(user_id)
    
    total_drinks = sum(item.quantity for item in inventory_items)
    unique_drinks = len(inventory_items)

    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ —Ä–µ–¥–∫–æ—Å—Ç—è–º
    rarity_counter = defaultdict(int)
    for item in inventory_items:
        rarity_counter[item.rarity] += item.quantity

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–æ–ø-3 —Å–∞–º—ã—Ö —Ä–µ–¥–∫–∏—Ö –Ω–∞–ø–∏—Ç–∫–∞ (–ø–æ —Ä–µ–¥–∫–æ—Å—Ç–∏ –∏ –∑–∞—Ç–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤—É)
    top_items = sorted(
        inventory_items,
        key=lambda i: (RARITY_ORDER.index(i.rarity) if i.rarity in RARITY_ORDER else len(RARITY_ORDER), -i.quantity)
    )[:3]

    # VIP —Å—Ç–∞—Ç—É—Å
    vip_ts = db.get_vip_until(user_id)
    vip_active = bool(vip_ts and time.time() < vip_ts)
    vip_line = (
        f"{VIP_EMOJI} V.I.P –¥–æ: {time.strftime('%d.%m.%Y %H:%M', time.localtime(vip_ts))}\n"
        if vip_active else f"{VIP_EMOJI} V.I.P: –Ω–µ—Ç\n"
    )

    stats_text = (
        f"<b>üìä –¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n\n"
        f"{vip_line}"
        f"üí∞ –ú–æ–Ω–µ—Ç: {player.coins}\n"
        f"ü•§ –í—Å–µ–≥–æ —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫–æ–≤: {total_drinks}\n"
        f"üîë –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –≤–∏–¥–æ–≤: {unique_drinks}\n\n"
    )

    # –î–æ–±–∞–≤–ª—è–µ–º —Å–≤–æ–¥–∫—É –ø–æ —Ä–µ–¥–∫–æ—Å—Ç—è–º
    stats_text += "<b>–ü–æ —Ä–µ–¥–∫–æ—Å—Ç—è–º:</b>\n"
    for rarity in RARITY_ORDER:
        if rarity in rarity_counter:
            emoji = COLOR_EMOJIS.get(rarity, '‚ö´')
            stats_text += f"{emoji} {rarity}: {rarity_counter[rarity]}\n"
    stats_text += "\n"

    # –¢–æ–ø-3 —Ä–µ–¥–∫–∏—Ö –Ω–∞–ø–∏—Ç–∫–∞
    if top_items:
        stats_text += "<b>üèÜ –¢–≤–æ–∏ —Ä–µ–¥–∫–∏–µ –Ω–∞—Ö–æ–¥–∫–∏:</b>\n"
        for idx, item in enumerate(top_items, start=1):
            emoji = ['ü•á', 'ü•à', 'ü•â'][idx - 1] if idx <= 3 else '‚ñ´Ô∏è'
            rarity_emoji = COLOR_EMOJIS.get(item.rarity, '‚ö´')
            stats_text += f"{emoji} {item.drink.name} ({rarity_emoji} {item.rarity}) ‚Äî {item.quantity} —à—Ç.\n"

    keyboard = [[InlineKeyboardButton("üîô –í –º–µ–Ω—é", callback_data='menu')]]

    # –ï–¥–∏–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ: –µ—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–¥–∏–∞ ‚Äî —É–¥–∞–ª—è–µ–º –∏ —à–ª—ë–º –Ω–æ–≤–æ–µ
    message = query.message
    if getattr(message, 'photo', None) or getattr(message, 'document', None) or getattr(message, 'video', None):
        try:
            await message.delete()
        except BadRequest:
            pass
        await context.bot.send_message(
            chat_id=user_id,
            text=stats_text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='HTML'
        )
    else:
        await query.edit_message_text(stats_text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='HTML')


async def view_inventory_item(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –Ω–∞–ø–∏—Ç–∫–∞ –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è."""
    query = update.callback_query
    await query.answer()

    try:
        item_id = int(query.data.split('_')[1])
    except (IndexError, ValueError):
        await query.answer("–û—à–∏–±–∫–∞ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç–∞", show_alert=True)
        return

    inventory_item = db.get_inventory_item(item_id)
    if not inventory_item:
        await query.answer("–ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    drink = inventory_item.drink
    rarity = inventory_item.rarity
    rarity_emoji = COLOR_EMOJIS.get(rarity, '‚ö´')

    caption = (
        f"<b>{drink.name}</b>\n"
        f"–†–µ–¥–∫–æ—Å—Ç—å: {rarity_emoji} {rarity}\n"
        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: <b>{inventory_item.quantity}</b> —à—Ç.\n\n"
        f"{drink.description}"
    )

    back_keyboard = InlineKeyboardMarkup(
        [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='inventory')]]
    )

    image_full_path = os.path.join(ENERGY_IMAGES_DIR, drink.image_path) if drink.image_path else None

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Å–ø–∏—Å–æ–∫ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è)
    try:
        await query.message.delete()
    except BadRequest:
        pass

    if image_full_path and os.path.exists(image_full_path):
        with open(image_full_path, 'rb') as photo:
            await context.bot.send_photo(
                chat_id=query.message.chat_id,
                photo=photo,
                caption=caption,
                reply_markup=back_keyboard,
                parse_mode='HTML'
            )
    else:
        await context.bot.send_message(
            chat_id=query.message.chat_id,
            text=caption,
            reply_markup=back_keyboard,
            parse_mode='HTML'
        )


# --- –î–æ–ø. –ë–æ–Ω—É—Å—ã: –ø–æ–¥–º–µ–Ω—é –∏ —ç–ª–µ–º–µ–Ω—Ç—ã ---
async def show_extra_bonuses(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥–º–µ–Ω—é –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –±–æ–Ω—É—Å–æ–≤."""
    query = update.callback_query
    await query.answer()

    user = query.from_user
    player = db.get_or_create_player(user.id, user.username or user.first_name)
    lang = player.language

    text = t(lang, 'extra_bonuses_title')
    # –û—Å—Ç–∞—Ç–∫–∏ –Ω–∞ —Å–∫–ª–∞–¥–µ
    tg_stock = db.get_tg_premium_stock()
    steam_stock = db.get_bonus_stock('steam_game')
    stars_stock = db.get_bonus_stock('stars_500')
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –æ –Ω–∞–ª–∏—á–∏–∏
    text += "\n" + (f"TG Premium ‚Äî {'in stock' if lang == 'en' else '–≤ –Ω–∞–ª–∏—á–∏–∏'}: {tg_stock}")
    text += "\n" + (f"{'Steam game' if lang == 'en' else '–ò–≥—Ä–∞ –≤ Steam'} ‚Äî {'in stock' if lang == 'en' else '–≤ –Ω–∞–ª–∏—á–∏–∏'}: {steam_stock}")
    text += "\n" + (f"{'Stars 500' if lang == 'en' else '–ó–≤—ë–∑–¥—ã 500'} ‚Äî {'in stock' if lang == 'en' else '–≤ –Ω–∞–ª–∏—á–∏–∏'}: {stars_stock}")
    keyboard = []
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º TG Premium —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –æ—Å—Ç–∞—Ç–æ–∫ –Ω–∞ —Å–∫–ª–∞–¥–µ
    if tg_stock > 0:
        keyboard.append([InlineKeyboardButton(t(lang, 'tg_premium_3m'), callback_data='bonus_tg_premium')])
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º Steam –∏–≥—Ä—É, –µ—Å–ª–∏ –µ—Å—Ç—å –æ—Å—Ç–∞—Ç–æ–∫
    if steam_stock > 0:
        keyboard.append([InlineKeyboardButton(t(lang, 'steam_game_500'), callback_data='bonus_steam_game')])
    # VIP –¥–æ—Å—Ç—É–ø–µ–Ω –≤—Å–µ–≥–¥–∞
    keyboard.append([InlineKeyboardButton(t(lang, 'vip'), callback_data='vip_menu')])
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ó–≤—ë–∑–¥—ã, –µ—Å–ª–∏ –µ—Å—Ç—å –æ—Å—Ç–∞—Ç–æ–∫
    if stars_stock > 0:
        keyboard.append([InlineKeyboardButton(t(lang, 'stars'), callback_data='stars_menu')])
    keyboard.append([InlineKeyboardButton("üîô –í –º–µ–Ω—é", callback_data='menu')])
    reply_markup = InlineKeyboardMarkup(keyboard)

    message = query.message
    if getattr(message, 'photo', None) or getattr(message, 'document', None) or getattr(message, 'video', None):
        try:
            await message.delete()
        except BadRequest:
            pass
        await context.bot.send_message(chat_id=user.id, text=text, reply_markup=reply_markup, parse_mode='HTML')
    else:
        try:
            await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='HTML')
        except BadRequest:
            await context.bot.send_message(chat_id=user.id, text=text, reply_markup=reply_markup, parse_mode='HTML')


async def buy_steam_game(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫—É–ø–∫–∞ –±–æ–Ω—É—Å–∞ ¬´–ò–≥—Ä–∞ –≤ Steam¬ª –∑–∞ –≤–Ω—É—Ç—Ä–∏–∏–≥—Ä–æ–≤—É—é –≤–∞–ª—é—Ç—É —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –¥–∞–±–ª–∫–ª–∏–∫–æ–≤."""
    query = update.callback_query
    await query.answer()

    user = query.from_user
    player = db.get_or_create_player(user.id, user.username or user.first_name)
    lang = player.language

    # –ó–∞—â–∏—Ç–∞ –æ—Ç –¥–∞–±–ª–∫–ª–∏–∫–æ–≤
    lock = _get_lock(f"user:{user.id}:buy_steam_game")
    if lock.locked():
        await query.answer("–û–±—Ä–∞–±–æ—Ç–∫–∞‚Ä¶" if lang != 'en' else 'Processing‚Ä¶', show_alert=False)
        return

    async with lock:
        res = db.purchase_bonus_with_stock(user.id, kind='steam_game', cost_coins=TG_PREMIUM_COST, duration_seconds=0, extra='500')
        if not res.get('ok'):
            reason = res.get('reason')
            if reason == 'not_enough_coins':
                await query.answer('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç' if lang != 'en' else 'Not enough coins', show_alert=True)
            elif reason == 'out_of_stock':
                await query.answer('–ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏' if lang != 'en' else 'Out of stock', show_alert=True)
            else:
                await query.answer('–û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.' if lang != 'en' else 'Error. Please try later.', show_alert=True)
            return

        coins_left = res.get('coins_left')
        receipt_id = int(res.get('receipt_id') or 0)

        if lang == 'en':
            text = f"Steam game bonus purchased! Coins left: {coins_left}"
        else:
            text = f"–ë–æ–Ω—É—Å ¬´–ò–≥—Ä–∞ –≤ Steam¬ª –∫—É–ø–ª–µ–Ω! –û—Å—Ç–∞—Ç–æ–∫ –º–æ–Ω–µ—Ç: {coins_left}"
        if receipt_id:
            if lang == 'en':
                text += f"\nReceipt ID: {receipt_id}"
            else:
                text += f"\nID —á–µ–∫–∞: {receipt_id}"

        keyboard = []
        if receipt_id:
            keyboard.append([InlineKeyboardButton(t(lang, 'tg_view_receipt'), callback_data=f'view_receipt_{receipt_id}')])
        keyboard.append([InlineKeyboardButton(t(lang, 'tg_my_receipts'), callback_data='my_receipts')])
        keyboard.append([InlineKeyboardButton(t(lang, 'btn_back'), callback_data='extra_bonuses')])
        keyboard.append([InlineKeyboardButton("üîô –í –º–µ–Ω—é", callback_data='menu')])
        reply_markup = InlineKeyboardMarkup(keyboard)

        message = query.message
        if getattr(message, 'photo', None) or getattr(message, 'document', None) or getattr(message, 'video', None):
            try:
                await message.delete()
            except BadRequest:
                pass
            await context.bot.send_message(chat_id=user.id, text=text, reply_markup=reply_markup, parse_mode='HTML')
        else:
            try:
                await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='HTML')
            except BadRequest:
                await context.bot.send_message(chat_id=user.id, text=text, reply_markup=reply_markup, parse_mode='HTML')

async def show_market_plantation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–≠–∫—Ä–∞–Ω –ü–ª–∞–Ω—Ç–∞—Ü–∏–∏ (–∑–∞–≥–ª—É—à–∫–∞)."""
    query = update.callback_query
    await query.answer()

    user = query.from_user
    player = db.get_or_create_player(user.id, user.username or user.first_name)
    _ = player.language

    text = "<b>üå± –ü–ª–∞–Ω—Ç–∞—Ü–∏—è</b>\n–°–∫–æ—Ä–æ –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –≤—ã—Ä–∞—â–∏–≤–∞—Ç—å —Ä–µ—Å—É—Ä—Å—ã –∏ —Å–æ–±–∏—Ä–∞—Ç—å —É—Ä–æ–∂–∞–π."
    keyboard = [
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='market_menu')],
        [InlineKeyboardButton("üîô –í –º–µ–Ω—é", callback_data='menu')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    message = query.message
    if getattr(message, 'photo', None) or getattr(message, 'document', None) or getattr(message, 'video', None):
        try:
            await message.delete()
        except BadRequest:
            pass
        await context.bot.send_message(chat_id=user.id, text=text, reply_markup=reply_markup, parse_mode='HTML')
    else:
        try:
            await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='HTML')
        except BadRequest:
            await context.bot.send_message(chat_id=user.id, text=text, reply_markup=reply_markup, parse_mode='HTML')


async def show_market_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–¥–º–µ–Ω—é –†—ã–Ω–æ–∫: –ú–∞–≥–∞–∑–∏–Ω, –ü—Ä–∏–ª–∞–≤–∫–∏, –ü—Ä–∏—ë–º–Ω–∏–∫."""
    query = update.callback_query
    await query.answer()

    user = query.from_user
    player = db.get_or_create_player(user.id, user.username or user.first_name)
    lang = player.language  # –Ω–∞ –±—É–¥—É—â–µ–µ, —Å–µ–π—á–∞—Å —Ç–µ–∫—Å—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º

    text = "<b>üõí –†—ã–Ω–æ–∫</b>\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:"
    keyboard = [
        [InlineKeyboardButton("üè¨ –ú–∞–≥–∞–∑–∏–Ω", callback_data='market_shop')],
        [InlineKeyboardButton("üß∫ –ü—Ä–∏–ª–∞–≤–∫–∏", callback_data='market_stalls')],
        [InlineKeyboardButton("‚ôªÔ∏è –ü—Ä–∏—ë–º–Ω–∏–∫", callback_data='market_receiver')],
        [InlineKeyboardButton("üå± –ü–ª–∞–Ω—Ç–∞—Ü–∏—è", callback_data='market_plantation')],
        [InlineKeyboardButton("üîô –í –º–µ–Ω—é", callback_data='menu')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    message = query.message
    if getattr(message, 'photo', None) or getattr(message, 'document', None) or getattr(message, 'video', None):
        try:
            await message.delete()
        except BadRequest:
            pass
        await context.bot.send_message(chat_id=user.id, text=text, reply_markup=reply_markup, parse_mode='HTML')
    else:
        try:
            await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='HTML')
        except BadRequest:
            await context.bot.send_message(chat_id=user.id, text=text, reply_markup=reply_markup, parse_mode='HTML')


async def show_market_shop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–≠–∫—Ä–∞–Ω –ú–∞–≥–∞–∑–∏–Ω–∞ (–∑–∞–≥–ª—É—à–∫–∞)."""
    query = update.callback_query
    await query.answer()

    user = query.from_user
    player = db.get_or_create_player(user.id, user.username or user.first_name)
    _ = player.language

    text = "<b>üè¨ –ú–∞–≥–∞–∑–∏–Ω</b>\n–°–∫–æ—Ä–æ –∑–¥–µ—Å—å –ø–æ—è–≤—è—Ç—Å—è —Ç–æ–≤–∞—Ä—ã."
    keyboard = [
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='market_menu')],
        [InlineKeyboardButton("üîô –í –º–µ–Ω—é", callback_data='menu')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    message = query.message
    if getattr(message, 'photo', None) or getattr(message, 'document', None) or getattr(message, 'video', None):
        try:
            await message.delete()
        except BadRequest:
            pass
        await context.bot.send_message(chat_id=user.id, text=text, reply_markup=reply_markup, parse_mode='HTML')
    else:
        try:
            await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='HTML')
        except BadRequest:
            await context.bot.send_message(chat_id=user.id, text=text, reply_markup=reply_markup, parse_mode='HTML')


async def show_market_stalls(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–≠–∫—Ä–∞–Ω –ü—Ä–∏–ª–∞–≤–∫–æ–≤ (–∑–∞–≥–ª—É—à–∫–∞)."""
    query = update.callback_query
    await query.answer()

    user = query.from_user
    player = db.get_or_create_player(user.id, user.username or user.first_name)
    _ = player.language

    text = "<b>üß∫ –ü—Ä–∏–ª–∞–≤–∫–∏</b>\n–°–∫–æ—Ä–æ –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –±—É–¥–µ—Ç —Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤."
    keyboard = [
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='market_menu')],
        [InlineKeyboardButton("üîô –í –º–µ–Ω—é", callback_data='menu')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    message = query.message
    if getattr(message, 'photo', None) or getattr(message, 'document', None) or getattr(message, 'video', None):
        try:
            await message.delete()
        except BadRequest:
            pass
        await context.bot.send_message(chat_id=user.id, text=text, reply_markup=reply_markup, parse_mode='HTML')
    else:
        try:
            await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='HTML')
        except BadRequest:
            await context.bot.send_message(chat_id=user.id, text=text, reply_markup=reply_markup, parse_mode='HTML')


async def show_market_receiver(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–≠–∫—Ä–∞–Ω –ü—Ä–∏—ë–º–Ω–∏–∫–∞ (–∑–∞–≥–ª—É—à–∫–∞)."""
    query = update.callback_query
    await query.answer()

    user = query.from_user
    player = db.get_or_create_player(user.id, user.username or user.first_name)
    _ = player.language

    text = "<b>‚ôªÔ∏è –ü—Ä–∏—ë–º–Ω–∏–∫</b>\n–°–¥–∞–≤–∞–π—Ç–µ –ª–∏—à–Ω–∏–µ —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫–∏ –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –º–æ–Ω–µ—Ç—ã. –°–∫–æ—Ä–æ!"
    keyboard = [
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='market_menu')],
        [InlineKeyboardButton("üîô –í –º–µ–Ω—é", callback_data='menu')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    message = query.message
    if getattr(message, 'photo', None) or getattr(message, 'document', None) or getattr(message, 'video', None):
        try:
            await message.delete()
        except BadRequest:
            pass
        await context.bot.send_message(chat_id=user.id, text=text, reply_markup=reply_markup, parse_mode='HTML')
    else:
        try:
            await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='HTML')
        except BadRequest:
            await context.bot.send_message(chat_id=user.id, text=text, reply_markup=reply_markup, parse_mode='HTML')


async def show_stars_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–¥–º–µ–Ω—é –ó–≤–µ–∑–¥—ã —Å –≤—ã–±–æ—Ä–æ–º –ø–∞–∫–µ—Ç–∞."""
    query = update.callback_query
    await query.answer()

    user = query.from_user
    player = db.get_or_create_player(user.id, user.username or user.first_name)
    lang = player.language

    stock = db.get_bonus_stock('stars_500')
    text = t(lang, 'stars_title')
    text += f"\n{'In stock' if lang == 'en' else '–í –Ω–∞–ª–∏—á–∏–∏'}: {stock}"
    keyboard = []
    if stock > 0:
        keyboard.append([InlineKeyboardButton(t(lang, 'stars_500'), callback_data='stars_500')])
    keyboard.append([InlineKeyboardButton(t(lang, 'btn_back'), callback_data='extra_bonuses')])
    keyboard.append([InlineKeyboardButton("üîô –í –º–µ–Ω—é", callback_data='menu')])
    reply_markup = InlineKeyboardMarkup(keyboard)

    message = query.message
    if getattr(message, 'photo', None) or getattr(message, 'document', None) or getattr(message, 'video', None):
        try:
            await message.delete()
        except BadRequest:
            pass
        await context.bot.send_message(chat_id=user.id, text=text, reply_markup=reply_markup, parse_mode='HTML')
    else:
        try:
            await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='HTML')
        except BadRequest:
            await context.bot.send_message(chat_id=user.id, text=text, reply_markup=reply_markup, parse_mode='HTML')


async def buy_vip(update: Update, context: ContextTypes.DEFAULT_TYPE, plan_key: str):
    """–ü–æ–∫—É–ø–∫–∞ VIP –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π —Å—Ä–æ–∫ (plan_key: '1d'|'7d'|'30d')."""
    query = update.callback_query
    await query.answer()

    user = query.from_user
    player = db.get_or_create_player(user.id, user.username or user.first_name)
    lang = player.language

    if plan_key not in VIP_COSTS or plan_key not in VIP_DURATIONS_SEC:
        await query.answer("–û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∞", show_alert=True)
        return

    # –ó–∞—â–∏—Ç–∞ –æ—Ç –¥–∞–±–ª–∫–ª–∏–∫–æ–≤
    lock = _get_lock(f"user:{user.id}:buy_vip")
    if lock.locked():
        await query.answer("–û–±—Ä–∞–±–æ—Ç–∫–∞‚Ä¶", show_alert=False)
        return

    async with lock:
        cost = VIP_COSTS[plan_key]
        duration = VIP_DURATIONS_SEC[plan_key]
        res = db.purchase_vip(user.id, cost, duration)
        if not res.get('ok'):
            reason = res.get('reason')
            if reason == 'not_enough_coins':
                await query.answer(t(lang, 'vip_not_enough'), show_alert=True)
            else:
                await query.answer('–û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', show_alert=True)
            return

        vip_until_ts = res.get('vip_until') or db.get_vip_until(user.id)
        coins_left = res.get('coins_left')
        until_str = time.strftime('%d.%m.%Y %H:%M', time.localtime(int(vip_until_ts))) if vip_until_ts else '‚Äî'

        text = t(lang, 'vip_bought').format(emoji=VIP_EMOJI, dt=until_str, coins=coins_left)
        keyboard = [
            [InlineKeyboardButton(t(lang, 'btn_back'), callback_data='vip_menu')],
            [InlineKeyboardButton("üîô –í –º–µ–Ω—é", callback_data='menu')],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        message = query.message
        if getattr(message, 'photo', None) or getattr(message, 'document', None) or getattr(message, 'video', None):
            try:
                await message.delete()
            except BadRequest:
                pass
            await context.bot.send_message(chat_id=user.id, text=text, reply_markup=reply_markup, parse_mode='HTML')
        else:
            try:
                await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='HTML')
            except BadRequest:
                await context.bot.send_message(chat_id=user.id, text=text, reply_markup=reply_markup, parse_mode='HTML')


async def view_receipt_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ–¥–Ω–æ–≥–æ —á–µ–∫–∞ –ø–æ ID —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø—Ä–∞–≤."""
    query = update.callback_query
    await query.answer()

    user = query.from_user
    player = db.get_or_create_player(user.id, user.username or user.first_name)
    lang = player.language

    data = query.data or ''
    try:
        rid_str = data.split('view_receipt_', 1)[1]
        receipt_id = int(rid_str)
    except Exception:
        await query.answer("–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", show_alert=True)
        return

    rec = db.get_receipt_by_id(receipt_id)
    if not rec:
        await query.answer("–ß–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞: –≤–ª–∞–¥–µ–ª–µ—Ü –∏–ª–∏ —É—Ä.3/–°–æ–∑–¥–∞—Ç–µ–ª—å
    is_creator = (user.username in ADMIN_USERNAMES)
    if rec.user_id != user.id:
        lvl = db.get_admin_level(user.id)
        if not is_creator and lvl != 3:
            await query.answer("–ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
            return

    def fmt_ts(ts: int | None) -> str:
        if not ts:
            return '‚Äî'
        try:
            return time.strftime('%d.%m.%Y %H:%M', time.localtime(int(ts)))
        except Exception:
            return str(ts)

    kind_title = 'TG Premium' if getattr(rec, 'kind', '') == 'tg_premium' else str(getattr(rec, 'kind', '‚Äî'))
    duration_days = int((getattr(rec, 'duration_seconds', 0) or 0) // (24 * 60 * 60))
    status = getattr(rec, 'status', '‚Äî')
    verified_by = getattr(rec, 'verified_by', None)
    verified_at = getattr(rec, 'verified_at', None)

    text_lines = [
        f"<b>–ß–µ–∫ #{getattr(rec, 'id', '?')}</b>",
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {getattr(rec, 'user_id', '?')}",
        f"–í–∏–¥: {html.escape(kind_title)}",
        f"–°—É–º–º–∞: {getattr(rec, 'amount_coins', 0)}",
        f"–°—Ä–æ–∫: {duration_days} –¥–Ω.",
        f"–ö—É–ø–ª–µ–Ω–æ: {fmt_ts(getattr(rec, 'purchased_at', None))}",
        f"–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {fmt_ts(getattr(rec, 'valid_until', None))}",
        f"–°—Ç–∞—Ç—É—Å: {html.escape(str(status))}",
    ]
    if verified_by:
        text_lines.append(f"–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ –∞–¥–º–∏–Ω–æ–º: {verified_by} –≤ {fmt_ts(verified_at)}")
    text = "\n".join(text_lines)

    keyboard = [
        [InlineKeyboardButton(t(lang, 'tg_my_receipts'), callback_data='my_receipts')],
        [InlineKeyboardButton(t(lang, 'btn_back'), callback_data='extra_bonuses')],
        [InlineKeyboardButton("üîô –í –º–µ–Ω—é", callback_data='menu')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    message = query.message
    if getattr(message, 'photo', None) or getattr(message, 'document', None) or getattr(message, 'video', None):
        try:
            await message.delete()
        except BadRequest:
            pass
        await context.bot.send_message(chat_id=user.id, text=text, reply_markup=reply_markup, parse_mode='HTML')
    else:
        try:
            await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='HTML')
        except BadRequest:
            await context.bot.send_message(chat_id=user.id, text=text, reply_markup=reply_markup, parse_mode='HTML')


async def my_receipts_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —á–µ–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞."""
    query = update.callback_query
    await query.answer()

    user = query.from_user
    player = db.get_or_create_player(user.id, user.username or user.first_name)
    lang = player.language

    recs = db.get_receipts_by_user(user.id, limit=10)
    if not recs:
        text = "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —á–µ–∫–æ–≤." if lang != 'en' else "You have no receipts yet."
        keyboard = [
            [InlineKeyboardButton(t(lang, 'btn_back'), callback_data='extra_bonuses')],
            [InlineKeyboardButton("üîô –í –º–µ–Ω—é", callback_data='menu')],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        try:
            await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='HTML')
        except BadRequest:
            await context.bot.send_message(chat_id=user.id, text=text, reply_markup=reply_markup, parse_mode='HTML')
        return

    header = "–í–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —á–µ–∫–∏:" if lang != 'en' else "Your recent receipts:"
    text = header

    keyboard_rows = []
    for r in recs:
        rid = getattr(r, 'id', None)
        status = getattr(r, 'status', '‚Äî')
        if not rid:
            continue
        label = f"–ß–µ–∫ #{rid} ‚Äî {status}" if lang != 'en' else f"Receipt #{rid} ‚Äî {status}"
        keyboard_rows.append([InlineKeyboardButton(label, callback_data=f'view_receipt_{rid}')])

    keyboard_rows.append([InlineKeyboardButton(t(lang, 'btn_back'), callback_data='extra_bonuses')])
    keyboard_rows.append([InlineKeyboardButton("üîô –í –º–µ–Ω—é", callback_data='menu')])
    reply_markup = InlineKeyboardMarkup(keyboard_rows)

    message = query.message
    if getattr(message, 'photo', None) or getattr(message, 'document', None) or getattr(message, 'video', None):
        try:
            await message.delete()
        except BadRequest:
            pass
        await context.bot.send_message(chat_id=user.id, text=text, reply_markup=reply_markup, parse_mode='HTML')
    else:
        try:
            await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='HTML')
        except BadRequest:
            await context.bot.send_message(chat_id=user.id, text=text, reply_markup=reply_markup, parse_mode='HTML')

async def myreceipts_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /myreceipts ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —á–µ–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    msg = update.message
    user = update.effective_user
    player = db.get_or_create_player(user.id, user.username or user.first_name)
    lang = player.language

    recs = db.get_receipts_by_user(user.id, limit=10)
    if not recs:
        text = "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —á–µ–∫–æ–≤." if lang != 'en' else "You have no receipts yet."
        keyboard = [
            [InlineKeyboardButton(t(lang, 'btn_back'), callback_data='extra_bonuses')],
            [InlineKeyboardButton("üîô –í –º–µ–Ω—é", callback_data='menu')],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        try:
            await msg.reply_html(text, reply_markup=reply_markup)
        except Exception:
            await msg.reply_text(text, reply_markup=reply_markup)
        return

    header = "–í–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —á–µ–∫–∏:" if lang != 'en' else "Your recent receipts:"
    text = header

    keyboard_rows = []
    for r in recs:
        rid = getattr(r, 'id', None)
        status = getattr(r, 'status', '‚Äî')
        if not rid:
            continue
        label = f"–ß–µ–∫ #{rid} ‚Äî {status}" if lang != 'en' else f"Receipt #{rid} ‚Äî {status}"
        keyboard_rows.append([InlineKeyboardButton(label, callback_data=f'view_receipt_{rid}')])

    keyboard_rows.append([InlineKeyboardButton(t(lang, 'btn_back'), callback_data='extra_bonuses')])
    keyboard_rows.append([InlineKeyboardButton("üîô –í –º–µ–Ω—é", callback_data='menu')])
    reply_markup = InlineKeyboardMarkup(keyboard_rows)

    try:
        await msg.reply_html(text, reply_markup=reply_markup)
    except Exception:
        await msg.reply_text(text, reply_markup=reply_markup)

async def show_stars_500(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–î–µ—Ç–∞–ª–∏ –ø–∞–∫–µ—Ç–∞ 500 –∑–≤—ë–∑–¥ (–∑–∞–≥–ª—É—à–∫–∞)."""
    query = update.callback_query
    await query.answer()

    user = query.from_user
    player = db.get_or_create_player(user.id, user.username or user.first_name)
    lang = player.language

    # –¢–µ–∫—Å—Ç —Å —Ü–µ–Ω–æ–π –∏ –±–∞–ª–∞–Ω—Å–æ–º
    stock = db.get_bonus_stock('stars_500')
    text = t(lang, 'stars_details_500')
    text += f"\n{'Price' if lang == 'en' else '–¶–µ–Ω–∞'}: {TG_PREMIUM_COST}"
    text += f"\n{'In stock' if lang == 'en' else '–í –Ω–∞–ª–∏—á–∏–∏'}: {stock}"
    current_coins = int(player.coins or 0)
    if current_coins < TG_PREMIUM_COST:
        if lang == 'en':
            text += f"\nNot enough coins: {current_coins}/{TG_PREMIUM_COST}"
        else:
            text += f"\n–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç: {current_coins}/{TG_PREMIUM_COST}"

    # –ö–Ω–æ–ø–∫–∏ —Å –ø–æ–∫—É–ø–∫–æ–π
    keyboard = []
    if stock > 0:
        buy_label = ("Buy" if lang == 'en' else '–ö—É–ø–∏—Ç—å') + f" ‚Äî {TG_PREMIUM_COST}"
        keyboard.append([InlineKeyboardButton(buy_label, callback_data='buy_stars_500')])
    keyboard.append([InlineKeyboardButton(t(lang, 'btn_back'), callback_data='stars_menu')])
    keyboard.append([InlineKeyboardButton("üîô –í –º–µ–Ω—é", callback_data='menu')])
    reply_markup = InlineKeyboardMarkup(keyboard)

    message = query.message
    if getattr(message, 'photo', None) or getattr(message, 'document', None) or getattr(message, 'video', None):
        try:
            await message.delete()
        except BadRequest:
            pass
        await context.bot.send_message(chat_id=user.id, text=text, reply_markup=reply_markup, parse_mode='HTML')
    else:
        try:
            await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='HTML')
        except BadRequest:
            await context.bot.send_message(chat_id=user.id, text=text, reply_markup=reply_markup, parse_mode='HTML')


async def show_vip_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–¥–º–µ–Ω—é V.I.P —Å –≤—ã–±–æ—Ä–æ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏."""
    query = update.callback_query
    await query.answer()

    user = query.from_user
    player = db.get_or_create_player(user.id, user.username or user.first_name)
    lang = player.language

    text = t(lang, 'vip_title')
    # –î–æ–±–∞–≤–∏–º –±–ª–æ–∫ –æ —Ç–µ–∫—É—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∞–≤—Ç–æ–ø–æ–∏—Å–∫–∞ VIP
    try:
        auto_state = t(lang, 'on') if getattr(player, 'auto_search_enabled', False) else t(lang, 'off')
        auto_count = int(getattr(player, 'auto_search_count', 0) or 0)
        auto_limit = db.get_auto_search_daily_limit(user.id)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é —Å —É—á—ë—Ç–æ–º –±—É—Å—Ç–æ–≤
        text += t(lang, 'vip_auto_header')
        text += "\n" + t(lang, 'vip_auto_state').format(state=auto_state)
        text += "\n" + t(lang, 'vip_auto_today').format(count=auto_count, limit=auto_limit)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±—É—Å—Ç–µ, –µ—Å–ª–∏ –æ–Ω –∞–∫—Ç–∏–≤–µ–Ω
        boost_info = db.get_boost_info(user.id)
        if boost_info['is_active']:
            rocket_emoji = "üöÄ"
            clock_emoji = "‚è∞"
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±—É—Å—Ç–µ
            boost_text_parts = [
                f"\n{rocket_emoji} <b>–ê–≤—Ç–æ–ø–æ–∏—Å–∫ –±—É—Å—Ç:</b>",
                f"üìä –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: +{boost_info['boost_count']} –ø–æ–∏—Å–∫–æ–≤",
                f"{clock_emoji} –û—Å—Ç–∞–ª–æ—Å—å: {boost_info['time_remaining_formatted']}",
                f"üìÖ –ò—Å—Ç–µ–∫–∞–µ—Ç: {boost_info['boost_until_formatted']}"
            ]
            
            boost_display = "\n".join(boost_text_parts)
            text += boost_display
        elif boost_info['has_boost']:
            # –ë—É—Å—Ç –µ—Å—Ç—å, –Ω–æ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω (–∏—Å—Ç—ë–∫)
            text += f"\n‚è± <i>–ë—É—Å—Ç –∞–≤—Ç–æ–ø–æ–∏—Å–∫–∞ –∏—Å—Ç—ë–∫</i>"
            
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∏—Å—Ç–æ—Ä–∏—é –±—É—Å—Ç–æ–≤ (–µ—Å–ª–∏ –µ—Å—Ç—å –∏—Å—Ç–æ—Ä–∏—è)
        try:
            history = db.get_user_boost_history(user.id, limit=1)
            if history:
                text += f"\n\nüìã –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏ –±—É—Å—Ç–æ–≤ –Ω–∞–ø–∏—à–∏—Ç–µ /myboosts"
        except Exception:
            pass
    except Exception:
        pass
    
    # Ensure text is properly encoded to avoid Unicode issues
    try:
        text = text.encode('utf-8', errors='replace').decode('utf-8')
    except Exception:
        pass
    keyboard = [
        [InlineKeyboardButton(t(lang, 'vip_1d'), callback_data='vip_1d')],
        [InlineKeyboardButton(t(lang, 'vip_7d'), callback_data='vip_7d')],
        [InlineKeyboardButton(t(lang, 'vip_30d'), callback_data='vip_30d')],
        [InlineKeyboardButton(t(lang, 'btn_back'), callback_data='extra_bonuses')],
        [InlineKeyboardButton("üîô –í –º–µ–Ω—é", callback_data='menu')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    message = query.message
    if getattr(message, 'photo', None) or getattr(message, 'document', None) or getattr(message, 'video', None):
        try:
            await message.delete()
        except BadRequest:
            pass
        await context.bot.send_message(chat_id=user.id, text=text, reply_markup=reply_markup, parse_mode='HTML')
    else:
        try:
            await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='HTML')
        except BadRequest:
            await context.bot.send_message(chat_id=user.id, text=text, reply_markup=reply_markup, parse_mode='HTML')


async def show_vip_1d(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    user = query.from_user
    player = db.get_or_create_player(user.id, user.username or user.first_name)
    lang = player.language

    cost = VIP_COSTS['1d']
    vip_until = db.get_vip_until(user.id)
    until_str = time.strftime('%d.%m.%Y %H:%M', time.localtime(vip_until)) if vip_until else None
    text = t(lang, 'vip_details_1d')
    text += f"\n{t(lang, 'vip_price').format(cost=cost)}"
    if until_str:
        text += f"\n{t(lang, 'vip_until').format(dt=until_str)}"
    current_coins = int(player.coins or 0)
    if current_coins < cost:
        text += f"\n{t(lang, 'vip_insufficient').format(coins=current_coins, cost=cost)}"
    keyboard = [
        [InlineKeyboardButton(f"{t(lang, 'vip_buy')} ‚Äî {cost}", callback_data='buy_vip_1d')],
        [InlineKeyboardButton(t(lang, 'btn_back'), callback_data='vip_menu')],
        [InlineKeyboardButton("üîô –í –º–µ–Ω—é", callback_data='menu')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    message = query.message
    if getattr(message, 'photo', None) or getattr(message, 'document', None) or getattr(message, 'video', None):
        try:
            await message.delete()
        except BadRequest:
            pass
        await context.bot.send_message(chat_id=user.id, text=text, reply_markup=reply_markup, parse_mode='HTML')
    else:
        try:
            await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='HTML')
        except BadRequest:
            await context.bot.send_message(chat_id=user.id, text=text, reply_markup=reply_markup, parse_mode='HTML')


async def show_vip_7d(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    user = query.from_user
    player = db.get_or_create_player(user.id, user.username or user.first_name)
    lang = player.language

    cost = VIP_COSTS['7d']
    vip_until = db.get_vip_until(user.id)
    until_str = time.strftime('%d.%m.%Y %H:%M', time.localtime(vip_until)) if vip_until else None
    text = t(lang, 'vip_details_7d')
    text += f"\n{t(lang, 'vip_price').format(cost=cost)}"
    if until_str:
        text += f"\n{t(lang, 'vip_until').format(dt=until_str)}"
    current_coins = int(player.coins or 0)
    if current_coins < cost:
        text += f"\n{t(lang, 'vip_insufficient').format(coins=current_coins, cost=cost)}"
    keyboard = [
        [InlineKeyboardButton(f"{t(lang, 'vip_buy')} ‚Äî {cost}", callback_data='buy_vip_7d')],
        [InlineKeyboardButton(t(lang, 'btn_back'), callback_data='vip_menu')],
        [InlineKeyboardButton("üîô –í –º–µ–Ω—é", callback_data='menu')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    message = query.message
    if getattr(message, 'photo', None) or getattr(message, 'document', None) or getattr(message, 'video', None):
        try:
            await message.delete()
        except BadRequest:
            pass
        await context.bot.send_message(chat_id=user.id, text=text, reply_markup=reply_markup, parse_mode='HTML')
    else:
        try:
            await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='HTML')
        except BadRequest:
            await context.bot.send_message(chat_id=user.id, text=text, reply_markup=reply_markup, parse_mode='HTML')


async def show_vip_30d(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    user = query.from_user
    player = db.get_or_create_player(user.id, user.username or user.first_name)
    lang = player.language

    cost = VIP_COSTS['30d']
    vip_until = db.get_vip_until(user.id)
    until_str = time.strftime('%d.%m.%Y %H:%M', time.localtime(vip_until)) if vip_until else None
    text = t(lang, 'vip_details_30d')
    text += f"\n{t(lang, 'vip_price').format(cost=cost)}"
    if until_str:
        text += f"\n{t(lang, 'vip_until').format(dt=until_str)}"
    current_coins = int(player.coins or 0)
    if current_coins < cost:
        text += f"\n{t(lang, 'vip_insufficient').format(coins=current_coins, cost=cost)}"
    keyboard = [
        [InlineKeyboardButton(f"{t(lang, 'vip_buy')} ‚Äî {cost}", callback_data='buy_vip_30d')],
        [InlineKeyboardButton(t(lang, 'btn_back'), callback_data='vip_menu')],
        [InlineKeyboardButton("üîô –í –º–µ–Ω—é", callback_data='menu')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    message = query.message
    if getattr(message, 'photo', None) or getattr(message, 'document', None) or getattr(message, 'video', None):
        try:
            await message.delete()
        except BadRequest:
            pass
        await context.bot.send_message(chat_id=user.id, text=text, reply_markup=reply_markup, parse_mode='HTML')
    else:
        try:
            await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='HTML')
        except BadRequest:
            await context.bot.send_message(chat_id=user.id, text=text, reply_markup=reply_markup, parse_mode='HTML')


async def show_bonus_tg_premium(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–≠–∫—Ä–∞–Ω TG Premium (3 –º–µ—Å): —Ü–µ–Ω–∞, —Å–∫–ª–∞–¥, —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∏ –∫–Ω–æ–ø–∫–∞ –ø–æ–∫—É–ø–∫–∏."""
    query = update.callback_query
    await query.answer()

    user = query.from_user
    player = db.get_or_create_player(user.id, user.username or user.first_name)
    lang = player.language

    # –î–∞–Ω–Ω—ã–µ –¥–ª—è —ç–∫—Ä–∞–Ω–∞
    stock = db.get_tg_premium_stock()
    current_coins = int(player.coins or 0)
    tg_until = db.get_tg_premium_until(user.id)
    until_str = time.strftime('%d.%m.%Y %H:%M', time.localtime(tg_until)) if tg_until else None

    # –¢–µ–∫—Å—Ç
    parts = [t(lang, 'tg_title')]
    parts.append(t(lang, 'tg_price').format(cost=TG_PREMIUM_COST))
    parts.append(t(lang, 'tg_stock').format(stock=stock))
    if until_str:
        parts.append(t(lang, 'tg_until').format(dt=until_str))
    if current_coins < TG_PREMIUM_COST:
        parts.append(t(lang, 'tg_insufficient').format(coins=current_coins, cost=TG_PREMIUM_COST))
    text = "\n".join(parts)

    keyboard = []
    if stock > 0:
        keyboard.append([InlineKeyboardButton(f"{t(lang, 'tg_buy')} ‚Äî {TG_PREMIUM_COST}", callback_data='buy_tg_premium')])
    keyboard.append([InlineKeyboardButton(t(lang, 'btn_back'), callback_data='extra_bonuses')])
    keyboard.append([InlineKeyboardButton("üîô –í –º–µ–Ω—é", callback_data='menu')])
    reply_markup = InlineKeyboardMarkup(keyboard)

    message = query.message
    if getattr(message, 'photo', None) or getattr(message, 'document', None) or getattr(message, 'video', None):
        try:
            await message.delete()
        except BadRequest:
            pass
        await context.bot.send_message(chat_id=user.id, text=text, reply_markup=reply_markup, parse_mode='HTML')
    else:
        try:
            await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='HTML')
        except BadRequest:
            await context.bot.send_message(chat_id=user.id, text=text, reply_markup=reply_markup, parse_mode='HTML')


async def buy_stars_500(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫—É–ø–∫–∞ –ø–∞–∫–µ—Ç–∞ 500 –∑–≤—ë–∑–¥ –∑–∞ –≤–Ω—É—Ç—Ä–∏–∏–≥—Ä–æ–≤—É—é –≤–∞–ª—é—Ç—É —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –¥–∞–±–ª–∫–ª–∏–∫–æ–≤."""
    query = update.callback_query
    await query.answer()

    user = query.from_user
    player = db.get_or_create_player(user.id, user.username or user.first_name)
    lang = player.language

    # –ó–∞—â–∏—Ç–∞ –æ—Ç –¥–∞–±–ª–∫–ª–∏–∫–æ–≤
    lock = _get_lock(f"user:{user.id}:buy_stars_500")
    if lock.locked():
        await query.answer("–û–±—Ä–∞–±–æ—Ç–∫–∞‚Ä¶" if lang != 'en' else 'Processing‚Ä¶', show_alert=False)
        return

    async with lock:
        res = db.purchase_bonus_with_stock(user.id, kind='stars_500', cost_coins=TG_PREMIUM_COST, duration_seconds=0, extra='500')
        if not res.get('ok'):
            reason = res.get('reason')
            if reason == 'not_enough_coins':
                await query.answer('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç' if lang != 'en' else 'Not enough coins', show_alert=True)
            elif reason == 'out_of_stock':
                await query.answer('–ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏' if lang != 'en' else 'Out of stock', show_alert=True)
            else:
                await query.answer('–û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.' if lang != 'en' else 'Error. Please try later.', show_alert=True)
            return

        coins_left = res.get('coins_left')
        receipt_id = int(res.get('receipt_id') or 0)

        if lang == 'en':
            text = f"500 Stars purchased! Coins left: {coins_left}"
        else:
            text = f"–ü–∞–∫–µ—Ç 500 –∑–≤—ë–∑–¥ –∫—É–ø–ª–µ–Ω! –û—Å—Ç–∞—Ç–æ–∫ –º–æ–Ω–µ—Ç: {coins_left}"
        if receipt_id:
            if lang == 'en':
                text += f"\nReceipt ID: {receipt_id}"
            else:
                text += f"\nID —á–µ–∫–∞: {receipt_id}"

        keyboard = []
        if receipt_id:
            keyboard.append([InlineKeyboardButton(t(lang, 'tg_view_receipt'), callback_data=f'view_receipt_{receipt_id}')])
        keyboard.append([InlineKeyboardButton(t(lang, 'tg_my_receipts'), callback_data='my_receipts')])
        keyboard.append([InlineKeyboardButton(t(lang, 'btn_back'), callback_data='stars_menu')])
        keyboard.append([InlineKeyboardButton("üîô –í –º–µ–Ω—é", callback_data='menu')])
        reply_markup = InlineKeyboardMarkup(keyboard)

        message = query.message
        if getattr(message, 'photo', None) or getattr(message, 'document', None) or getattr(message, 'video', None):
            try:
                await message.delete()
            except BadRequest:
                pass
            await context.bot.send_message(chat_id=user.id, text=text, reply_markup=reply_markup, parse_mode='HTML')
        else:
            try:
                await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='HTML')
            except BadRequest:
                await context.bot.send_message(chat_id=user.id, text=text, reply_markup=reply_markup, parse_mode='HTML')


async def buy_tg_premium(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫—É–ø–∫–∞ TG Premium (3 –º–µ—Å) –∑–∞ –≤–Ω—É—Ç—Ä–∏–∏–≥—Ä–æ–≤—É—é –≤–∞–ª—é—Ç—É —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –¥–∞–±–ª–∫–ª–∏–∫–æ–≤."""
    query = update.callback_query
    await query.answer()

    user = query.from_user
    player = db.get_or_create_player(user.id, user.username or user.first_name)
    lang = player.language

    # –ó–∞—â–∏—Ç–∞ –æ—Ç –¥–∞–±–ª–∫–ª–∏–∫–æ–≤
    lock = _get_lock(f"user:{user.id}:buy_tg_premium")
    if lock.locked():
        await query.answer("–û–±—Ä–∞–±–æ—Ç–∫–∞‚Ä¶", show_alert=False)
        return

    async with lock:
        res = db.purchase_tg_premium(user.id, TG_PREMIUM_COST, TG_PREMIUM_DURATION_SEC)
        if not res.get('ok'):
            reason = res.get('reason')
            if reason == 'not_enough_coins':
                await query.answer(t(lang, 'tg_not_enough'), show_alert=True)
            elif reason == 'out_of_stock':
                await query.answer(t(lang, 'tg_out_of_stock'), show_alert=True)
            else:
                await query.answer('–û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', show_alert=True)
            return

        tg_until_ts = res.get('tg_premium_until') or db.get_tg_premium_until(user.id)
        coins_left = res.get('coins_left')
        until_str = time.strftime('%d.%m.%Y %H:%M', time.localtime(int(tg_until_ts))) if tg_until_ts else '‚Äî'

        receipt_id = int(res.get('receipt_id') or 0)
        text = t(lang, 'tg_bought').format(dt=until_str, coins=coins_left)
        if receipt_id:
            if lang == 'en':
                text += f"\nReceipt ID: {receipt_id}"
            else:
                text += f"\nID —á–µ–∫–∞: {receipt_id}"
        keyboard = []
        if receipt_id:
            keyboard.append([InlineKeyboardButton(t(lang, 'tg_view_receipt'), callback_data=f'view_receipt_{receipt_id}')])
        keyboard.append([InlineKeyboardButton(t(lang, 'tg_my_receipts'), callback_data='my_receipts')])
        keyboard.append([InlineKeyboardButton(t(lang, 'btn_back'), callback_data='extra_bonuses')])
        keyboard.append([InlineKeyboardButton("üîô –í –º–µ–Ω—é", callback_data='menu')])
        reply_markup = InlineKeyboardMarkup(keyboard)

        message = query.message
        if getattr(message, 'photo', None) or getattr(message, 'document', None) or getattr(message, 'video', None):
            try:
                await message.delete()
            except BadRequest:
                pass
            await context.bot.send_message(chat_id=user.id, text=text, reply_markup=reply_markup, parse_mode='HTML')
        else:
            try:
                await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='HTML')
            except BadRequest:
                await context.bot.send_message(chat_id=user.id, text=text, reply_markup=reply_markup, parse_mode='HTML')


async def show_bonus_steam_game(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –±–æ–Ω—É—Å–∞: –∏–≥—Ä–∞ –≤ Steam (500 –≥—Ä–Ω)."""
    query = update.callback_query
    await query.answer()

    user = query.from_user
    player = db.get_or_create_player(user.id, user.username or user.first_name)
    lang = player.language

    stock = db.get_bonus_stock('steam_game')
    text = t(lang, 'steam_game_details')
    text += f"\n{'Price' if lang == 'en' else '–¶–µ–Ω–∞'}: {TG_PREMIUM_COST}"
    text += f"\n{'In stock' if lang == 'en' else '–í –Ω–∞–ª–∏—á–∏–∏'}: {stock}"
    current_coins = int(player.coins or 0)
    if current_coins < TG_PREMIUM_COST:
        if lang == 'en':
            text += f"\nNot enough coins: {current_coins}/{TG_PREMIUM_COST}"
        else:
            text += f"\n–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç: {current_coins}/{TG_PREMIUM_COST}"

    keyboard = []
    if stock > 0:
        buy_label = ("Buy" if lang == 'en' else '–ö—É–ø–∏—Ç—å') + f" ‚Äî {TG_PREMIUM_COST}"
        keyboard.append([InlineKeyboardButton(buy_label, callback_data='buy_steam_game')])
    keyboard.append([InlineKeyboardButton(t(lang, 'btn_back'), callback_data='extra_bonuses')])
    keyboard.append([InlineKeyboardButton("üîô –í –º–µ–Ω—é", callback_data='menu')])
    reply_markup = InlineKeyboardMarkup(keyboard)

    message = query.message
    if getattr(message, 'photo', None) or getattr(message, 'document', None) or getattr(message, 'video', None):
        try:
            await message.delete()
        except BadRequest:
            pass
        await context.bot.send_message(chat_id=user.id, text=text, reply_markup=reply_markup, parse_mode='HTML')
    else:
        try:
            await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='HTML')
        except BadRequest:
            await context.bot.send_message(chat_id=user.id, text=text, reply_markup=reply_markup, parse_mode='HTML')


# --- –û—Å–Ω–æ–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ –∫–Ω–æ–ø–æ–∫ ---

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≥—Ä—É–ø–ø—É, –µ—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –≤ –≥—Ä—É–ø–ø–µ
    try:
        await register_group_if_needed(update)
    except Exception:
        pass
    db.get_or_create_player(user.id, user.username or user.first_name)
    await show_menu(update, context)


async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ inline-–∫–Ω–æ–ø–∫–∏."""
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≥—Ä—É–ø–ø—É, –µ—Å–ª–∏ –Ω–∞–∂–∞—Ç–∏–µ –±—ã–ª–æ –≤ –≥—Ä—É–ø–ø–µ
    try:
        await register_group_if_needed(update)
    except Exception:
        pass
    query = update.callback_query
    data = query.data
    
    # –ß—Ç–æ–±—ã –Ω–µ –ø–∞–¥–∞–ª–æ, –µ—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö
    if not data:
        await query.answer()
        return

    if data == 'menu':
        await show_menu(update, context)
    elif data == 'find_energy':
        await find_energy(update, context)
    elif data == 'claim_bonus':
        await claim_daily_bonus(update, context)
    elif data == 'inventory':
        await show_inventory(update, context)
    elif data.startswith('inventory_p'):
        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
        await show_inventory(update, context)
    elif data == 'stats':
        await show_stats(update, context)
    elif data == 'extra_bonuses':
        await show_extra_bonuses(update, context)
    elif data == 'market_menu':
        await show_market_menu(update, context)
    elif data == 'market_shop':
        await show_market_shop(update, context)
    elif data == 'market_stalls':
        await show_market_stalls(update, context)
    elif data == 'market_receiver':
        await show_market_receiver(update, context)
    elif data == 'market_plantation':
        await show_market_plantation(update, context)
    elif data == 'bonus_tg_premium':
        await show_bonus_tg_premium(update, context)
    elif data == 'buy_tg_premium':
        await buy_tg_premium(update, context)
    elif data == 'bonus_steam_game':
        await show_bonus_steam_game(update, context)
    elif data == 'buy_stars_500':
        await buy_stars_500(update, context)
    elif data == 'buy_steam_game':
        await buy_steam_game(update, context)
    elif data == 'vip_menu':
        await show_vip_menu(update, context)
    elif data == 'vip_1d':
        await show_vip_1d(update, context)
    elif data == 'vip_7d':
        await show_vip_7d(update, context)
    elif data == 'vip_30d':
        await show_vip_30d(update, context)
    elif data == 'buy_vip_1d':
        await buy_vip(update, context, '1d')
    elif data == 'buy_vip_7d':
        await buy_vip(update, context, '7d')
    elif data == 'buy_vip_30d':
        await buy_vip(update, context, '30d')
    elif data == 'stars_menu':
        await show_stars_menu(update, context)
    elif data == 'stars_500':
        await show_stars_500(update, context)
    elif data == 'noop':
        # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –Ω–∞ –∫—Ä–∞–π–Ω–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö)
        await query.answer()
    elif data == 'my_receipts':
        await my_receipts_handler(update, context)
    elif data.startswith('view_receipt_'):
        await view_receipt_handler(update, context)
    elif data.startswith('view_'):
        await view_inventory_item(update, context)
    elif data.startswith('approve_'):
        await approve_pending(update, context)
    elif data.startswith('reject_'):
        await reject_pending(update, context)
    elif data.startswith('delapprove_'):
        await approve_pending_deletion(update, context)
    elif data.startswith('delreject_'):
        await reject_pending_deletion(update, context)
    elif data.startswith('editapprove_'):
        await approve_pending_edit(update, context)
    elif data.startswith('editreject_'):
        await reject_pending_edit(update, context)
    elif data == 'settings':
        await show_settings(update, context)
    elif data == 'settings_lang':
        await settings_lang_menu(update, context)
    elif data == 'settings_reminder':
        await toggle_reminder(update, context)
    elif data == 'settings_auto':
        await toggle_auto_search(update, context)
    elif data == 'settings_reset':
        await reset_prompt(update, context)
    elif data == 'lang_ru':
        await set_language(update, context, 'ru')
    elif data == 'lang_en':
        await set_language(update, context, 'en')
    elif data == 'reset_yes':
        await reset_confirm(update, context, True)
    elif data == 'reset_no':
        await reset_confirm(update, context, False)
    elif data.startswith('selectgift2_'):
        # –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç: selectgift2_{token} -> payload –≤ GIFT_SELECT_TOKENS
        token = data.split('_', 1)[1]
        payload = GIFT_SELECT_TOKENS.pop(token, None)
        if not payload:
            await query.answer("–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω–æ", show_alert=True)
        else:
            await handle_select_gift(update, context, payload)
    elif data.startswith('giftresp_'):
        # giftresp_{id}_yes/no
        try:
            _prefix, gid, resp = data.split('_', 2)
            gift_id = int(gid)
            accepted = resp == 'yes'
            await handle_gift_response(update, context, gift_id, accepted)
        except Exception:
            await query.answer("–û—à–∏–±–∫–∞", show_alert=True)

async def group_register_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≥—Ä—É–ø–ø—É –ø—Ä–∏ –ª—é–±–æ–º –≥—Ä—É–ø–ø–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏/–∫–æ–º–∞–Ω–¥–µ."""
    try:
        await register_group_if_needed(update)
    except Exception:
        pass

async def editdrink_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """/editdrink <id> <field> <new_value> ‚Äî –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (–∞–¥–º–∏–Ω—ã —É—Ä.1+, —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–∫–µ)."""
    user = update.effective_user
    chat = update.effective_chat
    if not db.is_admin(user.id) and (user.username not in ADMIN_USERNAMES):
        await update.message.reply_text("–ù–µ—Ç –ø—Ä–∞–≤")
        return
    if chat.type != 'private':
        await update.message.reply_text("–≠—Ç–æ–π –∫–æ–º–∞–Ω–¥–æ–π –º–æ–∂–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –±–æ—Ç—É.")
        return
    args = context.args or []
    if len(args) < 3 or not args[0].isdigit():
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /editdrink <drink_id> <name|description> <new_value>")
        return
    drink_id = int(args[0])
    field = args[1].lower().strip()
    if field in ('–Ω–∞–∑–≤–∞–Ω–∏–µ', '–∏–º—è'):
        field = 'name'
    if field in ('–æ–ø–∏—Å–∞–Ω–∏–µ', 'desc'):  # –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
        field = 'description'
    if field not in ('name', 'description'):
        await update.message.reply_text("–ü–æ–ª–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å name –∏–ª–∏ description")
        return
    new_value = " ".join(args[2:]).strip()
    if not new_value:
        await update.message.reply_text("–ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
        return
    drink = db.get_drink_by_id(drink_id)
    if not drink:
        await update.message.reply_text("–ù–∞–ø–∏—Ç–æ–∫ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    pending = db.create_pending_edit(proposer_id=user.id, drink_id=drink_id, field=field, new_value=new_value)
    # –õ–æ–≥
    try:
        db.insert_moderation_log(user.id, 'create_edit_request', request_id=pending.id, target_id=drink_id, details=f"field={field}")
    except Exception:
        pass
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤
    admin_ids = db.get_admin_user_ids()
    if admin_ids:
        await asyncio.gather(*[send_edit_proposal_to_admin(context, pending.id, aid) for aid in admin_ids])
    await update.message.reply_text("–ó–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é.")

async def send_edit_proposal_to_admin(context: ContextTypes.DEFAULT_TYPE, request_id: int, admin_chat_id: int):
    pending = db.get_pending_edit_by_id(request_id)
    if not pending or pending.status != 'pending':
        return
    drink = db.get_drink_by_id(pending.drink_id)
    drink_name = drink.name if drink else f"ID {pending.drink_id}"
    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è HTML
    drink_name_html = html.escape(str(drink_name))
    field_html = html.escape(str(pending.field))
    new_value_html = html.escape(str(pending.new_value))
    caption = (
        f"<b>–ó–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ #{request_id}</b>\n"
        f"–ù–∞–ø–∏—Ç–æ–∫: {drink_name_html} (ID {pending.drink_id})\n"
        f"–ü–æ–ª–µ: {field_html}\n"
        f"–ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {new_value_html}"
    )
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚úÖ –ü—Ä–∏–º–µ–Ω–∏—Ç—å –ø—Ä–∞–≤–∫—É", callback_data=f"editapprove_{request_id}"),
         InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"editreject_{request_id}")]
    ])
    await context.bot.send_message(chat_id=admin_chat_id, text=caption, reply_markup=keyboard, parse_mode='HTML')

async def approve_pending_edit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    # –û–¥–æ–±—Ä–µ–Ω–∏—Ç—å –º–æ–≥—É—Ç —Ç–æ–ª—å–∫–æ —É—Ä.3 –∏–ª–∏ –°–æ–∑–¥–∞—Ç–µ–ª—å
    user = update.effective_user
    is_creator = (user.username in ADMIN_USERNAMES)
    if not is_creator:
        lvl = db.get_admin_level(user.id)
        if lvl != 3:
            await query.answer("–ù–µ—Ç –ø—Ä–∞–≤: —Ç—Ä–µ–±—É–µ—Ç—Å—è —É—Ä–æ–≤–µ–Ω—å 3 –∏–ª–∏ –°–æ–∑–¥–∞—Ç–µ–ª—å.", show_alert=True)
            return
    try:
        request_id = int(query.data.split('_')[1])
    except Exception:
        await query.answer("–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", show_alert=True)
        return
    pending = db.get_pending_edit_by_id(request_id)
    if not pending or pending.status != 'pending':
        await query.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–∞–≤–∫—É
    ok = db.update_energy_drink_field(pending.drink_id, pending.field, pending.new_value)
    if not ok:
        await query.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ (–≤–æ–∑–º–æ–∂–µ–Ω –∫–æ–Ω—Ñ–ª–∏–∫—Ç).", show_alert=True)
        return
    db.mark_pending_edit_approved(request_id, user.id)
    # –õ–æ–≥
    try:
        db.insert_moderation_log(user.id, 'approve_edit', request_id=request_id, target_id=pending.drink_id, details=f"field={pending.field}")
    except Exception:
        pass
    # –û—Ç–≤–µ—Ç –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    try:
        await query.edit_message_text("‚úÖ –ü—Ä–∞–≤–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞.")
    except BadRequest:
        pass
    try:
        await context.bot.send_message(chat_id=pending.proposer_id, text=f"–í–∞—à–∞ –∑–∞—è–≤–∫–∞ #{request_id} –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–¥–æ–±—Ä–µ–Ω–∞ –∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞.")
    except Exception:
        pass
    try:
        actor = update.effective_user
        admin_ids = [aid for aid in db.get_admin_user_ids() if aid != actor.id]
        if admin_ids:
            actor_name = f"@{actor.username}" if actor.username else actor.first_name
            drink = db.get_drink_by_id(pending.drink_id)
            drink_name = drink.name if drink else f"ID {pending.drink_id}"
            notif = f"‚úèÔ∏è –ü—Ä–∞–≤–∫–∞ –∑–∞—è–≤–∫–∏ #{request_id} –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ {actor_name}. –ù–∞–ø–∏—Ç–æ–∫: {drink_name}, –ø–æ–ª–µ: {pending.field}"
            await asyncio.gather(*[context.bot.send_message(chat_id=aid, text=notif) for aid in admin_ids], return_exceptions=True)
    except Exception:
        pass

async def reject_pending_edit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    # –û—Ç–∫–ª–æ–Ω—è—Ç—å –º–æ–≥—É—Ç —Ç–æ–ª—å–∫–æ —É—Ä.3 –∏–ª–∏ –°–æ–∑–¥–∞—Ç–µ–ª—å
    user = update.effective_user
    is_creator = (user.username in ADMIN_USERNAMES)
    if not is_creator:
        lvl = db.get_admin_level(user.id)
        if lvl != 3:
            await query.answer("–ù–µ—Ç –ø—Ä–∞–≤: —Ç—Ä–µ–±—É–µ—Ç—Å—è —É—Ä–æ–≤–µ–Ω—å 3 –∏–ª–∏ –°–æ–∑–¥–∞—Ç–µ–ª—å.", show_alert=True)
            return
    try:
        request_id = int(query.data.split('_')[1])
    except Exception:
        await query.answer("–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", show_alert=True)
        return
    pending = db.get_pending_edit_by_id(request_id)
    if not pending or pending.status != 'pending':
        await query.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–∏—á–∏–Ω—É —á–µ—Ä–µ–∑ ForceReply
    try:
        await query.edit_message_text("–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–∏—á–∏–Ω—É –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–∏–ª–∏ '-' –±–µ–∑ –ø—Ä–∏—á–∏–Ω—ã).")
    except BadRequest:
        pass
    prompt = await context.bot.send_message(
        chat_id=query.message.chat_id,
        text=f"–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏ #{request_id}:",
        reply_markup=ForceReply(selective=True)
    )
    REJECT_PROMPTS[(prompt.chat_id, prompt.message_id)] = {
        'kind': 'edit',
        'request_id': request_id,
        'origin_chat_id': query.message.chat_id,
        'origin_message_id': query.message.message_id,
        'reviewer_id': user.id,
        'origin_has_media': bool(getattr(query.message, 'photo', None)),
    }


async def incadd_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """/incadd ‚Äî –°–æ–∑–¥–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞—ë—Ç –æ–±—ã—á–Ω—É—é –∑–∞—è–≤–∫—É –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ (–¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏).
    –§–æ—Ä–º–∞—Ç: /incadd –ù–∞–∑–≤–∞–Ω–∏–µ | –û–ø–∏—Å–∞–Ω–∏–µ | [–¥–∞/–Ω–µ—Ç]
    –ú–æ–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ, —á—Ç–æ–±—ã –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.
    """
    user = update.effective_user
    # –¢–æ–ª—å–∫–æ –°–æ–∑–¥–∞—Ç–µ–ª—å
    if user.username not in ADMIN_USERNAMES:
        await update.message.reply_text("–ù–µ—Ç –ø—Ä–∞–≤: —Ç–æ–ª—å–∫–æ –°–æ–∑–¥–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
        return

    # –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤: "–ù–∞–∑–≤–∞–Ω–∏–µ | –û–ø–∏—Å–∞–Ω–∏–µ | [–¥–∞/–Ω–µ—Ç]"
    if not context.args:
        await update.message.reply_text(
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /incadd –ù–∞–∑–≤–∞–Ω–∏–µ | –û–ø–∏—Å–∞–Ω–∏–µ | [–¥–∞/–Ω–µ—Ç]\n"
            "–ü–æ–¥—Å–∫–∞–∑–∫–∞: –º–æ–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ, —á—Ç–æ–±—ã –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ."
        )
        return

    raw = " ".join(context.args).strip()
    parts = [p.strip() for p in raw.split("|")]
    if not parts or not parts[0]:
        await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ. –ü—Ä–∏–º–µ—Ä: /incadd Nitro Cola | –ú–æ—â–Ω—ã–π –∑–∞—Ä—è–¥ —ç–Ω–µ—Ä–≥–∏–∏ | –Ω–µ—Ç")
        return
    name = parts[0]
    description = parts[1] if len(parts) > 1 else ""
    special_raw = (parts[2] if len(parts) > 2 else "").lower()
    is_special = special_raw in {"–¥–∞", "yes", "y", "–¥"}

    # –§–æ—Ç–æ –∏–∑ reply (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
    file_id = None
    if update.message.reply_to_message and update.message.reply_to_message.photo:
        try:
            file_id = update.message.reply_to_message.photo[-1].file_id
        except Exception:
            file_id = None

    # –°–æ–∑–¥–∞—ë–º –æ–±—ã—á–Ω—É—é –∑–∞—è–≤–∫—É –æ—Ç –∏–º–µ–Ω–∏ —Å–æ–∑–¥–∞—Ç–µ–ª—è (–±–µ–∑ –ø–æ–º–µ—Ç–æ–∫)
    pending = db.create_pending_addition(
        proposer_id=user.id,
        name=name,
        description=description,
        is_special=is_special,
        file_id=file_id,
    )
    # –ê—É–¥–∏—Ç-–ª–æ–≥ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º
    try:
        db.insert_moderation_log(user.id, 'create_add_request', request_id=pending.id, details=f"name={name}")
    except Exception:
        pass

    # –†–∞—Å—Å—ã–ª–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –∫–∞–∫ –æ–±—ã—á–Ω–æ
    admin_ids = db.get_admin_user_ids()
    if admin_ids:
        await asyncio.gather(*[send_proposal_to_admin(context, pending.id, admin_id) for admin_id in admin_ids])
        await update.message.reply_text("–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –Ω–∞ –æ–¥–æ–±—Ä–µ–Ω–∏–µ.")
    else:
        await update.message.reply_text("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –≤–ª–∞–¥–µ–ª—å—Ü—É –±–æ—Ç–∞.")

async def delrequest_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """/delrequest <drink_id> [reason] ‚Äî —Å–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫–∞ (–∞–¥–º–∏–Ω—ã, –¢–û–õ–¨–ö–û –≤ –ª–∏—á–∫–µ)."""
    user = update.effective_user
    chat = update.effective_chat
    if not db.is_admin(user.id) and (user.username not in ADMIN_USERNAMES):
        await update.message.reply_text("–ù–µ—Ç –ø—Ä–∞–≤")
        return
    if chat.type != 'private':
        await update.message.reply_text("–≠—Ç–æ–π –∫–æ–º–∞–Ω–¥–æ–π –º–æ–∂–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –±–æ—Ç—É.")
        return
    if not context.args or not context.args[0].isdigit():
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /delrequest <drink_id> [–ø—Ä–∏—á–∏–Ω–∞]")
        return
    drink_id = int(context.args[0])
    reason = " ".join(context.args[1:]).strip() if len(context.args) > 1 else None
    drink = db.get_drink_by_id(drink_id)
    if not drink:
        await update.message.reply_text("–ù–∞–ø–∏—Ç–æ–∫ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    pending = db.create_pending_deletion(proposer_id=user.id, drink_id=drink_id, reason=reason)
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤ (–æ–¥–æ–±—Ä—è—Ç—å/–æ—Ç–∫–ª–æ–Ω—è—Ç—å —Å–º–æ–≥—É—Ç —Ç–æ–ª—å–∫–æ –≥–ª–∞–≤–Ω—ã–µ)
    admin_ids = db.get_admin_user_ids()
    if admin_ids:
        await asyncio.gather(*[send_deletion_proposal_to_admin(context, pending.id, aid) for aid in admin_ids])
    await update.message.reply_text(f"–ó–∞—è–≤–∫–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ '{drink.name}' (ID {drink.id}) –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é.")

async def inceditdrink_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """/inceditdrink <id> <field> <new_value> ‚Äî —Å–æ–∑–¥–∞—Ç—å –æ–±—ã—á–Ω—É—é –∑–∞—è–≤–∫—É –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (—Ç–æ–ª—å–∫–æ –°–æ–∑–¥–∞—Ç–µ–ª—å)."""
    user = update.effective_user
    if user.username not in ADMIN_USERNAMES:
        await update.message.reply_text("–ù–µ—Ç –ø—Ä–∞–≤: —Ç–æ–ª—å–∫–æ –°–æ–∑–¥–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
        return
    args = context.args or []
    if len(args) < 3 or not args[0].isdigit():
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /inceditdrink <drink_id> <name|description> <new_value>")
        return
    drink_id = int(args[0])
    field = args[1].lower().strip()
    if field in ('–Ω–∞–∑–≤–∞–Ω–∏–µ', '–∏–º—è'):
        field = 'name'
    if field in ('–æ–ø–∏—Å–∞–Ω–∏–µ', 'desc'):
        field = 'description'
    if field not in ('name', 'description'):
        await update.message.reply_text("–ü–æ–ª–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å name –∏–ª–∏ description")
        return
    new_value = " ".join(args[2:]).strip()
    if not new_value:
        await update.message.reply_text("–ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
        return
    drink = db.get_drink_by_id(drink_id)
    if not drink:
        await update.message.reply_text("–ù–∞–ø–∏—Ç–æ–∫ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    pending = db.create_pending_edit(proposer_id=user.id, drink_id=drink_id, field=field, new_value=new_value)
    try:
        db.insert_moderation_log(user.id, 'create_edit_request', request_id=pending.id, target_id=drink_id, details=f"field={field}")
    except Exception:
        pass
    admin_ids = db.get_admin_user_ids()
    if admin_ids:
        await asyncio.gather(*[send_edit_proposal_to_admin(context, pending.id, aid) for aid in admin_ids])
    await update.message.reply_text("–ó–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é.")

async def incdelrequest_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """/incdelrequest <drink_id> [reason] ‚Äî —Å–æ–∑–¥–∞—Ç—å –æ–±—ã—á–Ω—É—é –∑–∞—è–≤–∫—É –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ (—Ç–æ–ª—å–∫–æ –°–æ–∑–¥–∞—Ç–µ–ª—å)."""
    user = update.effective_user
    if user.username not in ADMIN_USERNAMES:
        await update.message.reply_text("–ù–µ—Ç –ø—Ä–∞–≤: —Ç–æ–ª—å–∫–æ –°–æ–∑–¥–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
        return
    if not context.args or not context.args[0].isdigit():
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /incdelrequest <drink_id> [–ø—Ä–∏—á–∏–Ω–∞]")
        return
    drink_id = int(context.args[0])
    reason = " ".join(context.args[1:]).strip() if len(context.args) > 1 else None
    drink = db.get_drink_by_id(drink_id)
    if not drink:
        await update.message.reply_text("–ù–∞–ø–∏—Ç–æ–∫ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    pending = db.create_pending_deletion(proposer_id=user.id, drink_id=drink_id, reason=reason)
    try:
        db.insert_moderation_log(user.id, 'create_delete_request', request_id=pending.id, target_id=drink_id)
    except Exception:
        pass
    admin_ids = db.get_admin_user_ids()
    if admin_ids:
        await asyncio.gather(*[send_deletion_proposal_to_admin(context, pending.id, aid) for aid in admin_ids])
    await update.message.reply_text(f"–ó–∞—è–≤–∫–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ '{drink.name}' (ID {drink.id}) –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é.")

async def send_deletion_proposal_to_admin(context: ContextTypes.DEFAULT_TYPE, request_id: int, admin_chat_id: int):
    pending = db.get_pending_deletion_by_id(request_id)
    if not pending or pending.status != 'pending':
        return
    drink = db.get_drink_by_id(pending.drink_id)
    drink_name = drink.name if drink else f"ID {pending.drink_id}"
    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º HTML
    drink_name_html = html.escape(str(drink_name))
    reason_html = html.escape(str(pending.reason)) if getattr(pending, 'reason', None) else '‚Äî'
    caption = (
        f"<b>–ó–∞—è–≤–∫–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ #{request_id}</b>\n"
        f"–ù–∞–ø–∏—Ç–æ–∫: {drink_name_html} (ID {pending.drink_id})\n"
        f"–ü—Ä–∏—á–∏–Ω–∞: {reason_html}"
    )
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ", callback_data=f"delapprove_{request_id}"),
         InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"delreject_{request_id}")]
    ])
    await context.bot.send_message(chat_id=admin_chat_id, text=caption, reply_markup=keyboard, parse_mode='HTML')

async def approve_pending_deletion(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    # –†–∞–∑—Ä–µ—à–µ–Ω–æ —É—Ä.3 –∏–ª–∏ –°–æ–∑–¥–∞—Ç–µ–ª—è–º
    user = update.effective_user
    is_creator = (user.username in ADMIN_USERNAMES)
    if not is_creator:
        lvl = db.get_admin_level(user.id)
        if lvl != 3:
            await query.answer("–ù–µ—Ç –ø—Ä–∞–≤: —Ç—Ä–µ–±—É–µ—Ç—Å—è —É—Ä–æ–≤–µ–Ω—å 3 –∏–ª–∏ –°–æ–∑–¥–∞—Ç–µ–ª—å.", show_alert=True)
            return
    try:
        request_id = int(query.data.split('_')[1])
    except Exception:
        await query.answer("–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", show_alert=True)
        return
    pending = db.get_pending_deletion_by_id(request_id)
    if not pending or pending.status != 'pending':
        await query.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    drink = db.get_drink_by_id(pending.drink_id)
    drink_name = drink.name if drink else f"ID {pending.drink_id}"
    # –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å
    deleted = db.delete_energy_drink(pending.drink_id)
    db.mark_pending_deletion_approved(request_id, update.effective_user.id)
    # –ê—É–¥–∏—Ç-–ª–æ–≥
    try:
        db.insert_moderation_log(user.id, 'approve_delete', request_id=request_id, target_id=pending.drink_id, details=f"deleted={deleted}")
    except Exception:
        pass
    try:
        await query.edit_message_text("‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ –æ–¥–æ–±—Ä–µ–Ω–æ." + (" –ù–∞–ø–∏—Ç–æ–∫ —É–¥–∞–ª—ë–Ω." if deleted else " –ù–∞–ø–∏—Ç–æ–∫ —É–∂–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç."))
    except BadRequest:
        pass
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞
    try:
        await context.bot.send_message(chat_id=pending.proposer_id, text=f"–í–∞—à–∞ –∑–∞—è–≤–∫–∞ #{request_id} –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ '{drink_name}' –æ–¥–æ–±—Ä–µ–Ω–∞. –ù–∞–ø–∏—Ç–æ–∫ —É–¥–∞–ª—ë–Ω.")
    except Exception:
        pass
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∞–¥–º–∏–Ω–æ–≤
    try:
        actor = update.effective_user
        admin_ids = [aid for aid in db.get_admin_user_ids() if aid != actor.id]
        if admin_ids:
            actor_name = f"@{actor.username}" if actor.username else actor.first_name
            notif = f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ #{request_id} –æ–¥–æ–±—Ä–µ–Ω–æ {actor_name}. –ù–∞–ø–∏—Ç–æ–∫: {drink_name}"
            await asyncio.gather(*[context.bot.send_message(chat_id=aid, text=notif) for aid in admin_ids], return_exceptions=True)
    except Exception:
        pass

async def reject_pending_deletion(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    # –†–∞–∑—Ä–µ—à–µ–Ω–æ —É—Ä.3 –∏–ª–∏ –°–æ–∑–¥–∞—Ç–µ–ª—è–º
    user = update.effective_user
    is_creator = (user.username in ADMIN_USERNAMES)
    if not is_creator:
        lvl = db.get_admin_level(user.id)
        if lvl != 3:
            await query.answer("–ù–µ—Ç –ø—Ä–∞–≤: —Ç—Ä–µ–±—É–µ—Ç—Å—è —É—Ä–æ–≤–µ–Ω—å 3 –∏–ª–∏ –°–æ–∑–¥–∞—Ç–µ–ª—å.", show_alert=True)
            return
    try:
        request_id = int(query.data.split('_')[1])
    except Exception:
        await query.answer("–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", show_alert=True)
        return
    pending = db.get_pending_deletion_by_id(request_id)
    if not pending or pending.status != 'pending':
        await query.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–∏—á–∏–Ω—É —á–µ—Ä–µ–∑ ForceReply
    try:
        await query.edit_message_text("–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–∏—á–∏–Ω—É –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–∏–ª–∏ '-' –±–µ–∑ –ø—Ä–∏—á–∏–Ω—ã).")
    except BadRequest:
        pass
    prompt = await context.bot.send_message(
        chat_id=query.message.chat_id,
        text=f"–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ #{request_id}:",
        reply_markup=ForceReply(selective=True)
    )
    REJECT_PROMPTS[(prompt.chat_id, prompt.message_id)] = {
        'kind': 'del',
        'request_id': request_id,
        'origin_chat_id': query.message.chat_id,
        'origin_message_id': query.message.message_id,
        'reviewer_id': user.id,
        'origin_has_media': bool(getattr(query.message, 'photo', None)),
    }

async def handle_reject_reason_reply(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç —Å –ø—Ä–∏—á–∏–Ω–æ–π –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è (reply –Ω–∞ ForceReply-—Å–æ–æ–±—â–µ–Ω–∏–µ)."""
    msg = update.message
    if not msg or not msg.reply_to_message:
        return
    key = (msg.chat_id, msg.reply_to_message.message_id)
    data = REJECT_PROMPTS.get(key)
    if not data:
        return
    # –†–∞–∑—Ä–µ—à–∞–µ–º –æ—Ç–≤–µ—á–∞—Ç—å —Ç–æ–ª—å–∫–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞–∂–∞–ª "–û—Ç–∫–ª–æ–Ω–∏—Ç—å"
    if msg.from_user and data.get('reviewer_id') and msg.from_user.id != data['reviewer_id']:
        try:
            await msg.reply_text("–û—Ç–≤–µ—Ç —Å –ø—Ä–∏—á–∏–Ω–æ–π –º–æ–∂–µ—Ç –¥–∞—Ç—å —Ç–æ–ª—å–∫–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä, –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–≤—à–∏–π –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ.")
        except Exception:
            pass
        return
    reason_raw = (msg.text or '').strip()
    reason = None if reason_raw in ('-', '‚Äî', '') else reason_raw
    kind = data['kind']
    request_id = data['request_id']
    reviewer_id = data['reviewer_id']
    origin_chat_id = data['origin_chat_id']
    origin_message_id = data['origin_message_id']

    try:
        if kind == 'edit':
            pending = db.get_pending_edit_by_id(request_id)
            if not pending or pending.status != 'pending':
                await msg.reply_text("–ó–∞—è–≤–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                return
            db.mark_pending_edit_rejected(request_id, reviewer_id, reason)
            try:
                db.insert_moderation_log(reviewer_id, 'reject_edit', request_id=request_id, target_id=pending.drink_id, details=f"field={pending.field}; reason={reason or '-'}")
            except Exception:
                pass
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            try:
                await context.bot.send_message(chat_id=pending.proposer_id, text=f"–í–∞—à–∞ –∑–∞—è–≤–∫–∞ #{request_id} –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.\n–ü—Ä–∏—á–∏–Ω–∞: {reason or '‚Äî'}")
            except Exception:
                pass
            try:
                actor = update.effective_user
                admin_ids = [aid for aid in db.get_admin_user_ids() if aid != actor.id]
                if admin_ids:
                    actor_name = f"@{actor.username}" if actor.username else actor.first_name
                    drink = db.get_drink_by_id(pending.drink_id)
                    drink_name = drink.name if drink else f"ID {pending.drink_id}"
                    notif = f"üö´ –ü—Ä–∞–≤–∫–∞ –∑–∞—è–≤–∫–∏ #{request_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ {actor_name}. –ù–∞–ø–∏—Ç–æ–∫: {drink_name}, –ø–æ–ª–µ: {pending.field}\n–ü—Ä–∏—á–∏–Ω–∞: {reason or '‚Äî'}"
                    await asyncio.gather(*[context.bot.send_message(chat_id=aid, text=notif) for aid in admin_ids], return_exceptions=True)
            except Exception:
                pass
        elif kind == 'add':
            proposal = db.get_pending_by_id(request_id)
            if not proposal or proposal.status != 'pending':
                await msg.reply_text("–ó–∞—è–≤–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                return
            db.mark_pending_as_rejected(request_id, reviewer_id, reason)
            try:
                db.insert_moderation_log(reviewer_id, 'reject_add', request_id=request_id, details=f"name={proposal.name}; reason={reason or '-'}")
            except Exception:
                pass
            try:
                await context.bot.send_message(chat_id=proposal.proposer_id, text=f"–í–∞—à–∞ –∑–∞—è–≤–∫–∞ #{request_id} –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.\n–ü—Ä–∏—á–∏–Ω–∞: {reason or '‚Äî'}")
            except Exception:
                pass
            try:
                actor = update.effective_user
                admin_ids = [aid for aid in db.get_admin_user_ids() if aid != actor.id]
                if admin_ids:
                    actor_name = f"@{actor.username}" if actor.username else actor.first_name
                    notif = f"üö´ –ó–∞—è–≤–∫–∞ –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ #{request_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ {actor_name}. –ù–∞–∑–≤–∞–Ω–∏–µ: {proposal.name}\n–ü—Ä–∏—á–∏–Ω–∞: {reason or '‚Äî'}"
                    await asyncio.gather(*[context.bot.send_message(chat_id=aid, text=notif) for aid in admin_ids], return_exceptions=True)
            except Exception:
                pass
        elif kind == 'del':
            pending = db.get_pending_deletion_by_id(request_id)
            if not pending or pending.status != 'pending':
                await msg.reply_text("–ó–∞—è–≤–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                return
            db.mark_pending_deletion_rejected(request_id, reviewer_id, reason)
            try:
                db.insert_moderation_log(reviewer_id, 'reject_delete', request_id=request_id, target_id=pending.drink_id, details=(reason or None))
            except Exception:
                pass
            drink = db.get_drink_by_id(pending.drink_id)
            drink_name = drink.name if drink else f"ID {pending.drink_id}"
            try:
                await context.bot.send_message(chat_id=pending.proposer_id, text=f"–í–∞—à–∞ –∑–∞—è–≤–∫–∞ #{request_id} –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ '{drink_name}' –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.\n–ü—Ä–∏—á–∏–Ω–∞: {reason or '‚Äî'}")
            except Exception:
                pass
            try:
                actor = update.effective_user
                admin_ids = [aid for aid in db.get_admin_user_ids() if aid != actor.id]
                if admin_ids:
                    actor_name = f"@{actor.username}" if actor.username else actor.first_name
                    notif = f"üö´ –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ #{request_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ {actor_name}. –ù–∞–ø–∏—Ç–æ–∫: {drink_name}\n–ü—Ä–∏—á–∏–Ω–∞: {reason or '‚Äî'}"
                    await asyncio.gather(*[context.bot.send_message(chat_id=aid, text=notif) for aid in admin_ids], return_exceptions=True)
            except Exception:
                pass
        # –ü—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞—è–≤–∫–æ–π
        origin_has_media = data.get('origin_has_media', False)
        try:
            if origin_has_media:
                await context.bot.edit_message_caption(
                    chat_id=origin_chat_id,
                    message_id=origin_message_id,
                    caption=f"‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ. –ü—Ä–∏—á–∏–Ω–∞: {reason or '‚Äî'}"
                )
            else:
                await context.bot.edit_message_text(
                    chat_id=origin_chat_id,
                    message_id=origin_message_id,
                    text=f"‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ. –ü—Ä–∏—á–∏–Ω–∞: {reason or '‚Äî'}"
                )
        except BadRequest:
            pass
        await msg.reply_text("–ì–æ—Ç–æ–≤–æ: –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ.")
        # –£–¥–∞–ª—è–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ –ø—Ä–∏—á–∏–Ω—ã —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        REJECT_PROMPTS.pop(key, None)
    except Exception as e:
        try:
            await msg.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è: {e}")
        except Exception:
            pass

async def register_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """/register ‚Äî –≤—Ä—É—á–Ω—É—é –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –≥—Ä—É–ø–ø—É –¥–ª—è —Ä–∞—Å—Å—ã–ª–æ–∫ (—Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö)."""
    chat = update.effective_chat
    if chat.type not in ("group", "supergroup"):
        await update.message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö.")
        return
    created = db.upsert_group_chat(chat.id, chat.title)
    if created:
        await update.message.reply_text("–ì—Ä—É–ø–ø–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.")
    else:
        await update.message.reply_text("–ì—Ä—É–ø–ø–∞ —É–∂–µ –±—ã–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞.")

async def register_group_if_needed(update: Update):
    chat = update.effective_chat
    if chat and chat.type in ("group", "supergroup"):
        try:
            db.upsert_group_chat(chat_id=chat.id, title=chat.title)
        except Exception:
            pass


# --- –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞: –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥ –≤ –≥—Ä—É–ø–ø–∞—Ö ---
async def debug_log_commands(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        msg = update.effective_message
        user = update.effective_user
        chat = update.effective_chat
        logger.info(
            "[CMD] chat_id=%s type=%s user_id=%s username=%s text=%s",
            getattr(chat, 'id', None),
            getattr(chat, 'type', None),
            getattr(user, 'id', None),
            getattr(user, 'username', None),
            getattr(msg, 'text', None),
        )
    except Exception:
        pass


# -------- –ö–æ–º–∞–Ω–¥–∞ /add ---------

async def add_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫–∞."""
    user = update.effective_user
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º bootstrap-–∞–¥–º–∏–Ω–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –æ–±—Ä–∞—â–µ–Ω–∏–∏
    if user.username in ADMIN_USERNAMES:
        try:
            db.add_admin_user(user.id, user.username)
        except Exception:
            pass
    # –ö—É–ª–¥–∞—É–Ω 6 —á–∞—Å–æ–≤ –¥–ª—è –Ω–µ-–∞–¥–º–∏–Ω–æ–≤
    is_admin = db.is_admin(user.id) or (user.username in ADMIN_USERNAMES)
    if not is_admin:
        try:
            player = db.get_or_create_player(user.id, user.username or "")
            now = int(time.time())
            cooldown = 6 * 60 * 60  # 6 —á–∞—Å–æ–≤
            last_add = getattr(player, 'last_add', 0) or 0
            if last_add and (now - last_add) < cooldown:
                remain = cooldown - (now - last_add)
                hrs = remain // 3600
                mins = (remain % 3600) // 60
                text = "–í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –∑–∞—è–≤–∫—É –Ω–µ–¥–∞–≤–Ω–æ. –ü–æ–≤—Ç–æ—Ä–Ω–æ –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ "
                if hrs > 0:
                    text += f"{hrs} —á "
                text += f"{mins} –º–∏–Ω."
                await update.message.reply_text(text)
                return ConversationHandler.END
        except Exception:
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫—É–ª–¥–∞—É–Ω–∞ –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            pass
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫–∞:")
    context.user_data.clear()
    return ADD_NAME

async def add_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['name'] = update.message.text.strip()
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ:")
    return ADD_DESCRIPTION

async def add_description(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['description'] = update.message.text.strip()
    await update.message.reply_text("–Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º? (–¥–∞/–Ω–µ—Ç):")
    return ADD_SPECIAL

async def add_special(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.lower().strip()
    context.user_data['is_special'] = text in ('–¥–∞', 'yes', 'y', '–¥')
    await update.message.reply_text("–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫–∞ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip, —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å:")
    return ADD_PHOTO

async def add_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ
    if update.message.photo:
        photo_file = update.message.photo[-1]
        context.user_data['file_id'] = photo_file.file_id
    else:
        context.user_data['file_id'] = None
    return await finalize_addition(update, context)

async def skip_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['file_id'] = None
    return await finalize_addition(update, context)

async def finalize_addition(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–§–∏–Ω–∞–ª—å–Ω—ã–π —ç—Ç–∞–ø: –¥–æ–±–∞–≤–ª—è–µ–º —Å—Ä–∞–∑—É –∏–ª–∏ —Å–æ–∑–¥–∞—ë–º –∑–∞—è–≤–∫—É."""
    global NEXT_PENDING_ID
    user = update.effective_user
    data = context.user_data

    if db.is_admin(user.id) or (user.username in ADMIN_USERNAMES):
        # –ê–¥–º–∏–Ω ‚Äì –¥–æ–±–∞–≤–ª—è–µ–º —Å—Ä–∞–∑—É
        image_path = None
        if data.get('file_id'):
            # —Å–∫–∞—á–∏–≤–∞–µ–º
            file = await context.bot.get_file(data['file_id'])
            os.makedirs(ENERGY_IMAGES_DIR, exist_ok=True)
            image_path = f"{int(time.time())}_{random.randint(1000,9999)}.jpg"
            await file.download_to_drive(os.path.join(ENERGY_IMAGES_DIR, image_path))
        db.add_energy_drink(
            name=data['name'],
            description=data['description'],
            image_path=image_path,
            is_special=data['is_special']
        )
        await update.message.reply_text("–≠–Ω–µ—Ä–≥–µ—Ç–∏–∫ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
    else:
        # –û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Äì —Å–æ–∑–¥–∞—ë–º –∑–∞—è–≤–∫—É
        pending = db.create_pending_addition(
            proposer_id=user.id,
            name=data['name'],
            description=data['description'],
            is_special=data['is_special'],
            file_id=data.get('file_id')
        )
        # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–∫—É –∫—É–ª–¥–∞—É–Ω–∞ –¥–ª—è –Ω–µ-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        try:
            if not (db.is_admin(user.id) or (user.username in ADMIN_USERNAMES)):
                db.update_player(user.id, last_add=int(time.time()))
        except Exception:
            pass
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
        admin_ids = db.get_admin_user_ids()
        if admin_ids:
            await asyncio.gather(*[send_proposal_to_admin(context, pending.id, admin_id) for admin_id in admin_ids])
            await update.message.reply_text("–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –Ω–∞ –æ–¥–æ–±—Ä–µ–Ω–∏–µ.")
        else:
            await update.message.reply_text("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –≤–ª–∞–¥–µ–ª—å—Ü—É –±–æ—Ç–∞.")
    return ConversationHandler.END

async def send_proposal_to_admin(context: ContextTypes.DEFAULT_TYPE, request_id: int, admin_chat_id: int):
    proposal = db.get_pending_by_id(request_id)
    if not proposal or proposal.status != 'pending':
        return
    caption = (
        f"<b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ #{request_id}</b>\n"
        f"–ù–∞–∑–≤–∞–Ω–∏–µ: {proposal.name}\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ: {proposal.description}\n"
        f"–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π: {'–î–∞' if proposal.is_special else '–ù–µ—Ç'}"
    )
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_{request_id}"),
         InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{request_id}")]
    ])
    if proposal.file_id:
        await context.bot.send_photo(
            chat_id=admin_chat_id,
            photo=proposal.file_id,
            caption=caption,
            reply_markup=keyboard,
            parse_mode='HTML'
        )
    else:
        await context.bot.send_message(
            chat_id=admin_chat_id,
            text=caption,
            reply_markup=keyboard,
            parse_mode='HTML'
        )

async def approve_pending(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    if not db.is_admin(update.effective_user.id) and (update.effective_user.username not in ADMIN_USERNAMES):
        await query.answer("–ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
        return
    request_id = int(query.data.split('_')[1])
    proposal = db.get_pending_by_id(request_id)
    if not proposal or proposal.status != 'pending':
        await query.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return

    # –ó–∞–ø—Ä–µ—Ç —Å–∞–º–æ–ø—Ä–∏–Ω—è—Ç–∏—è: –Ω–µ–ª—å–∑—è –æ–¥–æ–±—Ä—è—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é –∑–∞—è–≤–∫—É
    actor = update.effective_user
    if proposal.proposer_id == actor.id:
        await query.answer("–ù–µ–ª—å–∑—è –æ–¥–æ–±—Ä—è—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é –∑–∞—è–≤–∫—É", show_alert=True)
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫
    image_path = None
    if proposal.file_id:
        file = await context.bot.get_file(proposal.file_id)
        os.makedirs(ENERGY_IMAGES_DIR, exist_ok=True)
        image_path = f"{int(time.time())}_{random.randint(1000,9999)}.jpg"
        await file.download_to_drive(os.path.join(ENERGY_IMAGES_DIR, image_path))
    db.add_energy_drink(
        name=proposal.name,
        description=proposal.description,
        image_path=image_path,
        is_special=proposal.is_special
    )
    db.mark_pending_as_approved(request_id, update.effective_user.id)
    # –ê—É–¥–∏—Ç-–ª–æ–≥
    try:
        db.insert_moderation_log(actor.id, 'approve_add', request_id=request_id, details=f"name={proposal.name}")
    except Exception:
        pass
    # –£–≤–µ–¥–æ–º–ª—è–µ–º ‚Äî —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ —Ç–∏–ø—É
    has_media = bool(getattr(query.message, 'photo', None))
    try:
        if has_media:
            await query.edit_message_caption(caption="‚úÖ –û–¥–æ–±—Ä–µ–Ω–æ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –±–∞–∑—É.")
        else:
            await query.edit_message_text("‚úÖ –û–¥–æ–±—Ä–µ–Ω–æ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –±–∞–∑—É.")
    except BadRequest:
        pass
    await context.bot.send_message(chat_id=proposal.proposer_id, text="–í–∞—à —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫ –æ–¥–æ–±—Ä–µ–Ω –∏ –¥–æ–±–∞–≤–ª–µ–Ω! üéâ")
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ —Ä–µ—à–µ–Ω–∏–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
    try:
        actor = update.effective_user
        admin_ids = [aid for aid in db.get_admin_user_ids() if aid != actor.id]
        if admin_ids:
            actor_name = f"@{actor.username}" if actor.username else actor.first_name
            notif = f"‚úÖ –ó–∞—è–≤–∫–∞ #{request_id} –æ–¥–æ–±—Ä–µ–Ω–∞ {actor_name}.\n–ù–∞–∑–≤–∞–Ω–∏–µ: {proposal.name}"
            await asyncio.gather(
                *[context.bot.send_message(chat_id=aid, text=notif) for aid in admin_ids],
                return_exceptions=True
            )
    except Exception:
        pass

async def reject_pending(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    # –î–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è ‚Äî —É—Ä.2+ –∏–ª–∏ –°–æ–∑–¥–∞—Ç–µ–ª—å
    user = update.effective_user
    is_creator = (user.username in ADMIN_USERNAMES)
    if not is_creator:
        lvl = db.get_admin_level(user.id)
        if lvl < 2:
            await query.answer("–ù–µ—Ç –ø—Ä–∞–≤: —Ç—Ä–µ–±—É–µ—Ç—Å—è —É—Ä–æ–≤–µ–Ω—å 2+ –∏–ª–∏ –°–æ–∑–¥–∞—Ç–µ–ª—å.", show_alert=True)
            return
    request_id = int(query.data.split('_')[1])
    proposal = db.get_pending_by_id(request_id)
    if not proposal or proposal.status != 'pending':
        await query.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–∏—á–∏–Ω—É —á–µ—Ä–µ–∑ ForceReply ‚Äî –±–µ–∑–æ–ø–∞—Å–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    has_media = bool(getattr(query.message, 'photo', None))
    try:
        if has_media:
            await query.edit_message_caption(caption="–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–∏—á–∏–Ω—É –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–∏–ª–∏ '-' –±–µ–∑ –ø—Ä–∏—á–∏–Ω—ã).")
        else:
            await query.edit_message_text("–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–∏—á–∏–Ω—É –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–∏–ª–∏ '-' –±–µ–∑ –ø—Ä–∏—á–∏–Ω—ã).")
    except BadRequest:
        pass
    prompt = await context.bot.send_message(
        chat_id=query.message.chat_id,
        text=f"–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ #{request_id}:",
        reply_markup=ForceReply(selective=True)
    )
    REJECT_PROMPTS[(prompt.chat_id, prompt.message_id)] = {
        'kind': 'add',
        'request_id': request_id,
        'origin_chat_id': query.message.chat_id,
        'origin_message_id': query.message.message_id,
        'reviewer_id': user.id,
    }

async def requests_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """/requests ‚Äî —Å–ø–∏—Å–æ–∫ –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞—è–≤–æ–∫ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏."""
    user = update.effective_user
    if not db.is_admin(user.id) and (user.username not in ADMIN_USERNAMES):
        await update.message.reply_text("–ù–µ—Ç –ø—Ä–∞–≤")
        return
    pendings = db.get_pending_additions(limit=10)
    edit_pendings = db.get_pending_edits(limit=10)
    del_pendings = db.get_pending_deletions(limit=10)
    if not pendings and not edit_pendings and not del_pendings:
        await update.message.reply_text("–û–∂–∏–¥–∞—é—â–∏—Ö –∑–∞—è–≤–æ–∫ –Ω–µ—Ç")
        return
    if pendings:
        for p in pendings:
            caption = (
                f"#{p.id} ‚Äî {p.name}\n"
                f"–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π: {'–î–∞' if p.is_special else '–ù–µ—Ç'}\n"
                f"–û–ø–∏—Å–∞–Ω–∏–µ: {p.description}"
            )
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_{p.id}"),
                 InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{p.id}")]
            ])
            if p.file_id:
                await update.message.reply_photo(photo=p.file_id, caption=caption, reply_markup=keyboard)
            else:
                await update.message.reply_text(text=caption, reply_markup=keyboard)
    if edit_pendings:
        await update.message.reply_text("‚Äî –ó–∞—è–≤–∫–∏ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ‚Äî")
        for ep in edit_pendings:
            drink = db.get_drink_by_id(ep.drink_id)
            drink_name = drink.name if drink else f"ID {ep.drink_id}"
            cap = (
                f"#EDIT{ep.id} ‚Äî {drink_name} (ID {ep.drink_id})\n"
                f"–ü–æ–ª–µ: {ep.field}\n"
                f"–ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {ep.new_value}"
            )
            kb = InlineKeyboardMarkup([
                [InlineKeyboardButton("‚úÖ –ü—Ä–∏–º–µ–Ω–∏—Ç—å –ø—Ä–∞–≤–∫—É", callback_data=f"editapprove_{ep.id}"),
                 InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"editreject_{ep.id}")]
            ])
            await update.message.reply_text(text=cap, reply_markup=kb)
    if del_pendings:
        await update.message.reply_text("‚Äî –ó–∞—è–≤–∫–∏ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ ‚Äî")
        for dp in del_pendings:
            drink = db.get_drink_by_id(dp.drink_id)
            drink_name = drink.name if drink else f"ID {dp.drink_id}"
            cap = (
                f"#DEL{dp.id} ‚Äî {drink_name} (ID {dp.drink_id})\n"
                f"–ü—Ä–∏—á–∏–Ω–∞: {dp.reason or '‚Äî'}"
            )
            kb = InlineKeyboardMarkup([
                [InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ", callback_data=f"delapprove_{dp.id}"),
                 InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"delreject_{dp.id}")]
            ])
            await update.message.reply_text(text=cap, reply_markup=kb)

async def id_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """/id ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ ID -> –Ω–∞–∑–≤–∞–Ω–∏–µ —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫–∞. –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤, —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–∫–µ."""
    user = update.effective_user
    chat = update.effective_chat
    if not db.is_admin(user.id) and (user.username not in ADMIN_USERNAMES):
        await update.message.reply_text("–ù–µ—Ç –ø—Ä–∞–≤")
        return
    if chat.type != 'private':
        await update.message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –±–æ—Ç—É.")
        return
    drinks = db.get_all_drinks()
    if not drinks:
        await update.message.reply_text("–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫–æ–≤.")
        return
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ ID
    drinks_sorted = sorted(drinks, key=lambda d: d.id)
    lines = [f"{d.id}: {d.name}" for d in drinks_sorted]
    header = f"–í—Å–µ–≥–æ —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫–æ–≤: {len(lines)}\n"
    # –ß–∞–Ω–∫—É–µ–º –ø–æ –¥–ª–∏–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏—è ~3500 —Å–∏–º–≤–æ–ª–æ–≤
    chunk = header
    for line in lines:
        if len(chunk) + len(line) + 1 > 3500:
            await update.message.reply_text(chunk.rstrip())
            chunk = ""
        chunk += line + "\n"
    if chunk:
        await update.message.reply_text(chunk.rstrip())

async def addcoins_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """/addcoins ‚Äî —Ç–æ–ª—å–∫–æ –¥–ª—è –°–æ–∑–¥–∞—Ç–µ–ª—è. –ù–∞—á–∏—Å–ª—è–µ—Ç –º–æ–Ω–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ ID –∏–ª–∏ username.
    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    /addcoins <amount> <user_id|@username>
    –∏–ª–∏ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ: /addcoins <amount>
    """
    user = update.effective_user
    if user.username not in ADMIN_USERNAMES:
        await update.message.reply_text("–ù–µ—Ç –ø—Ä–∞–≤: –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –°–æ–∑–¥–∞—Ç–µ–ª—é.")
        return

    args = context.args or []
    target_id = None
    target_username = None
    amount = None

    # –í–∞—Ä–∏–∞–Ω—Ç: –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if update.message.reply_to_message:
        if not args or not args[0].lstrip('+').isdigit():
            await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî /addcoins <amount>")
            return
        amount = int(args[0])
        target_id = update.message.reply_to_message.from_user.id
        target_username = update.message.reply_to_message.from_user.username
    else:
        if len(args) < 2:
            await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /addcoins <amount> <user_id|@username>")
            return
        a, b = args[0], args[1]
        id_or_username = None
        if a.lstrip('+').isdigit() and not b.lstrip('+').isdigit():
            amount = int(a)
            id_or_username = b
        elif b.lstrip('+').isdigit() and not a.lstrip('+').isdigit():
            amount = int(b)
            id_or_username = a
        elif a.lstrip('+').isdigit() and b.lstrip('+').isdigit():
            amount = int(a)
            id_or_username = b
        else:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç—ã. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /addcoins <amount> <user_id|@username>")
            return
        if id_or_username.startswith('@'):
            target_username = id_or_username[1:]
        elif id_or_username.isdigit():
            target_id = int(id_or_username)
        else:
            target_username = id_or_username

    if amount is None or amount <= 0:
        await update.message.reply_text("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º.")
        return

    # –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ username -> ID, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if target_id is None and target_username:
        try:
            chat_obj = await context.bot.get_chat(f"@{target_username}")
            if getattr(chat_obj, 'id', None):
                target_id = chat_obj.id
        except Exception:
            pass
        if target_id is None:
            player = db.get_player_by_username(target_username)
            if player:
                target_id = int(player.user_id)

    if target_id is None:
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É/username.")
        return

    new_balance = db.increment_coins(target_id, amount)
    if new_balance is None:
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    # –ê—É–¥–∏—Ç-–ª–æ–≥ (–Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ –ø—Ä–∏ –æ—à–∏–±–∫–µ)
    try:
        db.insert_moderation_log(user.id, 'grant_coins', target_id=target_id, details=f"amount={amount}")
    except Exception:
        pass

    shown = f"@{target_username}" if target_username else str(target_id)
    await update.message.reply_text(f"‚úÖ –ù–∞—á–∏—Å–ª–µ–Ω–æ {amount} —Å–µ–ø—Ç–∏–º–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {shown}.\n–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance}")

async def cancel_add(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    return ConversationHandler.END


def log_existing_drinks():
    """–í—ã–≤–æ–¥–∏—Ç –≤ –ª–æ–≥–∏ —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫–æ–≤, –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –≤ –±–∞–∑–µ."""
    drinks = db.get_all_drinks()
    if not drinks:
        logger.info("[DRINKS] –ë–∞–∑–∞ –ø—É—Å—Ç–∞.")
        return
    logger.info("[DRINKS] –°–ø–∏—Å–æ–∫ —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫–æ–≤:")
    for d in drinks:
        logger.info(f"- {d.id}: {d.name}")

async def show_settings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫."""
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id
    player = db.get_or_create_player(user_id, query.from_user.username or query.from_user.first_name)

    lang = player.language
    lang_readable = '–†—É—Å—Å–∫–∏–π' if lang == 'ru' else 'English'
    reminder_state = t(lang, 'on') if player.remind else t(lang, 'off')
    auto_state = t(lang, 'on') if getattr(player, 'auto_search_enabled', False) else t(lang, 'off')

    text = (
        f"<b>{t(lang, 'settings_title')}</b>\n\n"
        f"{t(lang, 'current_language')}: {lang_readable}\n"
        f"{t(lang, 'auto_reminder')}: {reminder_state}\n"
        f"{t(lang, 'auto_search')}: {auto_state}\n"
    )

    keyboard = [
        [InlineKeyboardButton(t(lang, 'btn_change_lang'), callback_data='settings_lang')],
        [InlineKeyboardButton(t(lang, 'btn_toggle_rem'), callback_data='settings_reminder')],
        [InlineKeyboardButton(t(lang, 'btn_toggle_auto'), callback_data='settings_auto')],
        [InlineKeyboardButton(t(lang, 'btn_reset'), callback_data='settings_reset')],
        [InlineKeyboardButton(t(lang, 'btn_back'), callback_data='menu')]
    ]
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='HTML')

async def settings_lang_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    player = db.get_or_create_player(query.from_user.id, query.from_user.username or query.from_user.first_name)
    lang = player.language
    keyboard = [
        [InlineKeyboardButton("–†—É—Å—Å–∫–∏–π", callback_data='lang_ru'), InlineKeyboardButton("English", callback_data='lang_en')],
        [InlineKeyboardButton(t(lang, 'btn_back'), callback_data='settings')]
    ]
    await query.edit_message_text(t(lang, 'choose_lang'), reply_markup=InlineKeyboardMarkup(keyboard))

async def set_language(update: Update, context: ContextTypes.DEFAULT_TYPE, lang_code: str):
    query = update.callback_query
    await query.answer()

    db.update_player(query.from_user.id, language=lang_code)
    await query.answer("–Ø–∑—ã–∫ –æ–±–Ω–æ–≤–ª—ë–Ω" if lang_code == 'ru' else 'Language updated', show_alert=True)
    # –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
    await show_settings(update, context)

async def toggle_reminder(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    player = db.get_or_create_player(query.from_user.id, query.from_user.username or query.from_user.first_name)
    new_state = not player.remind
    db.update_player(player.user_id, remind=new_state)
    await query.answer("–ò–∑–º–µ–Ω–µ–Ω–æ" , show_alert=True)
    await show_settings(update, context)

async def toggle_auto_search(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id
    player = db.get_or_create_player(user_id, query.from_user.username or query.from_user.first_name)
    lang = player.language

    current = bool(getattr(player, 'auto_search_enabled', False))
    if not current:
        # –í–∫–ª—é—á–∞–µ–º ‚Äî –ø—Ä–æ–≤–µ—Ä–∏–º VIP
        if not db.is_vip(user_id):
            await query.answer(t(lang, 'auto_requires_vip'), show_alert=True)
            await show_settings(update, context)
            return
        db.update_player(user_id, auto_search_enabled=True)
        # –°–±—Ä–æ—Å–∏–º –æ–∫–Ω–æ, –µ—Å–ª–∏ –Ω–µ –∑–∞–¥–∞–Ω–æ
        now_ts = int(time.time())
        reset_ts = int(getattr(player, 'auto_search_reset_ts', 0) or 0)
        if reset_ts == 0:
            db.update_player(user_id, auto_search_reset_ts=now_ts + 24*60*60)
        # –°–Ω–µ—Å—ë–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∑–∞–¥–∞—á–∏ –∏ –∑–∞–ø–ª–∞–Ω–∏—Ä—É–µ–º –Ω–æ–≤—É—é
        try:
            jobs = context.application.job_queue.get_jobs_by_name(f"auto_search_{user_id}")
            for j in jobs:
                j.schedule_removal()
        except Exception:
            pass
        try:
            context.application.job_queue.run_once(
                auto_search_job,
                when=1,
                chat_id=user_id,
                name=f"auto_search_{user_id}",
            )
        except Exception:
            pass
        try:
            current_limit = db.get_auto_search_daily_limit(user_id)
            await context.bot.send_message(chat_id=user_id, text=t(lang, 'auto_enabled').format(limit=current_limit))
        except Exception:
            pass
    else:
        # –í—ã–∫–ª—é—á–∞–µ–º
        db.update_player(user_id, auto_search_enabled=False)
        try:
            jobs = context.application.job_queue.get_jobs_by_name(f"auto_search_{user_id}")
            for j in jobs:
                j.schedule_removal()
        except Exception:
            pass
        try:
            await context.bot.send_message(chat_id=user_id, text=t(lang, 'auto_disabled'))
        except Exception:
            pass
    await show_settings(update, context)

async def reset_prompt(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    player = db.get_or_create_player(query.from_user.id, query.from_user.username or query.from_user.first_name)
    lang = player.language
    keyboard = [
        [InlineKeyboardButton("‚úÖ Yes" if lang=='en' else "‚úÖ –î–∞", callback_data='reset_yes'),
         InlineKeyboardButton("‚ùå No" if lang=='en' else "‚ùå –ù–µ—Ç", callback_data='reset_no')]
    ]
    await query.edit_message_text(t(lang, 'confirm_delete'), reply_markup=InlineKeyboardMarkup(keyboard))

async def reset_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE, confirm: bool):
    query = update.callback_query
    await query.answer()
    if confirm:
        db.delete_player(query.from_user.id)
        player_lang = 'ru'
        try:
            player_lang = db.get_or_create_player(query.from_user.id, query.from_user.username or query.from_user.first_name).language
        except:
            pass
        await query.edit_message_text(t(player_lang, 'data_deleted'))
    else:
        await show_settings(update, context)


async def show_leaderboard(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É –ª–∏–¥–µ—Ä–æ–≤."""
    leaderboard_data = db.get_leaderboard()
    
    if not leaderboard_data:
        text = "–ï—â–µ –Ω–∏–∫—Ç–æ –Ω–µ –Ω–∞—à–µ–ª –Ω–∏ –æ–¥–Ω–æ–≥–æ —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫–∞. –ë—É–¥—å –ø–µ—Ä–≤—ã–º!"
        await update.message.reply_text(text)
        return

    text = "üèÜ <b>–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫–æ–≤:</b>\n\n"
    
    medals = {0: 'ü•á', 1: 'ü•à', 2: 'ü•â'}
    
    for i, (user_id, username, total_drinks, vip_until) in enumerate(leaderboard_data):
        place = i + 1
        medal = medals.get(i, f" {place}.")
        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è HTML
        safe_username = username.replace('<', '&lt;').replace('>', '&gt;')
        vip_badge = f" {VIP_EMOJI}" if (vip_until and int(time.time()) < int(vip_until)) else ""
        text += f"{medal} {safe_username}{vip_badge} - <b>{total_drinks} —à—Ç.</b>\n"

    await update.message.reply_html(text)


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø—Ä–∞–≤–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."""
    user = update.effective_user
    # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –∫—É–ª–¥–∞—É–Ω—ã
    search_minutes = SEARCH_COOLDOWN // 60
    bonus_hours = DAILY_BONUS_COOLDOWN // 3600
    text = (
        f"üëã –ü—Ä–∏–≤–µ—Ç, {user.mention_html()}!\n\n"
        "–Ø –±–æ—Ç –¥–ª—è –∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫–æ–≤. –í–æ—Ç —á—Ç–æ –¥–æ—Å—Ç—É–ø–Ω–æ:\n\n"
        "<b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:</b>\n"
        f"‚Ä¢ üîé <b>–ù–∞–π—Ç–∏ —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫</b> ‚Äî —Ä–∞–∑ –≤ {search_minutes} –º–∏–Ω. –º–æ–∂–Ω–æ –∏—Å–ø—ã—Ç–∞—Ç—å —É–¥–∞—á—É –∏ –Ω–∞–π—Ç–∏ —Å–ª—É—á–∞–π–Ω—ã–π —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫.\n"
        f"‚Ä¢ üéÅ <b>–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å</b> ‚Äî —Ä–∞–∑ –≤ {bonus_hours} —á. –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫.\n"
        "‚Ä¢ üì¶ <b>–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å</b> ‚Äî –≤—Å–µ –≤–∞—à–∏ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –Ω–∞–ø–∏—Ç–∫–∏ (–µ—Å—Ç—å –ø–∞–≥–∏–Ω–∞—Ü–∏—è).\n"
        "‚Ä¢ üõí <b>–†—ã–Ω–æ–∫</b> ‚Äî –ú–∞–≥–∞–∑–∏–Ω, –ü—Ä–∏–ª–∞–≤–∫–∏ –∏ –ü—Ä–∏—ë–º–Ω–∏–∫.\n"
        "‚Ä¢ üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b> ‚Äî –ª–∏—á–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏.\n"
        "‚Ä¢ ‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b> ‚Äî –≤—ã–±–æ—Ä —è–∑—ã–∫–∞ –∏ —Å–±—Ä–æ—Å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞.\n\n"
        "<b>–ö–æ–º–∞–Ω–¥—ã:</b>\n"
        "/start ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.\n"
        "/leaderboard ‚Äî —Ç–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤.\n"
        "/find ‚Äî –±—ã—Å—Ç—Ä–æ –Ω–∞–π—Ç–∏ —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫ (—Ä–∞–±–æ—Ç–∞–µ—Ç –∏ –≤ –≥—Ä—É–ø–ø–∞—Ö).\n"
        "/myreceipts ‚Äî –≤–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —á–µ–∫–∏ TG Premium.\n"
        "/myboosts ‚Äî –≤–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è –∞–≤—Ç–æ–ø–æ–∏—Å–∫ –±—É—Å—Ç–æ–≤.\n"
        "/help ‚Äî —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n\n"
        "<b>–ü–æ–¥—Å–∫–∞–∑–∫–∏:</b>\n"
        "‚Ä¢ –ú–æ–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—Å–∞—Ç—å –≤ —á–∞—Ç \"<b>–ù–∞–π—Ç–∏ —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫</b>\", \"<b>–ù–∞–π–¥–∏ —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫</b>\" –∏–ª–∏ \"<b>–ü–æ–ª—É—á–∏—Ç—å —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫</b>\" ‚Äî —è –≤—Å—ë –ø–æ–π–º—É.\n"
        "‚Ä¢ –í –≥—Ä—É–ø–ø–∞—Ö –º–æ–∂–Ω–æ –¥–∞—Ä–∏—Ç—å –Ω–∞–ø–∏—Ç–∫–∏ –¥—Ä—É–∑—å—è–º: /gift @username (–±–æ—Ç –ø—Ä–∏—à–ª—ë—Ç –≤—ã–±–æ—Ä –≤ –ª–∏—á–∫—É)."
    )
    await update.message.reply_html(text, disable_web_page_preview=True)

async def myboosts_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """/myboosts ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –±—É—Å—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user = update.effective_user
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –±—É—Å—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        history = db.get_user_boost_history(user.id, limit=20)
        
        if not history:
            await update.message.reply_text("üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –±—É—Å—Ç–æ–≤ –∞–≤—Ç–æ–ø–æ–∏—Å–∫–∞.")
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        history_text = ["üìã <b>–í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è –±—É—Å—Ç–æ–≤ –∞–≤—Ç–æ–ø–æ–∏—Å–∫–∞:</b>\n"]
        
        for record in history:
            history_text.append(f"üìÖ {record['formatted_date']}")
            history_text.append(f"   {record['action_text']}")
            if record['details']:
                history_text.append(f"   üí° {record['details']}")
            history_text.append("")  # –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
        full_text = "\n".join(history_text)
        if len(full_text) > 4000:
            # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏
            chunks = []
            current_chunk = "üìã <b>–í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è –±—É—Å—Ç–æ–≤ –∞–≤—Ç–æ–ø–æ–∏—Å–∫–∞:</b>\n"
            
            for line in history_text[1:]:  # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
                if len(current_chunk + line + "\n") > 4000:
                    chunks.append(current_chunk)
                    current_chunk = "üìã <b>–ò—Å—Ç–æ—Ä–∏—è –±—É—Å—Ç–æ–≤ (–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ):</b>\n" + line + "\n"
                else:
                    current_chunk += line + "\n"
            
            if current_chunk.strip():
                chunks.append(current_chunk)
            
            for chunk in chunks:
                await update.message.reply_text(chunk, parse_mode='HTML')
        else:
            await update.message.reply_text(full_text, parse_mode='HTML')
            
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏: {str(e)}")


async def text_message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫–∞."""
    msg = update.effective_message
    if not msg or not getattr(msg, 'text', None):
        return
    incoming = msg.text or ""
    normalized = "".join(ch for ch in incoming.lower() if ch.isalnum() or ch.isspace()).strip()
    # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –≤–≤–æ–¥–∞ –∏ –ø—É–Ω–∫—Ç—É–∞—Ü–∏–∏
    triggers = {"–Ω–∞–π—Ç–∏ —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫", "–Ω–∞–π–¥–∏ —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫", "–ø–æ–ª—É—á–∏—Ç—å —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫", "find energy"}
    if not any(trigger in normalized for trigger in triggers):
        return

    user = update.effective_user
    # –ê–Ω—Ç–∏-–¥–∞–±–ª–∫–ª–∏–∫ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞
    lock = _get_lock(f"user:{user.id}:search")
    if lock.locked():
        await msg.reply_text("–ü–æ–∏—Å–∫ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è‚Ä¶")
        return
    async with lock:
        # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫—É–ª–¥–∞—É–Ω–∞ (—É—á—ë—Ç VIP), —á—Ç–æ–±—ã –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å–ø–∏–Ω–Ω–µ—Ä –≤–ø—É—Å—Ç—É—é
        player = db.get_or_create_player(user.id, user.username or user.first_name)
        now_ts = time.time()
        vip_active = db.is_vip(user.id)
        eff_search_cd = SEARCH_COOLDOWN / 2 if vip_active else SEARCH_COOLDOWN
        if now_ts - player.last_search < eff_search_cd:
            time_left = eff_search_cd - (now_ts - player.last_search)
            await msg.reply_text(f"–ï—â—ë –Ω–µ –≤—Ä–µ–º—è! –ü–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ (‚è≥ {int(time_left // 60)}:{int(time_left % 60):02d}).")
            return

        search_message = await msg.reply_text("‚è≥ –ò—â–µ–º —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫‚Ä¶")

        result = await _perform_energy_search(user.id, user.username or user.first_name, context)

        if result["status"] == "no_drinks":
            try:
                await search_message.edit_text("–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –Ω–µ—Ç —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫–æ–≤!")
            except BadRequest:
                await msg.reply_text("–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –Ω–µ—Ç —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫–æ–≤!")
            return

        try:
            await search_message.delete()
        except BadRequest:
            pass

        if result["status"] == 'ok':
            if result["image_path"] and os.path.exists(result["image_path"]):
                with open(result["image_path"], 'rb') as photo:
                    await msg.reply_photo(
                        photo=photo,
                        caption=result["caption"],
                        reply_markup=result["reply_markup"],
                        parse_mode='HTML'
                    )
            else:
                await msg.reply_html(
                    text=result["caption"],
                    reply_markup=result["reply_markup"]
                )


async def find_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /find –¥–ª—è –ø–æ–∏—Å–∫–∞ —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫–∞ (–æ—Å–æ–±–µ–Ω–Ω–æ –ø–æ–ª–µ–∑–Ω–∞ –≤ –≥—Ä—É–ø–ø–∞—Ö)."""
    msg = update.effective_message
    if not msg:
        return
    user = update.effective_user
    # –ê–Ω—Ç–∏-–¥–∞–±–ª–∫–ª–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /find
    lock = _get_lock(f"user:{user.id}:search")
    if lock.locked():
        await msg.reply_text("–ü–æ–∏—Å–∫ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è‚Ä¶")
        return
    async with lock:
        result = await _perform_energy_search(user.id, user.username or user.first_name, context)

    if result['status'] == 'cooldown':
        time_left = result["time_left"]
        await msg.reply_text(f"–ï—â—ë –Ω–µ –≤—Ä–µ–º—è! –ü–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ (‚è≥ {int(time_left // 60)}:{int(time_left % 60):02d}).")
        return

    if result['status'] == 'no_drinks':
        await msg.reply_text("–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –Ω–µ—Ç —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫–æ–≤!")
        return

    if result["status"] == 'ok':
        if result["image_path"] and os.path.exists(result["image_path"]):
            with open(result["image_path"], 'rb') as photo:
                await msg.reply_photo(
                    photo=photo,
                    caption=result["caption"],
                    reply_markup=result["reply_markup"],
                    parse_mode='HTML'
                )
        else:
            await msg.reply_html(
                text=result["caption"],
                reply_markup=result["reply_markup"]
            )


async def check_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """/check <ID> ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –∫–∞–∫ –≤—ã–≥–ª—è–¥–∏—Ç —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫: —Ñ–æ—Ç–æ, –Ω–∞–∑–≤–∞–Ω–∏–µ, –æ–ø–∏—Å–∞–Ω–∏–µ."""
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≥—Ä—É–ø–ø—É –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –≤ –≥—Ä—É–ø–ø–µ (–Ω–µ –º–µ—à–∞–µ—Ç –≤ –õ–°)
    try:
        await register_group_if_needed(update)
    except Exception:
        pass

    msg = update.message
    user = update.effective_user
    # –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ (—É—Ä–æ–≤–Ω–∏ 1‚Äì3) –∏ –°–æ–∑–¥–∞—Ç–µ–ª—è
    if not db.is_admin(user.id) and (user.username not in ADMIN_USERNAMES):
        await msg.reply_text("–ù–µ—Ç –ø—Ä–∞–≤")
        return
    if not context.args:
        await msg.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /check <ID>")
        return
    try:
        drink_id = int(context.args[0])
    except ValueError:
        await msg.reply_text("ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü—Ä–∏–º–µ—Ä: /check 42")
        return

    drink = db.get_drink_by_id(drink_id)
    if not drink:
        await msg.reply_text("–≠–Ω–µ—Ä–≥–µ—Ç–∏–∫ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    caption = (
        f"<b>{drink.name}</b>\n\n"
        f"<i>{drink.description}</i>"
    )
    keyboard = InlineKeyboardMarkup([[InlineKeyboardButton("üîô –í –º–µ–Ω—é", callback_data='menu')]])

    image_full_path = os.path.join(ENERGY_IMAGES_DIR, drink.image_path) if drink.image_path else None
    if image_full_path and os.path.exists(image_full_path):
        try:
            with open(image_full_path, 'rb') as photo:
                await msg.reply_photo(photo=photo, caption=caption, reply_markup=keyboard, parse_mode='HTML')
        except Exception:
            # –ù–∞ —Å–ª—É—á–∞–π –ø—Ä–æ–±–ª–µ–º —Å —Ñ–∞–π–ª–æ–º ‚Äî –æ—Ç–ø—Ä–∞–≤–∏–º –±–µ–∑ —Ñ–æ—Ç–æ
            await msg.reply_html(text=caption, reply_markup=keyboard)
    else:
        await msg.reply_html(text=caption, reply_markup=keyboard)


async def gift_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """/gift @username ‚Äî –∏–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç –¥–∞—Ä–µ–Ω–∏–µ —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫–∞. –†–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö."""
    try:
        logger.info(
            "[GIFT] invoked: chat_id=%s type=%s user_id=%s args=%s",
            getattr(update.effective_chat, 'id', None),
            getattr(update.effective_chat, 'type', None),
            getattr(update.effective_user, 'id', None),
            context.args if hasattr(context, 'args') else None,
        )
    except Exception:
        pass
    await register_group_if_needed(update)
    if update.message.chat.type not in ("group", "supergroup"):
        await update.message.reply_text("–≠—Ç–æ–π –∫–æ–º–∞–Ω–¥–æ–π –º–æ–∂–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö.")
        return

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è: –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç ‚Äî –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ (reply), –∑–∞—Ç–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç @username
    recipient_id = None
    recipient_username = None
    recipient_display = None

    reply = getattr(update.message, 'reply_to_message', None)
    if reply and getattr(reply, 'from_user', None):
        ruser = reply.from_user
        # –ù–µ–ª—å–∑—è –¥–∞—Ä–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è–º –±–µ–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
        if getattr(ruser, 'is_bot', False):
            await update.message.reply_text("–ù–µ–ª—å–∑—è –¥–∞—Ä–∏—Ç—å –±–æ—Ç–∞–º.")
            return
        recipient_id = ruser.id
        recipient_username = ruser.username or None
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è –¥–ª—è –ø–æ–¥–ø–∏—Å–∏ –≤ –≥—Ä—É–ø–ø–µ (–µ—Å–ª–∏ –Ω–µ—Ç username)
        display = getattr(ruser, 'full_name', None) or " ".join([n for n in [ruser.first_name, ruser.last_name] if n])
        recipient_display = f"@{recipient_username}" if recipient_username else (display or str(recipient_id))
    else:
        # –ê—Ä–≥—É–º–µ–Ω—Ç—ã: –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ context.args, –∞ –µ—Å–ª–∏ –ø—É—Å—Ç–æ ‚Äî —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∫–æ–º–∞–Ω–¥—ã
        args = context.args if hasattr(context, 'args') else []
        if not args:
            try:
                raw = (getattr(update.message, 'text', None) or '').strip()
                m = re.match(r"^/gift(?:@\w+)?\s+(\S+)", raw, flags=re.IGNORECASE)
                if m:
                    args = [m.group(1)]
            except Exception:
                pass
        if not args:
            await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /gift @username\n–õ–∏–±–æ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /gift")
            return
        recipient_username = args[0].lstrip("@").strip()
        recipient_display = f"@{recipient_username}"
    giver_id = update.effective_user.id

    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ —á–∏—Ç–∞–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –¥–∞—Ä–∏—Ç–µ–ª—è
    try:
        inventory_items = db.get_player_inventory_with_details(giver_id)
    except Exception:
        logger.exception("[GIFT] Failed to fetch inventory for giver %s", giver_id)
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    if not inventory_items:
        await update.message.reply_text("–í–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É—Å—Ç ‚Äî –Ω–µ—á–µ–≥–æ –¥–∞—Ä–∏—Ç—å.")
        return

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –Ω–∞–ø–∏—Ç–∫–∞
    keyboard_rows = []
    try:
        for item in inventory_items:
            drink_name = item.drink.name
            rarity = item.rarity
            quantity = item.quantity
            button_text = f"{drink_name} ({rarity}) x{quantity}"
            token = secrets.token_urlsafe(8)
            GIFT_SELECT_TOKENS[token] = {
                'group_id': update.effective_chat.id,
                'recipient_username': recipient_username or "",
                'recipient_id': recipient_id,
                'recipient_display': recipient_display,
                'item_id': item.id,
            }
            cb_data = f"selectgift2_{token}"
            keyboard_rows.append([InlineKeyboardButton(button_text, callback_data=cb_data)])
    except Exception:
        logger.exception("[GIFT] Failed to build gift keyboard for giver %s", giver_id)
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–¥–∞—Ä–∫–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–ø–∏—Å–∞—Ç—å –¥–∞—Ä–∏—Ç–µ–ª—é –≤ –ª–∏—á–∫—É. –ï—Å–ª–∏ –±–æ—Ç –Ω–µ –º–æ–∂–µ—Ç ‚Äî —Å–æ–æ–±—â–∞–µ–º –≤ –≥—Ä—É–ø–ø–µ, —á—Ç–æ –Ω—É–∂–Ω–æ –Ω–∞–∂–∞—Ç—å Start.
    try:
        await context.bot.send_message(
            chat_id=giver_id,
            text="–í—ã–±–µ—Ä–∏—Ç–µ —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–∞—Ä–∏—Ç—å:",
            reply_markup=InlineKeyboardMarkup(keyboard_rows)
        )
        # –°–æ–æ–±—â–∞–µ–º –≤ –≥—Ä—É–ø–ø–µ, —á—Ç–æ —Å–ø–∏—Å–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –ª–∏—á–∫—É
        try:
            await update.message.reply_text("–û—Ç–ø—Ä–∞–≤–∏–ª —Å–ø–∏—Å–æ–∫ –≤–∞–º –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.")
        except Exception:
            pass
    except Forbidden:
        await update.message.reply_text(
            "–ù–µ –º–æ–≥—É –Ω–∞–ø–∏—Å–∞—Ç—å –≤–∞–º –≤ –ª–∏—á–∫—É. –û—Ç–∫—Ä–æ–π—Ç–µ —á–∞—Ç —Å –±–æ—Ç–æ–º –∏ –Ω–∞–∂–º–∏—Ç–µ Start, –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É."
        )
        return
    except Exception as e:
        logger.exception("[GIFT] Failed to send DM to giver %s: %s", giver_id, e)
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    
    


async def handle_select_gift(update: Update, context: ContextTypes.DEFAULT_TYPE, payload: dict):
    query = update.callback_query
    await query.answer()

    giver_id = query.from_user.id

    group_id = payload.get('group_id')
    item_id = payload.get('item_id')
    recipient_username = (payload.get('recipient_username') or '').strip()
    recipient_id = payload.get('recipient_id')
    recipient_display = payload.get('recipient_display') or (f"@{recipient_username}" if recipient_username else None)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø—Ä–µ–¥–º–µ—Ç —É –¥–∞—Ä–∏—Ç–µ–ª—è
    item = db.get_inventory_item(item_id)
    if not item or item.player_id != giver_id or item.quantity <= 0:
        await query.answer("–≠—Ç–æ—Ç –Ω–∞–ø–∏—Ç–æ–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.", show_alert=True)
        return

    global NEXT_GIFT_ID
    gift_id = NEXT_GIFT_ID
    NEXT_GIFT_ID += 1

    GIFT_OFFERS[gift_id] = {
        "giver_id": giver_id,
        "giver_name": query.from_user.username or query.from_user.first_name,
        "recipient_username": recipient_username,
        "recipient_id": recipient_id,
        "recipient_display": recipient_display,
        "item_id": item_id,
        "drink_id": item.drink.id,
        "drink_name": item.drink.name,
        "rarity": item.rarity,
        "group_id": group_id
    }

    # –°–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É
    recip_text = GIFT_OFFERS[gift_id].get('recipient_display') or (f"@{recipient_username}" if recipient_username else "–ø–æ–ª—É—á–∞—Ç–µ–ª—é")
    # –ï—Å–ª–∏ –Ω–µ—Ç @username, —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º –∏–º—è –¥–ª—è HTML
    recip_html = recip_text if recip_text.startswith('@') else html.escape(str(recip_text))
    caption = (
        f"@{GIFT_OFFERS[gift_id]['giver_name']} —Ö–æ—á–µ—Ç –ø–æ–¥–∞—Ä–∏—Ç—å {recip_html} –Ω–∞–ø–∏—Ç–æ–∫ "
        f"<b>{html.escape(item.drink.name)}</b> ({html.escape(item.rarity)}). –ü—Ä–∏–Ω—è—Ç—å?"
    )
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚úÖ –î–∞", callback_data=f"giftresp_{gift_id}_yes"),
         InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data=f"giftresp_{gift_id}_no")]
    ])

    await context.bot.send_message(
        chat_id=group_id,
        text=caption,
        reply_markup=keyboard,
        parse_mode='HTML'
    )

    await query.edit_message_text("–ü–æ–¥–∞—Ä–æ–∫ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω! –û–∂–∏–¥–∞–µ–º –æ—Ç–≤–µ—Ç.")


async def handle_gift_response(update: Update, context: ContextTypes.DEFAULT_TYPE, gift_id: int, accepted: bool):
    query = update.callback_query
    await query.answer()
    # –ê–Ω—Ç–∏-–¥–∞–±–ª–∫–ª–∏–∫: –∑–∞—â–∏—Ç–∞ –æ—Ç –¥–≤–æ–π–Ω–æ–≥–æ –ø—Ä–∏–Ω—è—Ç–∏—è –æ–¥–Ω–æ–≥–æ –∏ —Ç–æ–≥–æ –∂–µ –ø–æ–¥–∞—Ä–∫–∞
    lock = _get_lock(f"gift:{gift_id}")
    if lock.locked():
        await query.answer("–≠—Ç–æ—Ç –ø–æ–¥–∞—Ä–æ–∫ —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è‚Ä¶", show_alert=True)
        return
    async with lock:
        offer = GIFT_OFFERS.get(gift_id)
        if not offer:
            await query.answer("–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
            return

    # –î–æ–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—É—á–∞—Ç–µ–ª—è: —Å–ø–µ—Ä–≤–∞ –ø–æ id, –∏–Ω–∞—á–µ –ø–æ username
    rec_id = offer.get('recipient_id')
    rec_un = (offer.get('recipient_username') or '').lower()
    if rec_id:
        if query.from_user.id != rec_id:
            await query.answer("–≠—Ç–æ –Ω–µ –≤–∞–º –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–∞–ª–æ—Å—å!", show_alert=True)
            return
    elif rec_un:
        if not query.from_user.username or query.from_user.username.lower() != rec_un:
            await query.answer("–≠—Ç–æ –Ω–µ –≤–∞–º –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–∞–ª–æ—Å—å!", show_alert=True)
            return

    if not accepted:
        # –û—Ç–∫–ª–æ–Ω–µ–Ω–æ
        try:
            await query.edit_message_text("‚ùå –ü–æ–¥–∞—Ä–æ–∫ –æ—Ç–∫–ª–æ–Ω—ë–Ω.")
        except BadRequest:
            pass
        del GIFT_OFFERS[gift_id]
        return

    # –§–∏–∫—Å: —Å–Ω–∞—á–∞–ª–∞ —Ñ–∏–∫—Å–∏—Ä—É–µ–º drink_id, –∑–∞—Ç–µ–º —Å–ø–∏—Å—ã–≤–∞–µ–º –∏ –∑–∞—á–∏—Å–ª—è–µ–º
    drink_id = offer.get('drink_id')
    if not drink_id:
        inv_item = db.get_inventory_item(offer['item_id'])
        drink_id = getattr(inv_item, 'drink_id', None) if inv_item else None
    if not drink_id:
        await query.edit_message_text("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–∞–ø–∏—Ç–æ–∫ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏.")
        del GIFT_OFFERS[gift_id]
        return

    # –ü—Ä–∏–Ω—è—Ç–∏–µ: –ø–µ—Ä–µ–¥–∞—ë–º –ø—Ä–µ–¥–º–µ—Ç
    success = db.decrement_inventory_item(offer['item_id'])
    if not success:
        await query.edit_message_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–¥–∞—Ç—å –ø–æ–¥–∞—Ä–æ–∫ (–ø—Ä–µ–¥–º–µ—Ç –∏—Å—á–µ–∑).")
        del GIFT_OFFERS[gift_id]
        return

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª—é
    recipient_id = query.from_user.id
    db.add_drink_to_inventory(recipient_id, drink_id, offer['rarity'])
    # log
    logger.info(
        f"[GIFT] {offer['giver_name']} -> {query.from_user.username or query.from_user.id}: {offer['drink_name']} ({offer['rarity']})"
    )

    try:
        await query.edit_message_text("‚úÖ –ü–æ–¥–∞—Ä–æ–∫ –ø—Ä–∏–Ω—è—Ç!")
    except BadRequest:
        pass

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏–≤–∞—Ç–Ω–æ
    await context.bot.send_message(chat_id=offer['giver_id'], text="–í–∞—à –ø–æ–¥–∞—Ä–æ–∫ –ø—Ä–∏–Ω—è—Ç! üéâ")
    await context.bot.send_message(chat_id=recipient_id, text="–í—ã –ø–æ–ª—É—á–∏–ª–∏ –ø–æ–¥–∞—Ä–æ–∫! –ó–∞–≥–ª—è–Ω–∏—Ç–µ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å.")
    del GIFT_OFFERS[gift_id]


def main():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞."""
    db.ensure_schema()
    log_existing_drinks()
    
    # application = ApplicationBuilder().token(TOKEN).build()
    application = ApplicationBuilder().token(config.TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    # –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π –ª–æ–≥–≥–µ—Ä –∫–æ–º–∞–Ω–¥ –≤ –≥—Ä—É–ø–ø–∞—Ö (–Ω–µ –±–ª–æ–∫–∏—Ä—É–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ)
    # –ü–µ—Ä–µ–Ω–æ—Å–∏–º –≤ –±–æ–ª–µ–µ –ø–æ–∑–¥–Ω—é—é –≥—Ä—É–ø–ø—É, —á—Ç–æ–±—ã –Ω–µ –≤–ª–∏—è—Ç—å –Ω–∞ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–µ CommandHandler("gift", ...)
    application.add_handler(MessageHandler(filters.ChatType.GROUPS & filters.COMMAND, debug_log_commands), group=2)
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("leaderboard", show_leaderboard))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("myboosts", myboosts_command))
    application.add_handler(CommandHandler("fullhelp", fullhelp_command))
    application.add_handler(CommandHandler("admin", admin_command))
    application.add_handler(CommandHandler("admin2", admin2_command))
    application.add_handler(CommandHandler("requests", requests_command))
    application.add_handler(CommandHandler("delrequest", delrequest_command))
    application.add_handler(CommandHandler("editdrink", editdrink_command))
    application.add_handler(CommandHandler("incadd", incadd_command))
    application.add_handler(CommandHandler("inceditdrink", inceditdrink_command))
    application.add_handler(CommandHandler("incdelrequest", incdelrequest_command))
    application.add_handler(CommandHandler("id", id_command))
    application.add_handler(CommandHandler("register", register_command))
    application.add_handler(CommandHandler("addcoins", addcoins_command))
    application.add_handler(CommandHandler("myreceipts", myreceipts_command))
    application.add_handler(CommandHandler("receipt", receipt_command))
    application.add_handler(CommandHandler("verifyreceipt", verifyreceipt_command))
    application.add_handler(CommandHandler("tgstock", tgstock_command))
    application.add_handler(CommandHandler("tgadd", tgadd_command))
    application.add_handler(CommandHandler("tgset", tgset_command))
    application.add_handler(CommandHandler("stock", stock_command))
    application.add_handler(CommandHandler("stockadd", stockadd_command))
    application.add_handler(CommandHandler("stockset", stockset_command))
    application.add_handler(CommandHandler("addvip", addvip_command))
    application.add_handler(CommandHandler("addautosearch", addautosearch_command))
    application.add_handler(CommandHandler("listboosts", listboosts_command))
    application.add_handler(CommandHandler("removeboost", removeboost_command))
    application.add_handler(CommandHandler("booststats", booststats_command))
    application.add_handler(CommandHandler("boosthistory", boosthistory_command))
    # Handler –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫–æ–≤
    add_conv_handler = ConversationHandler(
        entry_points=[CommandHandler("add", add_start)],
        states={
            ADD_NAME: [MessageHandler(filters.TEXT & (~filters.COMMAND), add_name)],
            ADD_DESCRIPTION: [MessageHandler(filters.TEXT & (~filters.COMMAND), add_description)],
            ADD_SPECIAL: [MessageHandler(filters.TEXT & (~filters.COMMAND), add_special)],
            ADD_PHOTO: [MessageHandler(filters.PHOTO, add_photo), CommandHandler("skip", skip_photo)],
        },
        fallbacks=[CommandHandler("cancel", cancel_add)],
    )
    application.add_handler(add_conv_handler)
    application.add_handler(CallbackQueryHandler(button_handler))
    # –í–ê–ñ–ù–û: –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç—ã –Ω–∞ ForceReply —Å –ø—Ä–∏—á–∏–Ω–æ–π –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –¥–æ –æ–±—â–µ–≥–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
    application.add_handler(MessageHandler(filters.REPLY & filters.TEXT & ~filters.COMMAND, handle_reject_reason_reply, block=True), group=0)
    # –û–±—â–∏–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ ‚Äî –ø–æ—Å–ª–µ reply-—Ö–µ–Ω–¥–ª–µ—Ä–∞
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, text_message_handler), group=1)
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º /gift —Ä–∞–Ω—å—à–µ, —á—Ç–æ–±—ã –∏—Å–∫–ª—é—á–∏—Ç—å –ø–µ—Ä–µ—Ö–≤–∞—Ç –¥—Ä—É–≥–∏–º–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏
    application.add_handler(CommandHandler("gift", gift_command))
    # –¢–∏—Ö–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≥—Ä—É–ø–ø –ø–æ –ª—é–±—ã–º –≥—Ä—É–ø–ø–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏—è–º/–∫–æ–º–∞–Ω–¥–∞–º
    application.add_handler(MessageHandler(filters.ChatType.GROUPS, group_register_handler))
    application.add_handler(CommandHandler("find", find_command))
    application.add_handler(CommandHandler("check", check_command))
    
    # –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞ (–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞: –≤–µ—Ä–Ω—ã–π –ª–∏ –±–æ—Ç –∑–∞–ø—É—â–µ–Ω)
    async def _log_bot_info(context: ContextTypes.DEFAULT_TYPE):
        try:
            me = await context.bot.get_me()
            logger.info("[BOOT] Running as @%s (id=%s)", getattr(me, 'username', None), getattr(me, 'id', None))
        except Exception as e:
            logger.warning("[BOOT] Failed to get bot info: %s", e)

    # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≥—Ä—É–ø–ø: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ —á–∞—â–µ 8 —á–∞—Å–æ–≤ (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –≤–Ω—É—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–∏)
    async def notify_groups_job(context: ContextTypes.DEFAULT_TYPE):
        groups = db.get_enabled_group_chats()
        if not groups:
            return
        interval_sec = 8 * 60 * 60
        now_ts = int(time.time())
        for g in groups:
            try:
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ –µ—â—ë –Ω–µ –ø—Ä–æ—à–ª–æ 8 —á–∞—Å–æ–≤ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ
                last = int(getattr(g, 'last_notified', 0) or 0)
                if last and (now_ts - last) < interval_sec:
                    continue
                text = (
                    "‚ö†Ô∏è –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–π —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /add –≤ –ª–∏—á–∫–µ –±–æ—Ç–∞.\n"
                    "–ü—Ä–∏–¥—É–º–∞–π—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ, –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –ø—Ä–∏–ª–æ–∂–∏—Ç–µ —Ñ–æ—Ç–æ ‚Äî –∞–¥–º–∏–Ω—ã —Ä–∞—Å—Å–º–æ—Ç—Ä—è—Ç –∑–∞—è–≤–∫—É!"
                )
                await context.bot.send_message(chat_id=g.chat_id, text=text)
                db.update_group_last_notified(g.chat_id)
                logger.info(f"[NOTIFY] Sent reminder to group {g.chat_id} ({getattr(g, 'title', None)})")
            except Exception as e:
                logger.warning(f"[NOTIFY] Failed to send to group {getattr(g, 'chat_id', '?')}: {e}")
                continue

    # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–µ–∫–∞—é—â–∏—Ö –±—É—Å—Ç–æ–≤ –∞–≤—Ç–æ–ø–æ–∏—Å–∫–∞
    async def boost_expiration_monitoring_job(context: ContextTypes.DEFAULT_TYPE):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏—Å—Ç–µ–∫–∞—é—â–∏–µ –±—É—Å—Ç—ã –∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∞–¥–º–∏–Ω–æ–≤."""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±—É—Å—Ç—ã, –∏—Å—Ç–µ–∫–∞—é—â–∏–µ –≤ —Å–ª–µ–¥—É—é—â–∏–µ 2 —á–∞—Å–∞
            expiring_boosts = db.get_expiring_boosts(hours_ahead=2)
            
            for player in expiring_boosts:
                try:
                    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    boost_info = db.get_boost_info(player.user_id)
                    if boost_info['is_active']:
                        remaining_time = boost_info['time_remaining_formatted']
                        username = f"@{player.username}" if player.username else f"ID: {player.user_id}"
                        
                        user_message = (
                            f"‚è∞ –í–Ω–∏–º–∞–Ω–∏–µ! –í–∞—à –∞–≤—Ç–æ–ø–æ–∏—Å–∫ –±—É—Å—Ç —Å–∫–æ—Ä–æ –∏—Å—Ç–µ–∫–∞–µ—Ç!\n"
                            f"üöÄ –û—Å—Ç–∞–ª–æ—Å—å: {remaining_time}\n"
                            f"üìä –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–∏—Å–∫–∏: +{boost_info['boost_count']}"
                        )
                        
                        try:
                            await context.bot.send_message(
                                chat_id=player.user_id,
                                text=user_message
                            )
                            logger.info(f"[BOOST_MONITOR] Sent expiration warning to {username}")
                        except Exception as e:
                            logger.warning(f"[BOOST_MONITOR] Failed to notify user {username}: {e}")
                        
                        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤ –æ —Å–∫–æ—Ä–æ–º –∏—Å—Ç–µ—á–µ–Ω–∏–∏
                        admin_ids = db.get_admin_user_ids()
                        admin_message = (
                            f"‚è∞ –ë—É—Å—Ç –∞–≤—Ç–æ–ø–æ–∏—Å–∫–∞ —É {username} –∏—Å—Ç–µ–∫–∞–µ—Ç!\n"
                            f"üöÄ –ë—É—Å—Ç: +{boost_info['boost_count']} –ø–æ–∏—Å–∫–æ–≤\n"
                            f"‚è± –û—Å—Ç–∞–ª–æ—Å—å: {remaining_time}\n"
                            f"üìÖ –ò—Å—Ç–µ–∫–∞–µ—Ç: {boost_info['boost_until_formatted']}"
                        )
                        
                        for admin_id in admin_ids:
                            try:
                                await context.bot.send_message(
                                    chat_id=admin_id,
                                    text=admin_message
                                )
                            except Exception as e:
                                logger.warning(f"[BOOST_MONITOR] Failed to notify admin {admin_id}: {e}")
                                
                except Exception as e:
                    logger.warning(f"[BOOST_MONITOR] Error processing player {player.user_id}: {e}")
                    continue
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —É–±–∏—Ä–∞–µ–º –∏—Å—Ç—ë–∫—à–∏–µ –±—É—Å—Ç—ã (—Å –Ω—É–ª–µ–≤–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π)
            expired_boosts = db.get_expiring_boosts(hours_ahead=0)
            for player in expired_boosts:
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—É—Å—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏—Å—Ç—ë–∫
                    boost_info = db.get_boost_info(player.user_id)
                    if not boost_info['is_active'] and boost_info['boost_count'] > 0:
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±—É—Å—Ç–µ –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏
                        expired_boost_count = boost_info['boost_count']
                        
                        # –£–±–∏—Ä–∞–µ–º –∏—Å—Ç—ë–∫—à–∏–π –±—É—Å—Ç
                        db.remove_auto_search_boost(player.user_id)
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏—é –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏
                        try:
                            db.add_boost_history_record(
                                user_id=player.user_id,
                                username=player.username,
                                action='expired',
                                boost_count=expired_boost_count,
                                details=f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–±—Ä–∞–Ω –ø–æ –∏—Å—Ç–µ—á–µ–Ω–∏–∏ —Å—Ä–æ–∫–∞"
                            )
                        except Exception as e:
                            logger.warning(f"[BOOST_HISTORY] Failed to record boost expiration for {username}: {e}")
                        
                        username = f"@{player.username}" if player.username else f"ID: {player.user_id}"
                        
                        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏
                        user_message = (
                            f"‚è± –í–∞—à –∞–≤—Ç–æ–ø–æ–∏—Å–∫ –±—É—Å—Ç –∏—Å—Ç—ë–∫!\n"
                            f"üöÄ –ë—ã–ª–æ: +{boost_info['boost_count']} –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–∏—Å–∫–æ–≤\n"
                            f"üìä –¢–µ–ø–µ—Ä—å –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç: {db.get_auto_search_daily_limit(player.user_id)}"
                        )
                        
                        try:
                            await context.bot.send_message(
                                chat_id=player.user_id,
                                text=user_message
                            )
                            logger.info(f"[BOOST_MONITOR] Notified {username} about boost expiration")
                        except Exception as e:
                            logger.warning(f"[BOOST_MONITOR] Failed to notify user {username} about expiration: {e}")
                        
                        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤ –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏
                        admin_ids = db.get_admin_user_ids()
                        admin_message = (
                            f"‚è± –ë—É—Å—Ç –∞–≤—Ç–æ–ø–æ–∏—Å–∫–∞ —É {username} –∏—Å—Ç—ë–∫!\n"
                            f"üöÄ –ë—ã–ª–æ: +{boost_info['boost_count']} –ø–æ–∏—Å–∫–æ–≤\n"
                            f"üìä –ù–æ–≤—ã–π –ª–∏–º–∏—Ç: {db.get_auto_search_daily_limit(player.user_id)}"
                        )
                        
                        for admin_id in admin_ids:
                            try:
                                await context.bot.send_message(
                                    chat_id=admin_id,
                                    text=admin_message
                                )
                            except Exception as e:
                                logger.warning(f"[BOOST_MONITOR] Failed to notify admin {admin_id} about expiration: {e}")
                                
                except Exception as e:
                    logger.warning(f"[BOOST_MONITOR] Error processing expired boost for player {player.user_id}: {e}")
                    continue
                    
        except Exception as e:
            logger.exception(f"[BOOST_MONITOR] Error in boost monitoring job: {e}")

    if application.job_queue:
        # –ª–æ–≥ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ 2 —Å–µ–∫ –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞
        application.job_queue.run_once(_log_bot_info, when=2)
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç; —Å–∞–º –ª–∏–º–∏—Ç 8 —á–∞—Å–æ–≤ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ notify_groups_job –ø–æ last_notified
        scheduler_interval = 15 * 60
        first_delay = 60  # –º–∏–Ω–∏–º—É–º 60 —Å–µ–∫, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –≥–æ–Ω–æ–∫ —Å—Ç–∞—Ä—Ç–∞
        application.job_queue.run_repeating(notify_groups_job, interval=scheduler_interval, first=first_delay)
        
        # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏—Å—Ç–µ–∫–∞—é—â–∏—Ö –±—É—Å—Ç–æ–≤ –∞–≤—Ç–æ–ø–æ–∏—Å–∫–∞ (–∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç)
        boost_monitor_interval = 30 * 60  # 30 –º–∏–Ω—É—Ç
        boost_monitor_delay = 120  # –Ω–∞—á–∏–Ω–∞–µ–º —á–µ—Ä–µ–∑ 2 –º–∏–Ω—É—Ç—ã –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞
        application.job_queue.run_repeating(boost_expiration_monitoring_job, interval=boost_monitor_interval, first=boost_monitor_delay)

        # --- –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á –∞–≤—Ç–æ–ø–æ–∏—Å–∫–∞ VIP –ø–æ—Å–ª–µ —Ä–µ—Å—Ç–∞—Ä—Ç–∞ ---
        try:
            players = db.get_players_with_auto_search_enabled()
        except Exception as e:
            players = []
            logger.warning(f"[AUTO] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ–ø–æ–∏—Å–∫–∞: {e}")

        if players:
            restored = 0
            for idx, p in enumerate(players):
                try:
                    user_id = getattr(p, 'user_id', None)
                    if not user_id:
                        continue
                    # –û—Ç–∫–ª—é—á–∏–º –∞–≤—Ç–æ–ø–æ–∏—Å–∫, –µ—Å–ª–∏ VIP —É–∂–µ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω
                    if not db.is_vip(user_id):
                        try:
                            db.update_player(user_id, auto_search_enabled=False)
                        except Exception:
                            pass
                        continue
                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ —Å —É—á—ë—Ç–æ–º –∫—É–ª–¥–∞—É–Ω–∞ (–¥–ª—è VIP)
                    vip_active = True
                    eff_search_cd = SEARCH_COOLDOWN / 2 if vip_active else SEARCH_COOLDOWN
                    last_search_ts = float(getattr(p, 'last_search', 0) or 0.0)
                    time_since_last = max(0.0, time.time() - last_search_ts)
                    delay = eff_search_cd - time_since_last
                    # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –∏ —Ä–∞—Å—Å–µ–≤ –ø–æ –∏–Ω–¥–µ–∫—Å—É, —á—Ç–æ–±—ã –Ω–µ –∑–∞–ø—É—Å–∫–∞—Ç—å –≤—Å—ë —Ä–∞–∑–æ–º
                    base_stagger = 5.0 + float(idx % 10)
                    when_delay = max(base_stagger, delay, 1.0)
                    try:
                        application.job_queue.run_once(
                            auto_search_job,
                            when=when_delay,
                            chat_id=user_id,
                            name=f"auto_search_{user_id}",
                        )
                        restored += 1
                    except Exception as e:
                        logger.warning(f"[AUTO] –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–¥–∞—á—É –∞–≤—Ç–æ–ø–æ–∏—Å–∫–∞ –¥–ª—è {user_id}: {e}")
                except Exception:
                    logger.exception("[AUTO] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤—Ç–æ–ø–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                    continue
            if restored:
                logger.info(f"[AUTO] –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∑–∞–¥–∞—á –∞–≤—Ç–æ–ø–æ–∏—Å–∫–∞: {restored}")

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()


if __name__ == '__main__':
    main()