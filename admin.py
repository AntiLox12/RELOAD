# file: admin.py

from telegram import Update
from telegram.ext import ContextTypes
import database as db
from constants import ADMIN_USERNAMES

# Bootstrap-–∞–¥–º–∏–Ω—ã –±–µ—Ä—É—Ç—Å—è –∏–∑ constants.ADMIN_USERNAMES


async def admin_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    "/admin add|remove|list ‚Äî —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏. add/remove —Ä–∞–±–æ—Ç–∞—é—Ç –ø–æ reply –∏–ª–∏ ID."
    user = update.effective_user
    if not db.is_admin(user.id) and (user.username not in ADMIN_USERNAMES):
        await update.message.reply_text("–ù–µ—Ç –ø—Ä–∞–≤")
        return

    args = context.args or []
    if not args:
        # –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ (–¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –ø–æ —É—Ä–æ–≤–Ω—é)
        is_creator = (user.username in ADMIN_USERNAMES)
        lvl = db.get_admin_level(user.id)
        lines = ["üìò –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:\n"]
        lines.append("‚Ä¢ /admin list ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ —Å —Ä–æ–ª—è–º–∏.")
        # –ë–ª–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏ ‚Äî —Ç–æ–ª—å–∫–æ –°–æ–∑–¥–∞—Ç–µ–ª—å –∏ —É—Ä.3
        if is_creator or lvl == 3:
            lines.extend([
                "‚Ä¢ /admin add <user_id> [username] [level 1-3] ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞ (–°–æ–∑–¥–∞—Ç–µ–ª—å –∏ —É—Ä.3). –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é level=1.",
                "‚Ä¢ /admin remove <user_id> ‚Äî —É–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞ (–°–æ–∑–¥–∞—Ç–µ–ª—å –∏ —É—Ä.3).",
                "‚Ä¢ /admin level <user_id> <1-3> ‚Äî –∏–∑–º–µ–Ω–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –∞–¥–º–∏–Ω–∞ (–°–æ–∑–¥–∞—Ç–µ–ª—å –∏ —É—Ä.3).",
                "",
            ])
        lines.extend([
            "üõ°Ô∏è –ú–æ–¥–µ—Ä–∞—Ü–∏—è:",
            "‚Ä¢ /requests ‚Äî —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ —Å –∫–Ω–æ–ø–∫–∞–º–∏.",
            "   –£–¥–∞–ª–µ–Ω–∏–µ: —É—Ä.2+ –∏–ª–∏ –°–æ–∑–¥–∞—Ç–µ–ª—å. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ: —É—Ä.1+ –æ–¥–æ–±—Ä—è–µ—Ç, –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ ‚Äî —É—Ä.2+. –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å ‚Äî —É—Ä.1+, –æ–¥–æ–±—Ä—è—Ç—å ‚Äî —É—Ä.3 –∏–ª–∏ –°–æ–∑–¥–∞—Ç–µ–ª—å.",
            "‚Ä¢ /add ‚Äî –Ω–∞—á–∞—Ç—å –ø–æ–¥–∞—á—É –∑–∞—è–≤–∫–∏ –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ (–≤ –ª–∏—á–∫–µ –±–æ—Ç–∞).",
            "‚Ä¢ /delrequest <drink_id> [–ø—Ä–∏—á–∏–Ω–∞] ‚Äî –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ (–≤ –ª–∏—á–∫–µ –±–æ—Ç–∞).",
            "‚Ä¢ /editdrink <drink_id> <name|description> <new_value> ‚Äî –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –ø—Ä–∞–≤–∫—É (–≤ –ª–∏—á–∫–µ –±–æ—Ç–∞).",
            "‚Ä¢ /check <id> ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫–∞ –ø–æ ID (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤).",
            "‚Ä¢ /id ‚Äî —Å–ø–∏—Å–æ–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π ID ‚Üí –Ω–∞–∑–≤–∞–Ω–∏–µ —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤, –≤ –ª–∏—á–∫–µ).",
            "",
            "‚ÑπÔ∏è –í—Å–µ —Ä–µ—à–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞—é—Ç—Å—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä—É –∏ –¥—Ä—É–≥–∏–º –∞–¥–º–∏–Ω–∞–º.",
        ])
        await update.message.reply_text("\n".join(lines))
        return

    action = args[0].lower()

    if action == 'list':
        admins = db.get_admin_users()
        if not admins:
            await update.message.reply_text("–ê–¥–º–∏–Ω—ã: ‚Äî")
            return
        # –û–±–Ω–æ–≤–∏–º (–ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –¥–æ—Å—Ç—É–ø–∞) username –∞–¥–º–∏–Ω–æ–≤ –ø–æ –∏—Ö —Ç–µ–∫—É—â–∏–º –ø—Ä–æ—Ñ–∏–ª—è–º
        refreshed = []
        for a in admins:
            current_uname = a.username
            try:
                chat_obj = await context.bot.get_chat(a.user_id)
                if getattr(chat_obj, 'username', None):
                    new_uname = chat_obj.username
                    if new_uname != current_uname:
                        db.add_admin_user(a.user_id, new_uname)  # –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ –æ–±–Ω–æ–≤–∏—Ç username
                        current_uname = new_uname
            except Exception:
                pass
            level = getattr(a, 'level', None)
            try:
                level = int(level) if level is not None else 1
            except Exception:
                level = 1
            refreshed.append((a.user_id, current_uname, level))
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º: –°–æ–∑–¥–∞—Ç–µ–ª–∏ —Å–≤–µ—Ä—Ö—É, –∑–∞—Ç–µ–º –ø–æ —É—Ä–æ–≤–Ω—é (3‚Üí2‚Üí1), –∑–∞—Ç–µ–º –ø–æ username/ID
        refreshed.sort(key=lambda t: (
            0 if (t[1] and t[1] in ADMIN_USERNAMES) else 1,
            - (t[2] if isinstance(t[2], int) else 1),
            (t[1] or '').lower(),
            t[0]
        ))
        lines = ["–ê–¥–º–∏–Ω—ã:"]
        for uid, uname, lvl in refreshed:
            shown = f"@{uname}" if uname else "‚Äî"
            if uname and uname in ADMIN_USERNAMES:
                role = "–°–æ–∑–¥–∞—Ç–µ–ª—å"
            else:
                role = "–ì–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω" if lvl == 3 else ("–°—Ç–∞—Ä—à–∏–π –º–æ–¥–µ—Ä–∞—Ç–æ—Ä" if lvl == 2 else "–ú–ª–∞–¥—à–∏–π –º–æ–¥–µ—Ä–∞—Ç–æ—Ä")
            lines.append(f"- {uid} ({shown}) ‚Äî {role}")
        if ADMIN_USERNAMES:
            head_list = ", ".join([f"@{u}" for u in ADMIN_USERNAMES])
            lines.append("")
            lines.append(f"–°–æ–∑–¥–∞—Ç–µ–ª–∏: {head_list}")
        await update.message.reply_text("\n".join(lines))
        return

    # –£–ø—Ä–∞–≤–ª—è—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏ –º–æ–≥—É—Ç –°–æ–∑–¥–∞—Ç–µ–ª–∏ –∏ —É—Ä.3
    if action in ('add', 'remove', 'level'):
        is_creator = (user.username in ADMIN_USERNAMES)
        lvl = db.get_admin_level(user.id)
        if not is_creator and lvl != 3:
            await update.message.reply_text("–ù–µ—Ç –ø—Ä–∞–≤: —Ç—Ä–µ–±—É–µ—Ç—Å—è —É—Ä–æ–≤–µ–Ω—å 3 –∏–ª–∏ –°–æ–∑–¥–∞—Ç–µ–ª—å.")
            return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–º–µ–Ω—ã —É—Ä–æ–≤–Ω—è
    if action == 'level':
        target_id = None
        new_level = None
        if update.message.reply_to_message:
            target_id = update.message.reply_to_message.from_user.id
            # –æ–∂–∏–¥–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –∫–∞–∫ –ø–µ—Ä–≤—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç –ø–æ—Å–ª–µ 'level'
            if len(args) >= 2 and args[1].isdigit():
                new_level = int(args[1])
        elif len(args) >= 3 and args[1].isdigit() and args[2].isdigit():
            target_id = int(args[1])
            new_level = int(args[2])
        else:
            await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /admin level <user_id> <1-3> –∏–ª–∏ –ø–æ –æ—Ç–≤–µ—Ç—É: /admin level <1-3>")
            return
        if new_level not in (1, 2, 3):
            await update.message.reply_text("–£—Ä–æ–≤–µ–Ω—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 1, 2 –∏–ª–∏ 3")
            return
        ok = db.set_admin_level(target_id, new_level)
        if ok:
            try:
                db.insert_moderation_log(user.id, 'admin_level_change', target_id=target_id, details=f"level={new_level}")
            except Exception:
                pass
        await update.message.reply_text("–£—Ä–æ–≤–µ–Ω—å –æ–±–Ω–æ–≤–ª—ë–Ω" if ok else "–ù–µ –Ω–∞–π–¥–µ–Ω –∞–¥–º–∏–Ω —Å —Ç–∞–∫–∏–º ID")
        return

    # add/remove
    target_id = None
    target_username = None
    level_to_set = None

    if update.message.reply_to_message:
        target_id = update.message.reply_to_message.from_user.id
        target_username = update.message.reply_to_message.from_user.username
        # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω —É—Ä–æ–≤–µ–Ω—å –ø–æ—Å–ª–µ 'add' –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ
        if len(args) >= 2 and args[1].isdigit():
            maybe = int(args[1])
            if 1 <= maybe <= 3:
                level_to_set = maybe
    elif len(args) >= 2 and args[1].isdigit():
        target_id = int(args[1])
        # –¥–∞–ª–µ–µ –º–æ–∂–µ—Ç –∏–¥—Ç–∏ username –∏/–∏–ª–∏ —É—Ä–æ–≤–µ–Ω—å
        if len(args) == 3:
            if args[2].isdigit() and 1 <= int(args[2]) <= 3:
                level_to_set = int(args[2])
            else:
                target_username = args[2]
        elif len(args) >= 4:
            target_username = args[2]
            if args[3].isdigit() and 1 <= int(args[3]) <= 3:
                level_to_set = int(args[3])
    else:
        await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ user_id –∏–ª–∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return

    if action == 'add':
        # –ï—Å–ª–∏ username –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –µ–≥–æ –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è
        if not target_username:
            try:
                chat_obj = await context.bot.get_chat(target_id)
                target_username = getattr(chat_obj, 'username', None)
            except Exception:
                target_username = None
        created = db.add_admin_user(target_id, target_username, level_to_set if level_to_set is not None else 1)
        if created:
            try:
                db.insert_moderation_log(user.id, 'admin_add', target_id=target_id, details=f"level={level_to_set if level_to_set is not None else 1}")
            except Exception:
                pass
        await update.message.reply_text("–î–æ–±–∞–≤–ª–µ–Ω" if created else "–£–∂–µ –±—ã–ª –∞–¥–º–∏–Ω–æ–º")
    elif action == 'remove':
        removed = db.remove_admin_user(target_id)
        if removed:
            try:
                db.insert_moderation_log(user.id, 'admin_remove', target_id=target_id)
            except Exception:
                pass
        await update.message.reply_text("–£–¥–∞–ª—ë–Ω" if removed else "–ù–µ –Ω–∞–π–¥–µ–Ω")
    else:
        await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ")
