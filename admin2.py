# file: admin2.py

from telegram import Update
from telegram.ext import ContextTypes
import database as db
from datetime import datetime
from constants import ADMIN_USERNAMES
import logging

# Set up logger
logger = logging.getLogger(__name__)

"""Bootstrap-–∞–¥–º–∏–Ω—ã –ø–æ username –±–µ—Ä—É—Ç—Å—è –∏–∑ constants.ADMIN_USERNAMES"""


def _fmt_ts(ts: int | None) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç Unix-–≤—Ä–µ–º—è –≤ —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—É—é —Å—Ç—Ä–æ–∫—É."""
    try:
        val = int(ts or 0)
        if val <= 0:
            return '-'
        return datetime.fromtimestamp(val).strftime('%Y-%m-%d %H:%M:%S')
    except Exception:
        return '-'

def _is_creator_or_lvl3(user) -> bool:
    is_creator = (user.username in ADMIN_USERNAMES)
    lvl = db.get_admin_level(user.id)
    return is_creator or lvl == 3

async def receipt_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """/receipt <id> ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ —á–µ–∫–∞ –ø–æ–∫—É–ø–∫–∏ (—Ç–æ–ª—å–∫–æ –°–æ–∑–¥–∞—Ç–µ–ª—å –∏ —É—Ä.3)."""
    msg = update.message
    user = update.effective_user
    if not _is_creator_or_lvl3(user):
        await msg.reply_text("–ù–µ—Ç –ø—Ä–∞–≤: –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –°–æ–∑–¥–∞—Ç–µ–ª—é –∏ —É—Ä.3.")
        return
    if not context.args:
        await msg.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /receipt <id>")
        return
    try:
        receipt_id = int(context.args[0])
    except ValueError:
        await msg.reply_text("ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü—Ä–∏–º–µ—Ä: /receipt 123")
        return

    rec = db.get_receipt_by_id(receipt_id)
    if not rec:
        await msg.reply_text("–ß–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    text = (
        f"üßæ –ß–µ–∫ #{rec.id}\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {rec.user_id}\n"
        f"–¢–∏–ø: {getattr(rec, 'kind', '-')}\n"
        f"–°—É–º–º–∞ (—Å–µ–ø—Ç–∏–º—ã): {getattr(rec, 'amount_coins', 0)}\n"
        f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (—Å–µ–∫): {getattr(rec, 'duration_seconds', 0)}\n"
        f"–ö—É–ø–ª–µ–Ω–æ: {_fmt_ts(getattr(rec, 'purchased_at', 0))}\n"
        f"–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {_fmt_ts(getattr(rec, 'valid_until', 0))}\n"
        f"–°—Ç–∞—Ç—É—Å: {getattr(rec, 'status', '-')}\n"
        f"–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ –∫–µ–º: {getattr(rec, 'verified_by', '-')}\n"
        f"–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ –∫–æ–≥–¥–∞: {_fmt_ts(getattr(rec, 'verified_at', 0))}\n"
        f"–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: {getattr(rec, 'extra', '-')}\n"
    )
    await msg.reply_text(text)


async def verifyreceipt_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """/verifyreceipt <id> ‚Äî –æ—Ç–º–µ—Ç–∏—Ç—å —á–µ–∫ –∫–∞–∫ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π (—Ç–æ–ª—å–∫–æ –°–æ–∑–¥–∞—Ç–µ–ª—å –∏ —É—Ä.3)."""
    msg = update.message
    user = update.effective_user
    if not _is_creator_or_lvl3(user):
        await msg.reply_text("–ù–µ—Ç –ø—Ä–∞–≤: –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –°–æ–∑–¥–∞—Ç–µ–ª—é –∏ —É—Ä.3.")
        return
    if not context.args:
        await msg.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /verifyreceipt <id>")
        return
    try:
        receipt_id = int(context.args[0])
    except ValueError:
        await msg.reply_text("ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü—Ä–∏–º–µ—Ä: /verifyreceipt 123")
        return

    rec = db.get_receipt_by_id(receipt_id)
    if not rec:
        await msg.reply_text("–ß–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    if getattr(rec, 'status', '') == 'verified':
        text = (
            f"üßæ –ß–µ–∫ #{rec.id} —É–∂–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω.\n"
            f"–°—Ç–∞—Ç—É—Å: {rec.status}\n"
            f"–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ –∫–µ–º: {getattr(rec, 'verified_by', '-')}\n"
            f"–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ –∫–æ–≥–¥–∞: {_fmt_ts(getattr(rec, 'verified_at', 0))}"
        )
        await msg.reply_text(text)
        return

    ok = db.verify_receipt(receipt_id, user.id)
    if not ok:
        await msg.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —á–µ–∫ (–≤–æ–∑–º–æ–∂–Ω–æ, –Ω–µ –Ω–∞–π–¥–µ–Ω).")
        return

    rec2 = db.get_receipt_by_id(receipt_id)
    text = (
        f"‚úÖ –ß–µ–∫ #{receipt_id} –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π.\n"
        f"–°—Ç–∞—Ç—É—Å: {getattr(rec2, 'status', 'verified')}\n"
        f"–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ –∫–µ–º: {getattr(rec2, 'verified_by', user.id)}\n"
        f"–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ –∫–æ–≥–¥–∞: {_fmt_ts(getattr(rec2, 'verified_at', int(datetime.now().timestamp())))}"
    )
    await msg.reply_text(text)


async def admin2_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """/admin2 ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã, –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–ª—å–∫–æ –°–æ–∑–¥–∞—Ç–µ–ª—é –∏ –ì–ª–∞–≤–Ω–æ–º—É –∞–¥–º–∏–Ω—É (—É—Ä.3)."""
    user = update.effective_user
    is_creator = (user.username in ADMIN_USERNAMES)
    lvl = db.get_admin_level(user.id)
    if not is_creator and lvl != 3:
        await update.message.reply_text("–ù–µ—Ç –ø—Ä–∞–≤: –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –°–æ–∑–¥–∞—Ç–µ–ª—é –∏ —É—Ä.3.")
        return
    text = (
        "üõ°Ô∏è –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –ø—Ä–∏–≤–∏–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–æ–ª–µ–π\n\n"
        "‚Äî –°–æ–∑–¥–∞—Ç–µ–ª—å –∏ –ì–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω (—É—Ä.3):\n"
        "‚Ä¢ /admin add <user_id> [username] [level 1-3] ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞.\n"
        "‚Ä¢ /admin remove <user_id> ‚Äî —É–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞.\n"
        "‚Ä¢ /admin level <user_id> <1-3> ‚Äî –∏–∑–º–µ–Ω–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –∞–¥–º–∏–Ω–∞.\n"
        "‚Ä¢ /stock <kind> ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫ —Å–∫–ª–∞–¥–∞ –ø–æ –≤–∏–¥—É –±–æ–Ω—É—Å–∞.\n"
        "‚Ä¢ /stockadd <kind> <—á–∏—Å–ª–æ> ‚Äî –∏–∑–º–µ–Ω–∏—Ç—å —Å–∫–ª–∞–¥ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞ –Ω–∞ delta (–º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º).\n"
        "‚Ä¢ /stockset <kind> <—á–∏—Å–ª–æ> ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–∫–ª–∞–¥ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞ –≤ –∑–Ω–∞—á–µ–Ω–∏–µ.\n"
        "‚Ä¢ /tgstock ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫ TG Premium –Ω–∞ —Å–∫–ª–∞–¥–µ.\n"
        "‚Ä¢ /tgadd <—á–∏—Å–ª–æ> ‚Äî –∏–∑–º–µ–Ω–∏—Ç—å —Å–∫–ª–∞–¥ TG Premium –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (–º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º).\n"
        "‚Ä¢ /tgset <—á–∏—Å–ª–æ> ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–∫–ª–∞–¥ TG Premium –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.\n"
        "‚Ä¢ /receipt <id> ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ —á–µ–∫–∞ –ø–æ–∫—É–ø–∫–∏.\n"
        "‚Ä¢ /verifyreceipt <id> ‚Äî –æ—Ç–º–µ—Ç–∏—Ç—å —á–µ–∫ –∫–∞–∫ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π.\n"
        "‚Ä¢ /addvip <@username|all> <–¥–Ω–∏> ‚Äî –¥–æ–±–∞–≤–∏—Ç—å VIP —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–ª–∏ –≤—Å–µ–º.\n"
        "‚Ä¢ /addautosearch <@username|all> <count> <days> ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ–ø–æ–∏—Å–∫ –±—É—Å—Ç (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–∏—Å–∫–∏ –≤ –¥–µ–Ω—å) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–ª–∏ –≤—Å–µ–º.\n"
        "‚Ä¢ /listboosts ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –±—É—Å—Ç–∞–º–∏ –∞–≤—Ç–æ–ø–æ–∏—Å–∫–∞.\n"
        "‚Ä¢ /removeboost <@username|user_id> ‚Äî —É–±—Ä–∞—Ç—å –±—É—Å—Ç –∞–≤—Ç–æ–ø–æ–∏—Å–∫–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n"
        "‚Ä¢ /booststats ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –±—É—Å—Ç–∞–º –∞–≤—Ç–æ–ø–æ–∏—Å–∫–∞.\n"
        "‚Ä¢ /boosthistory <@username|user_id> ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –±—É—Å—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n\n"
        "‚Äî –¢–æ–ª—å–∫–æ –°–æ–∑–¥–∞—Ç–µ–ª—å:\n"
        "‚Ä¢ /incadd –ù–∞–∑–≤–∞–Ω–∏–µ | –û–ø–∏—Å–∞–Ω–∏–µ | [–¥–∞/–Ω–µ—Ç] ‚Äî —Å–æ–∑–¥–∞—Ç—å –æ–±—ã—á–Ω—É—é –∑–∞—è–≤–∫—É –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–µ–∑ –ø–æ–º–µ—Ç–æ–∫ (–¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏).\n"
        "‚Ä¢ /inceditdrink <id> <name|description> <new_value> ‚Äî —Å–æ–∑–¥–∞—Ç—å –æ–±—ã—á–Ω—É—é –∑–∞—è–≤–∫—É –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ.\n"
        "‚Ä¢ /incdelrequest <drink_id> [–ø—Ä–∏—á–∏–Ω–∞] ‚Äî —Å–æ–∑–¥–∞—Ç—å –æ–±—ã—á–Ω—É—é –∑–∞—è–≤–∫—É –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ.\n\n"
        "‚Ä¢ /addcoins <amount> <user_id|@username> ‚Äî –Ω–∞—á–∏—Å–ª–∏—Ç—å –º–æ–Ω–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (—Ç–æ–ª—å–∫–æ –°–æ–∑–¥–∞—Ç–µ–ª—å). –ú–æ–∂–Ω–æ –æ—Ç–≤–µ—Ç–æ–º: /addcoins <amount>\n"
        "‚Ä¢ /delmoney <amount> <user_id|@username> ‚Äî —Å–ø–∏—Å–∞—Ç—å –º–æ–Ω–µ—Ç—ã —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –°–æ–∑–¥–∞—Ç–µ–ª—å). –ú–æ–∂–Ω–æ –æ—Ç–≤–µ—Ç–æ–º: /delmoney <amount>\n\n"
        "‚Äî –ü—Ä–æ—á–µ–µ:\n"
        "‚Ä¢ /fullhelp ‚Äî –ø–æ–ª–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É.\n"
    )
    await update.message.reply_text(text)


async def tgstock_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """/tgstock ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫ TG Premium –Ω–∞ —Å–∫–ª–∞–¥–µ (–°–æ–∑–¥–∞—Ç–µ–ª—å –∏ —É—Ä.3)."""
    msg = update.message
    user = update.effective_user
    if not _is_creator_or_lvl3(user):
        await msg.reply_text("–ù–µ—Ç –ø—Ä–∞–≤: –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –°–æ–∑–¥–∞—Ç–µ–ª—é –∏ —É—Ä.3.")
        return
    stock = db.get_tg_premium_stock()
    await msg.reply_text(f"–¢–µ–∫—É—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫ TG Premium: {stock}")


async def tgadd_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """/tgadd <—á–∏—Å–ª–æ> ‚Äî –∏–∑–º–µ–Ω–∏—Ç—å —Å–∫–ª–∞–¥ –Ω–∞ delta (–º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º)."""
    msg = update.message
    user = update.effective_user
    if not _is_creator_or_lvl3(user):
        await msg.reply_text("–ù–µ—Ç –ø—Ä–∞–≤: –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –°–æ–∑–¥–∞—Ç–µ–ª—é –∏ —É—Ä.3.")
        return
    if not context.args:
        await msg.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /tgadd <—á–∏—Å–ª–æ> (–º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º)")
        return
    try:
        delta = int(context.args[0])
    except ValueError:
        await msg.reply_text("–ß–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ü–µ–ª—ã–º. –ü—Ä–∏–º–µ—Ä: /tgadd 5")
        return
    new_stock = db.add_tg_premium_stock(delta)
    await msg.reply_text(f"–û—Å—Ç–∞—Ç–æ–∫ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ {delta}. –ù–æ–≤—ã–π –æ—Å—Ç–∞—Ç–æ–∫: {new_stock}")


async def tgset_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """/tgset <—á–∏—Å–ª–æ> ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–∫–ª–∞–¥ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (>=0)."""
    msg = update.message
    user = update.effective_user
    if not _is_creator_or_lvl3(user):
        await msg.reply_text("–ù–µ—Ç –ø—Ä–∞–≤: –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –°–æ–∑–¥–∞—Ç–µ–ª—é –∏ —É—Ä.3.")
        return
    if not context.args:
        await msg.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /tgset <—á–∏—Å–ª–æ>")
        return
    try:
        value = int(context.args[0])
    except ValueError:
        await msg.reply_text("–ß–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ü–µ–ª—ã–º. –ü—Ä–∏–º–µ—Ä: /tgset 10")
        return
    new_stock = db.set_tg_premium_stock(value)
    await msg.reply_text(f"–û—Å—Ç–∞—Ç–æ–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {new_stock}")


async def stock_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """/stock <kind> ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫ —Å–∫–ª–∞–¥–∞ –ø–æ –≤–∏–¥—É –±–æ–Ω—É—Å–∞ (–°–æ–∑–¥–∞—Ç–µ–ª—å –∏ —É—Ä.3)."""
    msg = update.message
    user = update.effective_user
    if not _is_creator_or_lvl3(user):
        await msg.reply_text("–ù–µ—Ç –ø—Ä–∞–≤: –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –°–æ–∑–¥–∞—Ç–µ–ª—é –∏ —É—Ä.3.")
        return
    if not context.args:
        await msg.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /stock <kind>\n–ü—Ä–∏–º–µ—Ä: /stock tg_premium")
        return
    kind = context.args[0].strip()
    stock = db.get_bonus_stock(kind)
    await msg.reply_text(f"–°–∫–ª–∞–¥ [{kind}]: {stock}")


async def stockadd_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """/stockadd <kind> <delta> ‚Äî –∏–∑–º–µ–Ω–∏—Ç—å —Å–∫–ª–∞–¥ (–º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º)."""
    msg = update.message
    user = update.effective_user
    if not _is_creator_or_lvl3(user):
        await msg.reply_text("–ù–µ—Ç –ø—Ä–∞–≤: –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –°–æ–∑–¥–∞—Ç–µ–ª—é –∏ —É—Ä.3.")
        return
    if len(context.args) < 2:
        await msg.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /stockadd <kind> <—á–∏—Å–ª–æ> (–º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º)\n–ü—Ä–∏–º–µ—Ä: /stockadd tg_premium 5")
        return
    kind = context.args[0].strip()
    try:
        delta = int(context.args[1])
    except ValueError:
        await msg.reply_text("–ß–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ü–µ–ª—ã–º. –ü—Ä–∏–º–µ—Ä: /stockadd tg_premium 5")
        return
    new_stock = db.add_bonus_stock(kind, delta)
    await msg.reply_text(f"–°–∫–ª–∞–¥ [{kind}] –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ {delta}. –ù–æ–≤—ã–π –æ—Å—Ç–∞—Ç–æ–∫: {new_stock}")


async def stockset_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """/stockset <kind> <value> ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–∫–ª–∞–¥ (>=0)."""
    msg = update.message
    user = update.effective_user
    if not _is_creator_or_lvl3(user):
        await msg.reply_text("–ù–µ—Ç –ø—Ä–∞–≤: –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –°–æ–∑–¥–∞—Ç–µ–ª—é –∏ —É—Ä.3.")
        return
    if len(context.args) < 2:
        await msg.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /stockset <kind> <—á–∏—Å–ª–æ>\n–ü—Ä–∏–º–µ—Ä: /stockset tg_premium 10")
        return
    kind = context.args[0].strip()
    try:
        value = int(context.args[1])
    except ValueError:
        await msg.reply_text("–ß–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ü–µ–ª—ã–º. –ü—Ä–∏–º–µ—Ä: /stockset tg_premium 10")
        return
    new_stock = db.set_bonus_stock(kind, value)
    await msg.reply_text(f"–°–∫–ª–∞–¥ [{kind}] —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {new_stock}")


async def addautosearch_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """/addautosearch <@username|all> <count> <days> ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ–ø–æ–∏—Å–∫ –±—É—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–ª–∏ –≤—Å–µ–º."""
    msg = update.message
    user = update.effective_user
    if not _is_creator_or_lvl3(user):
        await msg.reply_text("–ù–µ—Ç –ø—Ä–∞–≤: –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –°–æ–∑–¥–∞—Ç–µ–ª—é –∏ —É—Ä.3.")
        return
    
    if len(context.args) < 3:
        await msg.reply_text(
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /addautosearch <@username|all> <count> <days>\n"
            "–ü—Ä–∏–º–µ—Ä: /addautosearch @username 30 7\n"
            "–ü—Ä–∏–º–µ—Ä: /addautosearch all 20 3\n\n"
            "–î–æ–±–∞–≤–ª—è–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∞–≤—Ç–æ–ø–æ–∏—Å–∫–∏ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π."
        )
        return
    
    target = context.args[0].strip()
    try:
        count = int(context.args[1])
        if count <= 0:
            await msg.reply_text("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–∏—Å–∫–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
            return
    except ValueError:
        await msg.reply_text("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü—Ä–∏–º–µ—Ä: /addautosearch @username 30 7")
        return
    
    try:
        days = int(context.args[2])
        if days <= 0:
            await msg.reply_text("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
            return
    except ValueError:
        await msg.reply_text("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü—Ä–∏–º–µ—Ä: /addautosearch @username 30 7")
        return
    
    if target.lower() == "all":
        # –î–æ–±–∞–≤–ª—è–µ–º –±—É—Å—Ç –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        try:
            updated_count = db.add_auto_search_boost_to_all(count, days)
            await msg.reply_text(
                f"‚úÖ –ê–≤—Ç–æ–ø–æ–∏—Å–∫ –±—É—Å—Ç –Ω–∞ {count} –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–∏—Å–∫–æ–≤ –Ω–∞ {days} –¥–Ω–µ–π –¥–æ–±–∞–≤–ª–µ–Ω {updated_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º."
            )
        except Exception as e:
            await msg.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –±—É—Å—Ç–∞ –≤—Å–µ–º: {e}")
    else:
        # –î–æ–±–∞–≤–ª—è–µ–º –±—É—Å—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        # –£–±–∏—Ä–∞–µ–º @ –µ—Å–ª–∏ –µ—Å—Ç—å
        if target.startswith('@'):
            target = target[1:]
        
        # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username
        target_player = db.get_player_by_username(target)
        if not target_player:
            await msg.reply_text(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{target} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º –±—É—Å—Ç
        try:
            success = db.add_auto_search_boost(target_player.user_id, count, days)
            if success:
                # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏—é —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –∞–¥–º–∏–Ω–µ
                try:
                    db.add_boost_history_record(
                        user_id=target_player.user_id,
                        username=target_player.username,
                        action='granted',
                        boost_count=count,
                        boost_days=days,
                        granted_by=user.id,
                        granted_by_username=user.username,
                        details=f"–í—ã–¥–∞–Ω –∞–¥–º–∏–Ω–æ–º {user.username or f'ID:{user.id}'}"
                    )
                except Exception as e:
                    logger.warning(f"[BOOST_HISTORY] Failed to record boost grant for @{target}: {e}")
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ–≤–æ–º –ª–∏–º–∏—Ç–µ
                new_limit = db.get_auto_search_daily_limit(target_player.user_id)
                from datetime import datetime
                import time
                player = db.get_or_create_player(target_player.user_id, target_player.username)
                boost_until = int(getattr(player, 'auto_search_boost_until', 0) or 0)
                boost_end_date = datetime.fromtimestamp(boost_until).strftime('%Y-%m-%d %H:%M:%S')
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                await msg.reply_text(
                    f"‚úÖ –ê–≤—Ç–æ–ø–æ–∏—Å–∫ –±—É—Å—Ç –Ω–∞ {count} –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–∏—Å–∫–æ–≤ –Ω–∞ {days} –¥–Ω–µ–π –¥–æ–±–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{target}.\n"
                    f"–ù–æ–≤—ã–π –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç: {new_limit}\n"
                    f"–ë—É—Å—Ç –∞–∫—Ç–∏–≤–µ–Ω –¥–æ: {boost_end_date}"
                )
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±—É—Å—Ç–∞
                try:
                    boost_info = db.get_boost_info(target_player.user_id)
                    user_notification = (
                        f"üéâ –í—ã –ø–æ–ª—É—á–∏–ª–∏ –∞–≤—Ç–æ–ø–æ–∏—Å–∫ –±—É—Å—Ç!\n"
                        f"üöÄ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–∏—Å–∫–∏: +{count}\n"
                        f"üìÖ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {days} –¥–Ω–µ–π\n"
                        f"üìä –ù–æ–≤—ã–π –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç: {new_limit}\n"
                        f"‚è∞ –ë—É—Å—Ç –∞–∫—Ç–∏–≤–µ–Ω –¥–æ: {boost_info['boost_until_formatted']}\n\n"
                        f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–µ–ª–∞—Ç—å –±–æ–ª—å—à–µ –∞–≤—Ç–æ–ø–æ–∏—Å–∫–æ–≤ –≤ –¥–µ–Ω—å!"
                    )
                    
                    await context.bot.send_message(
                        chat_id=target_player.user_id,
                        text=user_notification
                    )
                    logger.info(f"[BOOST_NOTIFY] Notified user @{target} about received boost")
                except Exception as e:
                    logger.warning(f"[BOOST_NOTIFY] Failed to notify user @{target} about boost: {e}")
                    # –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                    
            else:
                await msg.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –±—É—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{target}.")
                
        except Exception as e:
            await msg.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –±—É—Å—Ç–∞: {e}")


async def addvip_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """/addvip <@username|all> <days> ‚Äî –¥–æ–±–∞–≤–∏—Ç—å VIP —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–ª–∏ –≤—Å–µ–º."""
    msg = update.message
    user = update.effective_user
    if not _is_creator_or_lvl3(user):
        await msg.reply_text("–ù–µ—Ç –ø—Ä–∞–≤: –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –°–æ–∑–¥–∞—Ç–µ–ª—é –∏ —É—Ä.3.")
        return
    
    if len(context.args) < 2:
        await msg.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /addvip <@username|all> <–¥–Ω–∏>\n–ü—Ä–∏–º–µ—Ä: /addvip @username 7\n–ü—Ä–∏–º–µ—Ä: /addvip all 7")
        return
    
    target = context.args[0].strip()
    try:
        days = int(context.args[1])
        if days <= 0:
            await msg.reply_text("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
            return
    except ValueError:
        await msg.reply_text("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü—Ä–∏–º–µ—Ä: /addvip @username 7")
        return
    
    duration_seconds = days * 24 * 60 * 60  # –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–Ω–∏ –≤ —Å–µ–∫—É–Ω–¥—ã
    
    if target.lower() == "all":
        # –î–æ–±–∞–≤–ª—è–µ–º VIP –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        try:
            from database import SessionLocal, Player
            import time
            
            db_session = SessionLocal()
            try:
                players = db_session.query(Player).all()
                count = 0
                
                for player in players:
                    now_ts = int(time.time())
                    current_vip = int(getattr(player, 'vip_until', 0) or 0)
                    start_ts = max(current_vip, now_ts) if current_vip > now_ts else now_ts
                    new_vip_until = start_ts + duration_seconds
                    
                    player.vip_until = new_vip_until
                    count += 1
                
                db_session.commit()
                await msg.reply_text(f"‚úÖ VIP —Å—Ç–∞—Ç—É—Å –Ω–∞ {days} –¥–Ω–µ–π –¥–æ–±–∞–≤–ª–µ–Ω {count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")
                
            except Exception as e:
                db_session.rollback()
                await msg.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ VIP –≤—Å–µ–º: {e}")
            finally:
                db_session.close()
                
        except Exception as e:
            await msg.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    else:
        # –î–æ–±–∞–≤–ª—è–µ–º VIP –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        # –£–±–∏—Ä–∞–µ–º @ –µ—Å–ª–∏ –µ—Å—Ç—å
        if target.startswith('@'):
            target = target[1:]
        
        # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username
        target_player = db.get_player_by_username(target)
        if not target_player:
            await msg.reply_text(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{target} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º VIP
        try:
            import time
            now_ts = int(time.time())
            current_vip = int(getattr(target_player, 'vip_until', 0) or 0)
            start_ts = max(current_vip, now_ts) if current_vip > now_ts else now_ts
            new_vip_until = start_ts + duration_seconds
            
            db.update_player(target_player.user_id, vip_until=new_vip_until)
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è VIP
            vip_end_date = datetime.fromtimestamp(new_vip_until).strftime('%Y-%m-%d %H:%M:%S')
            await msg.reply_text(f"‚úÖ VIP —Å—Ç–∞—Ç—É—Å –Ω–∞ {days} –¥–Ω–µ–π –¥–æ–±–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{target}.\nVIP –∞–∫—Ç–∏–≤–µ–Ω –¥–æ: {vip_end_date}")
            
        except Exception as e:
            await msg.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ VIP: {e}")


async def listboosts_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """/listboosts ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –±—É—Å—Ç–∞–º–∏ –∞–≤—Ç–æ–ø–æ–∏—Å–∫–∞."""
    msg = update.message
    user = update.effective_user
    if not _is_creator_or_lvl3(user):
        await msg.reply_text("–ù–µ—Ç –ø—Ä–∞–≤: –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –°–æ–∑–¥–∞—Ç–µ–ª—é –∏ —É—Ä.3.")
        return
    
    import time
    from database import SessionLocal, Player
    
    dbs = SessionLocal()
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –±—É—Å—Ç–∞–º–∏
        current_time = int(time.time())
        players_with_boosts = dbs.query(Player).filter(
            Player.auto_search_boost_until > current_time,
            Player.auto_search_boost_count > 0
        ).all()
        
        if not players_with_boosts:
            await msg.reply_text("üìã –ê–∫—Ç–∏–≤–Ω—ã—Ö –±—É—Å—Ç–æ–≤ –∞–≤—Ç–æ–ø–æ–∏—Å–∫–∞ –Ω–µ—Ç.")
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫
        boost_list = ["üìã <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –±—É—Å—Ç—ã –∞–≤—Ç–æ–ø–æ–∏—Å–∫–∞:</b>\n"]
        
        for player in players_with_boosts:
            from datetime import datetime
            boost_end = datetime.fromtimestamp(player.auto_search_boost_until).strftime('%d.%m.%Y %H:%M')
            user_info = f"@{player.username}" if player.username else f"ID: {player.user_id}"
            boost_list.append(
                f"üöÄ {user_info}: +{player.auto_search_boost_count} –¥–æ {boost_end}"
            )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ (—Ä–∞–∑–±–∏–≤–∞–µ–º –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π)
        full_text = "\n".join(boost_list)
        if len(full_text) > 4000:
            # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏
            chunks = []
            current_chunk = "üìã <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –±—É—Å—Ç—ã –∞–≤—Ç–æ–ø–æ–∏—Å–∫–∞:</b>\n"
            
            for i, boost_info in enumerate(boost_list[1:], 1):
                if len(current_chunk + boost_info + "\n") > 4000:
                    chunks.append(current_chunk)
                    current_chunk = f"üìã <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –±—É—Å—Ç—ã (—á–∞—Å—Ç—å {len(chunks)+1}):</b>\n{boost_info}\n"
                else:
                    current_chunk += boost_info + "\n"
            
            if current_chunk.strip():
                chunks.append(current_chunk)
            
            for chunk in chunks:
                await msg.reply_text(chunk, parse_mode='HTML')
        else:
            await msg.reply_text(full_text, parse_mode='HTML')
            
    except Exception as e:
        await msg.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –±—É—Å—Ç–æ–≤: {str(e)}")
    finally:
        dbs.close()


async def removeboost_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """/removeboost <@username|user_id> ‚Äî —É–±—Ä–∞—Ç—å –±—É—Å—Ç –∞–≤—Ç–æ–ø–æ–∏—Å–∫–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    msg = update.message
    user = update.effective_user
    if not _is_creator_or_lvl3(user):
        await msg.reply_text("–ù–µ—Ç –ø—Ä–∞–≤: –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –°–æ–∑–¥–∞—Ç–µ–ª—é –∏ —É—Ä.3.")
        return
    
    args = context.args
    if not args:
        await msg.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /removeboost <@username|user_id>")
        return
    
    target = args[0]
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª–µ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    target_user_id = None
    target_username = None
    
    if target.startswith('@'):
        target_username = target[1:].lower()
    else:
        try:
            target_user_id = int(target)
        except ValueError:
            await msg.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ @username –∏–ª–∏ —á–∏—Å–ª–æ–≤–æ–π ID.")
            return
    
    from database import SessionLocal, Player
    
    dbs = SessionLocal()
    try:
        # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if target_user_id:
            player = dbs.query(Player).filter(Player.user_id == target_user_id).first()
        else:
            player = dbs.query(Player).filter(Player.username.ilike(target_username)).first()
        
        if not player:
            await msg.reply_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π –±—É—Å—Ç
        import time
        current_time = int(time.time())
        current_boost_until = int(getattr(player, 'auto_search_boost_until', 0) or 0)
        current_boost_count = int(getattr(player, 'auto_search_boost_count', 0) or 0)
        
        if current_boost_until <= current_time or current_boost_count <= 0:
            user_info = f"@{player.username}" if player.username else f"ID: {player.user_id}"
            await msg.reply_text(f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_info} –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –±—É—Å—Ç–∞ –∞–≤—Ç–æ–ø–æ–∏—Å–∫–∞.")
            return
        
        # –£–±–∏—Ä–∞–µ–º –±—É—Å—Ç
        boost_info_before = {
            'boost_count': current_boost_count,
            'boost_until': current_boost_until
        }
        
        player.auto_search_boost_count = 0
        player.auto_search_boost_until = 0
        dbs.commit()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏—é
        try:
            db.add_boost_history_record(
                user_id=player.user_id,
                username=player.username,
                action='removed',
                boost_count=current_boost_count,
                granted_by=user.id,
                granted_by_username=user.username,
                details=f"–£–±—Ä–∞–Ω –∞–¥–º–∏–Ω–æ–º {user.username or f'ID:{user.id}'}"
            )
        except Exception as e:
            logger.warning(f"[BOOST_HISTORY] Failed to record boost removal for {user_info}: {e}")
        
        user_info = f"@{player.username}" if player.username else f"ID: {player.user_id}"
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        await msg.reply_text(f"‚úÖ –ë—É—Å—Ç –∞–≤—Ç–æ–ø–æ–∏—Å–∫–∞ —É–±—Ä–∞–Ω —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_info}.")
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –æ—Ç–º–µ–Ω–µ –±—É—Å—Ç–∞
        try:
            from datetime import datetime
            boost_end_formatted = datetime.fromtimestamp(boost_info_before['boost_until']).strftime('%d.%m.%Y %H:%M')
            new_limit = db.get_auto_search_daily_limit(player.user_id)
            
            user_notification = (
                f"üö´ –í–∞—à –∞–≤—Ç–æ–ø–æ–∏—Å–∫ –±—É—Å—Ç –±—ã–ª –æ—Ç–º–µ–Ω—ë–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n"
                f"üöÄ –û—Ç–º–µ–Ω—ë–Ω–Ω—ã–π –±—É—Å—Ç: +{boost_info_before['boost_count']} –ø–æ–∏—Å–∫–æ–≤\n"
                f"üìÖ –î–µ–π—Å—Ç–≤–æ–≤–∞–ª –¥–æ: {boost_end_formatted}\n"
                f"üìä –ù–æ–≤—ã–π –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç: {new_limit}"
            )
            
            await context.bot.send_message(
                chat_id=player.user_id,
                text=user_notification
            )
            logger.info(f"[BOOST_NOTIFY] Notified user {user_info} about boost removal")
        except Exception as e:
            logger.warning(f"[BOOST_NOTIFY] Failed to notify user {user_info} about boost removal: {e}")
            # –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            
    except Exception as e:
        await msg.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –±—É—Å—Ç–∞: {str(e)}")
    finally:
        dbs.close()


async def booststats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """/booststats ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –±—É—Å—Ç–∞–º –∞–≤—Ç–æ–ø–æ–∏—Å–∫–∞."""
    msg = update.message
    user = update.effective_user
    if not _is_creator_or_lvl3(user):
        await msg.reply_text("–ù–µ—Ç –ø—Ä–∞–≤: –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –°–æ–∑–¥–∞—Ç–µ–ª—é –∏ —É—Ä.3.")
        return
    
    try:
        stats = db.get_boost_statistics()
        
        # –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats_text = [
            "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±—É—Å—Ç–æ–≤ –∞–≤—Ç–æ–ø–æ–∏—Å–∫–∞:</b>\n",
            f"üöÄ –ê–∫—Ç–∏–≤–Ω—ã–µ –±—É—Å—Ç—ã: {stats['active_boosts']}",
            f"‚è± –ò—Å—Ç—ë–∫—à–∏–µ –±—É—Å—Ç—ã: {stats['expired_boosts']}",
            f"üìà –°—Ä–µ–¥–Ω–∏–π –±—É—Å—Ç: {stats['average_boost_count']} –ø–æ–∏—Å–∫–æ–≤"
        ]
        
        # –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if stats['top_users']:
            stats_text.append("\nüèÜ <b>–¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>")
            for i, user_data in enumerate(stats['top_users'], 1):
                username = f"@{user_data['username']}" if user_data['username'] else f"ID: {user_data['user_id']}"
                from datetime import datetime
                until_date = datetime.fromtimestamp(user_data['boost_until']).strftime('%d.%m %H:%M')
                stats_text.append(
                    f"{i}. {username}: +{user_data['boost_count']} –¥–æ {until_date}"
                )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–µ–∫–∞—é—â–∏–µ –±—É—Å—Ç—ã
        expiring_soon = db.get_expiring_boosts(hours_ahead=24)
        if expiring_soon:
            stats_text.append(f"\n‚ö†Ô∏è <b>–ò—Å—Ç–µ–∫–∞—é—Ç –≤ –±–ª–∏–∂–∞–π—à–∏–µ 24—á:</b> {len(expiring_soon)}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
            for player in expiring_soon[:5]:
                username = f"@{player.username}" if player.username else f"ID: {player.user_id}"
                boost_info = db.get_boost_info(player.user_id)
                remaining = boost_info['time_remaining_formatted']
                stats_text.append(f"  ‚Ä¢ {username}: {remaining}")
            
            if len(expiring_soon) > 5:
                stats_text.append(f"  ‚Ä¢ ... –∏ –µ—â—ë {len(expiring_soon) - 5}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        full_text = "\n".join(stats_text)
        await msg.reply_text(full_text, parse_mode='HTML')
        
    except Exception as e:
        await msg.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")

async def boosthistory_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """/boosthistory <@username|user_id> ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –±—É—Å—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    msg = update.message
    user = update.effective_user
    if not _is_creator_or_lvl3(user):
        await msg.reply_text("–ù–µ—Ç –ø—Ä–∞–≤: –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –°–æ–∑–¥–∞—Ç–µ–ª—é –∏ —É—Ä.3.")
        return
    
    args = context.args
    if not args:
        await msg.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /boosthistory <@username|user_id>")
        return
    
    target = args[0]
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª–µ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    target_user_id = None
    target_username = None
    
    if target.startswith('@'):
        target_username = target[1:].lower()
    else:
        try:
            target_user_id = int(target)
        except ValueError:
            await msg.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ @username –∏–ª–∏ —á–∏—Å–ª–æ–≤–æ–π ID.")
            return
    
    from database import SessionLocal, Player
    
    dbs = SessionLocal()
    try:
        # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if target_user_id:
            player = dbs.query(Player).filter(Player.user_id == target_user_id).first()
        else:
            player = dbs.query(Player).filter(Player.username.ilike(target_username)).first()
        
        if not player:
            await msg.reply_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –±—É—Å—Ç–æ–≤
        history = db.get_user_boost_history(player.user_id, limit=20)
        
        if not history:
            user_info = f"@{player.username}" if player.username else f"ID: {player.user_id}"
            await msg.reply_text(f"üìã –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_info} –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –±—É—Å—Ç–æ–≤.")
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        user_info = f"@{player.username}" if player.username else f"ID: {player.user_id}"
        history_text = [f"üìã <b>–ò—Å—Ç–æ—Ä–∏—è –±—É—Å—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_info}:</b>\n"]
        
        for record in history:
            history_text.append(f"üìÖ {record['formatted_date']}")
            history_text.append(f"   {record['action_text']}")
            if record['details']:
                history_text.append(f"   üí° {record['details']}")
            history_text.append("")  # –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
        full_text = "\n".join(history_text)
        if len(full_text) > 4000:
            # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏
            chunks = []
            current_chunk = f"üìã <b>–ò—Å—Ç–æ—Ä–∏—è –±—É—Å—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_info}:</b>\n"
            
            for line in history_text[1:]:  # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
                if len(current_chunk + line + "\n") > 4000:
                    chunks.append(current_chunk)
                    current_chunk = f"üìã <b>–ò—Å—Ç–æ—Ä–∏—è –±—É—Å—Ç–æ–≤ (–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ):</b>\n{line}\n"
                else:
                    current_chunk += line + "\n"
            
            if current_chunk.strip():
                chunks.append(current_chunk)
            
            for chunk in chunks:
                await msg.reply_text(chunk, parse_mode='HTML')
        else:
            await msg.reply_text(full_text, parse_mode='HTML')
            
    except Exception as e:
        await msg.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏: {str(e)}")
    finally:
        dbs.close()
