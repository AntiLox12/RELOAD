# file: silk_ui.py
"""
–ú–æ–¥—É–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –ì–æ—Ä–æ–¥ –®—ë–ª–∫–∞.
–°–æ–¥–µ—Ä–∂–∏—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ–Ω—é, –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–æ–∫ –∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
"""

import time
import html
from typing import Optional
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import ContextTypes
from telegram.error import BadRequest

import database as db
import silk_city
from constants import (
    SILK_INVESTMENT_LEVELS, SILK_TYPES, SILK_EMOJIS, 
    SILK_MAX_PLANTATIONS
)

# --- –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ ---

async def show_city_silk(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ì–æ—Ä–æ–¥–∞ –®—ë–ª–∫–∞."""
    query = update.callback_query
    await query.answer()

    user = query.from_user
    player = db.get_or_create_player(user.id, user.username or user.first_name)
    
    # –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä–æ–∫–∞
    stats = silk_city.get_silk_city_stats(user.id)
    plantations = silk_city.get_player_plantations(user.id)
    active_plantations = len([p for p in plantations if p.status in ['growing', 'ready']])
    
    # –ü–æ–ª—É—á–∏—Ç—å –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à—ë–ª–∫–∞
    silk_inventory = silk_city.get_silk_inventory(user.id)
    total_silk = sum(item.quantity for item in silk_inventory)
    
    # VIP —Å—Ç–∞—Ç—É—Å
    vip_status = "üî• V.I.P –∞–∫—Ç–∏–≤–µ–Ω" if db.is_vip(user.id) else ""
    vip_line = f"\n{vip_status}" if vip_status else ""
    
    text = (
        f"{SILK_EMOJIS['city']} **–ì–û–†–û–î –®–Å–õ–ö–ê** {SILK_EMOJIS['city']}\n\n"
        f"{SILK_EMOJIS['plantation']} –í–∞—à–∏ –ø–ª–∞–Ω—Ç–∞—Ü–∏–∏: {active_plantations} –∞–∫—Ç–∏–≤–Ω—ã—Ö\n"
        f"{SILK_EMOJIS['inventory']} –®—ë–ª–∫–æ–≤—ã–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å: {total_silk} –µ–¥–∏–Ω–∏—Ü\n"
        f"{SILK_EMOJIS['coins']} –î–æ—Å—Ç—É–ø–Ω–æ —Å–µ–ø—Ç–∏–º–æ–≤: {player.coins:,}\n"
        f"{vip_line}"
    )
    
    keyboard = [
        [InlineKeyboardButton(f"{SILK_EMOJIS['plantation']} –ú–æ–∏ –ø–ª–∞–Ω—Ç–∞—Ü–∏–∏", callback_data='silk_plantations')],
        [InlineKeyboardButton(f"{SILK_EMOJIS['market']} –®—ë–ª–∫–æ–≤—ã–π —Ä—ã–Ω–æ–∫", callback_data='silk_market')],
        [InlineKeyboardButton(f"{SILK_EMOJIS['inventory']} –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å —à—ë–ª–∫–∞", callback_data='silk_inventory')],
        [InlineKeyboardButton(f"{SILK_EMOJIS['stats']} –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='silk_stats')],
        [InlineKeyboardButton("üîô –ö –≥–æ—Ä–æ–¥–∞–º", callback_data='cities_menu')],
        [InlineKeyboardButton("üîô –í –º–µ–Ω—é", callback_data='menu')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await _edit_or_send_message(query, text, reply_markup)

async def show_silk_plantations(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–ª–∞–Ω—Ç–∞—Ü–∏–∏ –∏–≥—Ä–æ–∫–∞."""
    query = update.callback_query
    await query.answer()

    user = query.from_user
    plantations = silk_city.get_player_plantations(user.id)
    
    # –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å—ã –ø–ª–∞–Ω—Ç–∞—Ü–∏–π
    silk_city.update_plantation_statuses()
    plantations = silk_city.get_player_plantations(user.id)  # –û–±–Ω–æ–≤–∏—Ç—å –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    
    active_plantations = [p for p in plantations if p.status in ['growing', 'ready']]
    
    text = f"{SILK_EMOJIS['plantation']} **–ú–û–ò –ü–õ–ê–ù–¢–ê–¶–ò–ò**\n\n"
    
    if not active_plantations:
        text += "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–ª–∞–Ω—Ç–∞—Ü–∏–π.\n–°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ—é –ø–µ—Ä–≤—É—é –ø–ª–∞–Ω—Ç–∞—Ü–∏—é!"
    else:
        for i, plantation in enumerate(active_plantations, 1):
            status_emoji = _get_status_emoji(plantation.status)
            progress_bar = _get_progress_bar(plantation)
            
            time_remaining = ""
            if plantation.status == 'growing':
                time_remaining = silk_city.format_time_remaining(plantation.harvest_ready_at)
            elif plantation.status == 'ready':
                time_remaining = "–ì–æ—Ç–æ–≤ –∫ —Å–±–æ—Ä—É!"
            
            text += (
                f"{i}. **{plantation.plantation_name}**\n"
                f"   {status_emoji} –°—Ç–∞—Ç—É—Å: {_get_status_text(plantation.status)}\n"
                f"   {SILK_EMOJIS['timer']} {time_remaining}\n"
                f"   {SILK_EMOJIS['investment']} –£—Ä–æ–≤–µ–Ω—å: {plantation.investment_level.title()}\n"
                f"   {progress_bar}\n\n"
            )
    
    keyboard = []
    
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≥–æ—Ç–æ–≤—ã—Ö –ø–ª–∞–Ω—Ç–∞—Ü–∏–π
    ready_plantations = [p for p in active_plantations if p.status == 'ready']
    if ready_plantations:
        for plantation in ready_plantations:
            keyboard.append([
                InlineKeyboardButton(
                    f"{SILK_EMOJIS['harvest']} –°–æ–±—Ä–∞—Ç—å —É—Ä–æ–∂–∞–π: {plantation.plantation_name}",
                    callback_data=f'silk_harvest_{plantation.id}'
                )
            ])
    
    # –ö–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –ø–ª–∞–Ω—Ç–∞—Ü–∏–∏
    if len(active_plantations) < SILK_MAX_PLANTATIONS:
        keyboard.append([
            InlineKeyboardButton(
                f"‚ûï –°–æ–∑–¥–∞—Ç—å –ø–ª–∞–Ω—Ç–∞—Ü–∏—é ({len(active_plantations)}/{SILK_MAX_PLANTATIONS})",
                callback_data='silk_create_plantation'
            )
        ])
    
    keyboard.append([InlineKeyboardButton("üîô –ì–æ—Ä–æ–¥ –®—ë–ª–∫–∞", callback_data='city_silk')])
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await _edit_or_send_message(query, text, reply_markup)

async def show_silk_create_plantation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞–Ω—Ç–∞—Ü–∏–∏."""
    query = update.callback_query
    await query.answer()

    user = query.from_user
    player = db.get_or_create_player(user.id, user.username or user.first_name)
    is_vip = db.is_vip(user.id)
    
    text = f"{SILK_EMOJIS['investment']} **–°–û–ó–î–ê–ù–ò–ï –ü–õ–ê–ù–¢–ê–¶–ò–ò**\n\n"
    text += f"–î–æ—Å—Ç—É–ø–Ω–æ —Å–µ–ø—Ç–∏–º–æ–≤: **{player.coins:,}**\n"
    if is_vip:
        text += "üî• VIP –±–æ–Ω—É—Å—ã: +20% —É—Ä–æ–∂–∞–π, +10% –∫–∞—á–µ—Å—Ç–≤–æ, -10% –≤—Ä–µ–º—è —Ä–æ—Å—Ç–∞\n"
    text += "\n–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π:\n\n"
    
    keyboard = []
    
    for level, config in SILK_INVESTMENT_LEVELS.items():
        cost = config['cost']
        trees = config['trees']
        grow_time_hours = config['grow_time'] // 3600
        
        # –ü—Ä–∏–º–µ–Ω–∏—Ç—å VIP –±–æ–Ω—É—Å –∫ –≤—Ä–µ–º–µ–Ω–∏
        if is_vip:
            grow_time_hours = int(grow_time_hours * 0.9)
        
        min_yield = config['min_yield']
        max_yield = config['max_yield']
        
        # –ü—Ä–∏–º–µ–Ω–∏—Ç—å VIP –±–æ–Ω—É—Å –∫ —É—Ä–æ–∂–∞—é
        if is_vip:
            min_yield = int(min_yield * 1.2)
            max_yield = int(max_yield * 1.2)
        
        affordable = "‚úÖ" if player.coins >= cost else "‚ùå"
        
        text += (
            f"**{level.title()}** {affordable}\n"
            f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {cost:,} —Å–µ–ø—Ç–∏–º–æ–≤\n"
            f"üå≥ –î–µ—Ä–µ–≤—å–µ–≤: {trees}\n"
            f"‚è±Ô∏è –í—Ä–µ–º—è —Ä–æ—Å—Ç–∞: {grow_time_hours} —á–∞—Å–æ–≤\n"
            f"üìà –û–∂–∏–¥–∞–µ–º—ã–π –¥–æ—Ö–æ–¥: {min_yield:,}-{max_yield:,}\n\n"
        )
        
        if player.coins >= cost:
            keyboard.append([
                InlineKeyboardButton(
                    f"–°–æ–∑–¥–∞—Ç—å {level.title()} ({cost:,} ü™ô)",
                    callback_data=f'silk_plant_{level}'
                )
            ])
    
    keyboard.append([InlineKeyboardButton("üîô –ú–æ–∏ –ø–ª–∞–Ω—Ç–∞—Ü–∏–∏", callback_data='silk_plantations')])
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await _edit_or_send_message(query, text, reply_markup)

async def show_silk_market(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —à—ë–ª–∫–æ–≤—ã–π —Ä—ã–Ω–æ–∫."""
    query = update.callback_query
    await query.answer()

    user = query.from_user
    current_prices = silk_city.get_current_silk_prices()
    silk_inventory = silk_city.get_silk_inventory(user.id)
    
    text = f"{SILK_EMOJIS['market']} **–®–Å–õ–ö–û–í–´–ô –†–´–ù–û–ö**\n\n"
    text += "üìä **–¢–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã:**\n"
    
    for silk_type, price in current_prices.items():
        config = SILK_TYPES[silk_type]
        emoji = config['emoji']
        name = config['name']
        text += f"{emoji} {name}: **{price}** ü™ô/—à—Ç\n"
    
    text += "\nüíº **–í–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å:**\n"
    
    keyboard = []
    
    if silk_inventory:
        for item in silk_inventory:
            config = SILK_TYPES[item.silk_type]
            emoji = config['emoji']
            name = config['name']
            price = current_prices[item.silk_type]
            total_value = price * item.quantity
            
            text += f"{emoji} {name}: {item.quantity} —à—Ç. (—Å—Ç–æ–∏–º–æ—Å—Ç—å: {total_value:,} ü™ô)\n"
            
            # –ö–Ω–æ–ø–∫–∏ –ø—Ä–æ–¥–∞–∂–∏
            if item.quantity >= 1:
                keyboard.append([
                    InlineKeyboardButton(
                        f"–ü—Ä–æ–¥–∞—Ç—å 1 {emoji} (+{price} ü™ô)",
                        callback_data=f'silk_sell_{item.silk_type}_1'
                    )
                ])
            
            if item.quantity >= 5:
                earn_5 = price * 5
                keyboard.append([
                    InlineKeyboardButton(
                        f"–ü—Ä–æ–¥–∞—Ç—å 5 {emoji} (+{earn_5} ü™ô)",
                        callback_data=f'silk_sell_{item.silk_type}_5'
                    )
                ])
            
            if item.quantity >= 10:
                earn_all = price * item.quantity
                keyboard.append([
                    InlineKeyboardButton(
                        f"–ü—Ä–æ–¥–∞—Ç—å –≤—Å—ë {emoji} (+{earn_all} ü™ô)",
                        callback_data=f'silk_sell_{item.silk_type}_all'
                    )
                ])
    else:
        text += "–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É—Å—Ç. –°–æ–±–µ—Ä–∏—Ç–µ —É—Ä–æ–∂–∞–π —Å –ø–ª–∞–Ω—Ç–∞—Ü–∏–π!"
    
    keyboard.append([InlineKeyboardButton("üîô –ì–æ—Ä–æ–¥ –®—ë–ª–∫–∞", callback_data='city_silk')])
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await _edit_or_send_message(query, text, reply_markup)

async def show_silk_inventory(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å —à—ë–ª–∫–∞."""
    query = update.callback_query
    await query.answer()

    user = query.from_user
    silk_inventory = silk_city.get_silk_inventory(user.id)
    
    text = f"{SILK_EMOJIS['inventory']} **–ò–ù–í–ï–ù–¢–ê–†–¨ –®–Å–õ–ö–ê**\n\n"
    
    if not silk_inventory:
        text += "–í–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å —à—ë–ª–∫–∞ –ø—É—Å—Ç.\n–°–æ–±–µ—Ä–∏—Ç–µ —É—Ä–æ–∂–∞–π —Å –ø–ª–∞–Ω—Ç–∞—Ü–∏–π –∏–ª–∏ –∫—É–ø–∏—Ç–µ —à—ë–ª–∫ –Ω–∞ —Ä—ã–Ω–∫–µ!"
    else:
        total_items = sum(item.quantity for item in silk_inventory)
        text += f"–í—Å–µ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤: **{total_items}**\n\n"
        
        for item in silk_inventory:
            config = SILK_TYPES[item.silk_type]
            emoji = config['emoji']
            name = config['name']
            quality = _get_quality_description(item.quality_grade)
            
            text += (
                f"{emoji} **{name}**\n"
                f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {item.quantity} —à—Ç.\n"
                f"   –ö–∞—á–µ—Å—Ç–≤–æ: {quality}\n"
                f"   –ü—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–æ: {_format_date(item.produced_at)}\n\n"
            )
    
    keyboard = [
        [InlineKeyboardButton("üîô –ì–æ—Ä–æ–¥ –®—ë–ª–∫–∞", callback_data='city_silk')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await _edit_or_send_message(query, text, reply_markup)

async def show_silk_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ì–æ—Ä–æ–¥–∞ –®—ë–ª–∫–∞."""
    query = update.callback_query
    await query.answer()

    user = query.from_user
    stats = silk_city.get_silk_city_stats(user.id)
    
    text = f"{SILK_EMOJIS['stats']} **–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ì–û–†–û–î–ê –®–Å–õ–ö–ê**\n\n"
    
    if not stats:
        text += "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—É—Å—Ç–∞. –ù–∞—á–Ω–∏—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø–ª–∞–Ω—Ç–∞—Ü–∏–∏!"
    else:
        text += (
            f"üå± **–ü–ª–∞–Ω—Ç–∞—Ü–∏–∏:**\n"
            f"   –ê–∫—Ç–∏–≤–Ω—ã—Ö: {stats.get('active_plantations', 0)}\n"
            f"   –ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö: {stats.get('completed_plantations', 0)}\n"
            f"   –ò–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ: {stats.get('total_invested', 0):,} ü™ô\n\n"
            
            f"üßµ **–®—ë–ª–∫ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ:**\n"
            f"   –í—Å–µ–≥–æ –µ–¥–∏–Ω–∏—Ü: {stats.get('total_silk', 0)}\n"
        )
        
        silk_by_type = stats.get('silk_by_type', {})
        for silk_type, quantity in silk_by_type.items():
            if quantity > 0:
                config = SILK_TYPES[silk_type]
                emoji = config['emoji']
                name = config['name']
                text += f"   {emoji} {name}: {quantity}\n"
        
        text += (
            f"\nüí∞ **–¢–æ—Ä–≥–æ–≤–ª—è:**\n"
            f"   –ü—Ä–æ–¥–∞–∂: {stats.get('total_sales', 0)}\n"
            f"   –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {stats.get('total_earnings', 0):,} ü™ô\n"
            f"   –ü—Ä–∏–±—ã–ª—å: {stats.get('profit', 0):,} ü™ô\n"
        )
    
    keyboard = [
        [InlineKeyboardButton("üîô –ì–æ—Ä–æ–¥ –®—ë–ª–∫–∞", callback_data='city_silk')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await _edit_or_send_message(query, text, reply_markup)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π ---

async def handle_silk_plant(update: Update, context: ContextTypes.DEFAULT_TYPE, level: str):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞–Ω—Ç–∞—Ü–∏–∏."""
    query = update.callback_query
    user = query.from_user
    
    result = silk_city.create_plantation(
        user.id, 
        user.username or user.first_name, 
        level
    )
    
    if result["ok"]:
        expected_yield = result["expected_yield"]
        coins_left = result["coins_left"]
        harvest_time_hours = result["harvest_time"] // 3600
        
        await query.answer(
            f"–ü–ª–∞–Ω—Ç–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞! –û–∂–∏–¥–∞–µ–º—ã–π –¥–æ—Ö–æ–¥: {expected_yield:,} ü™ô. "
            f"–ì–æ—Ç–æ–≤–∞ —á–µ—Ä–µ–∑ {harvest_time_hours} —á. –ë–∞–ª–∞–Ω—Å: {coins_left:,}",
            show_alert=True
        )
    else:
        reason = result.get("reason")
        if reason == "insufficient_coins":
            required = result.get("required", 0)
            available = result.get("available", 0)
            await query.answer(
                f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–µ–ø—Ç–∏–º–æ–≤. –ù—É–∂–Ω–æ: {required:,}, –¥–æ—Å—Ç—É–ø–Ω–æ: {available:,}",
                show_alert=True
            )
        elif reason == "max_plantations":
            await query.answer(
                f"–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –ø–ª–∞–Ω—Ç–∞—Ü–∏–π ({SILK_MAX_PLANTATIONS}). –ó–∞–≤–µ—Ä—à–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ.",
                show_alert=True
            )
        else:
            await query.answer("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞–Ω—Ç–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)
    
    # –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É –ø–ª–∞–Ω—Ç–∞—Ü–∏–π
    await show_silk_plantations(update, context)

async def handle_silk_harvest(update: Update, context: ContextTypes.DEFAULT_TYPE, plantation_id: int):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–±–æ—Ä —É—Ä–æ–∂–∞—è."""
    query = update.callback_query
    user = query.from_user
    
    result = silk_city.harvest_plantation(user.id, plantation_id)
    
    if result["ok"]:
        silk_gained = result["silk_gained"]
        coins_gained = result["coins_gained"]
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–ª—É—á–µ–Ω–Ω–æ–º —à—ë–ª–∫–µ
        silk_text = []
        for silk_type, quantity in silk_gained.items():
            if quantity > 0:
                config = SILK_TYPES[silk_type]
                emoji = config['emoji']
                name = config['name']
                silk_text.append(f"{emoji} {name}: {quantity}")
        
        silk_summary = ", ".join(silk_text) if silk_text else "—à—ë–ª–∫–∞ –Ω–µ—Ç"
        
        await query.answer(
            f"–£—Ä–æ–∂–∞–π —Å–æ–±—Ä–∞–Ω! –ü–æ–ª—É—á–µ–Ω–æ: {silk_summary}. –ë–æ–Ω—É—Å: +{coins_gained} ü™ô",
            show_alert=True
        )
    else:
        reason = result.get("reason")
        if reason == "not_ready":
            await query.answer("–£—Ä–æ–∂–∞–π –µ—â—ë –Ω–µ –≥–æ—Ç–æ–≤!", show_alert=True)
        elif reason == "plantation_not_found":
            await query.answer("–ü–ª–∞–Ω—Ç–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
        else:
            await query.answer("–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ —É—Ä–æ–∂–∞—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)
    
    # –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É –ø–ª–∞–Ω—Ç–∞—Ü–∏–π
    await show_silk_plantations(update, context)

async def handle_silk_sell(update: Update, context: ContextTypes.DEFAULT_TYPE, silk_type: str, quantity_str: str):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø—Ä–æ–¥–∞–∂—É —à—ë–ª–∫–∞."""
    query = update.callback_query
    user = query.from_user
    
    # –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    if quantity_str == "all":
        # –ü–æ–ª—É—á–∏—Ç—å –≤–µ—Å—å –¥–æ—Å—Ç—É–ø–Ω—ã–π —à—ë–ª–∫ —ç—Ç–æ–≥–æ —Ç–∏–ø–∞
        silk_inventory = silk_city.get_silk_inventory(user.id)
        item = next((item for item in silk_inventory if item.silk_type == silk_type), None)
        if not item:
            await query.answer("–®—ë–ª–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ.", show_alert=True)
            return
        quantity = item.quantity
    else:
        try:
            quantity = int(quantity_str)
        except ValueError:
            await query.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ.", show_alert=True)
            return
    
    result = silk_city.sell_silk_to_npc(user.id, silk_type, quantity)
    
    if result["ok"]:
        coins_earned = result["coins_earned"]
        price_per_unit = result["price_per_unit"]
        
        config = SILK_TYPES[silk_type]
        emoji = config['emoji']
        name = config['name']
        
        await query.answer(
            f"–ü—Ä–æ–¥–∞–Ω–æ: {quantity} {emoji} {name} –∑–∞ {coins_earned:,} ü™ô "
            f"({price_per_unit} ü™ô/—à—Ç)",
            show_alert=True
        )
    else:
        reason = result.get("reason")
        if reason == "insufficient_silk":
            await query.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —à—ë–ª–∫–∞ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ.", show_alert=True)
        else:
            await query.answer("–û—à–∏–±–∫–∞ –ø—Ä–æ–¥–∞–∂–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)
    
    # –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ä—ã–Ω–∫—É
    await show_silk_market(update, context)

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---

async def _edit_or_send_message(query, text: str, reply_markup: InlineKeyboardMarkup):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è."""
    message = query.message
    
    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –º–µ–¥–∏–∞, —É–¥–∞–ª—è–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
    if getattr(message, 'photo', None) or getattr(message, 'document', None) or getattr(message, 'video', None):
        try:
            await message.delete()
        except BadRequest:
            pass
        await query.bot.send_message(
            chat_id=message.chat_id,
            text=text,
            reply_markup=reply_markup,
            parse_mode='HTML'
        )
    else:
        try:
            await query.edit_message_text(
                text,
                reply_markup=reply_markup,
                parse_mode='HTML'
            )
        except BadRequest:
            await query.bot.send_message(
                chat_id=message.chat_id,
                text=text,
                reply_markup=reply_markup,
                parse_mode='HTML'
            )

def _get_status_emoji(status: str) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å —ç–º–æ–¥–∑–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞–Ω—Ç–∞—Ü–∏–∏."""
    status_emojis = {
        'growing': SILK_EMOJIS['growing'],
        'ready': SILK_EMOJIS['ready'],
        'harvesting': 'üîÑ',
        'completed': '‚úÖ'
    }
    return status_emojis.get(status, '‚ùì')

def _get_status_text(status: str) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞–Ω—Ç–∞—Ü–∏–∏."""
    status_texts = {
        'growing': '–†–∞—Å—Ç—ë—Ç',
        'ready': '–ì–æ—Ç–æ–≤ –∫ —Å–±–æ—Ä—É',
        'harvesting': '–°–±–æ—Ä —É—Ä–æ–∂–∞—è',
        'completed': '–ó–∞–≤–µ—Ä—à—ë–Ω'
    }
    return status_texts.get(status, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')

def _get_progress_bar(plantation) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –¥–ª—è –ø–ª–∞–Ω—Ç–∞—Ü–∏–∏."""
    progress = silk_city.calculate_plantation_progress(plantation)
    filled_blocks = progress // 10
    empty_blocks = 10 - filled_blocks
    
    bar = '‚ñà' * filled_blocks + '‚ñë' * empty_blocks
    return f"üîÑ –ü—Ä–æ–≥—Ä–µ—Å—Å: {bar} {progress}%"

def _get_quality_description(quality_grade: int) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ —à—ë–ª–∫–∞."""
    if quality_grade >= 400:
        return "üèÜ –ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–æ–µ"
    elif quality_grade >= 350:
        return "üíé –û—Ç–ª–∏—á–Ω–æ–µ"
    elif quality_grade >= 300:
        return "‚≠ê –•–æ—Ä–æ—à–µ–µ"
    elif quality_grade >= 250:
        return "‚úÖ –°—Ä–µ–¥–Ω–µ–µ"
    else:
        return "‚ö†Ô∏è –ù–∏–∑–∫–æ–µ"

def _format_date(timestamp: int) -> str:
    """–û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞—Ç—É."""
    try:
        return time.strftime('%d.%m.%Y %H:%M', time.localtime(timestamp))
    except:
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"