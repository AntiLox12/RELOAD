# file: test_silk_city.py
"""
–ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –ì–æ—Ä–æ–¥ –®—ë–ª–∫–∞.
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞–Ω—Ç–∞—Ü–∏–π, —Å–±–æ—Ä–∞ —É—Ä–æ–∂–∞—è –∏ —Ç–æ—Ä–≥–æ–≤–ª–∏.
"""

import time
import random
import sqlite3
import os
from constants import SILK_INVESTMENT_LEVELS, SILK_TYPES

def test_basic_silk_functionality():
    """–û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã —à—ë–ª–∫–∞."""
    print("üßµ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –ì–æ—Ä–æ–¥ –®—ë–ª–∫–∞...")
    
    # –£–¥–∞–ª–∏–º —Ç–µ—Å—Ç–æ–≤—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    test_db = "test_silk_city.db"
    if os.path.exists(test_db):
        os.remove(test_db)
    
    # –°–æ–∑–¥–∞—ë–º —Ç–µ—Å—Ç–æ–≤—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    conn = sqlite3.connect(test_db)
    cursor = conn.cursor()
    
    # –°–æ–∑–¥–∞—ë–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ç–∞–±–ª–∏—Ü—ã
    cursor.execute("""
        CREATE TABLE players (
            user_id INTEGER PRIMARY KEY,
            username TEXT,
            coins INTEGER DEFAULT 0
        )
    """)
    
    cursor.execute("""
        CREATE TABLE silk_plantations (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            player_id INTEGER,
            plantation_name TEXT,
            silk_trees_count INTEGER DEFAULT 0,
            planted_at INTEGER DEFAULT 0,
            harvest_ready_at INTEGER DEFAULT 0,
            status TEXT DEFAULT 'growing',
            investment_cost INTEGER DEFAULT 0,
            expected_yield INTEGER DEFAULT 0,
            investment_level TEXT DEFAULT 'starter',
            quality_modifier INTEGER DEFAULT 100,
            weather_modifier INTEGER DEFAULT 100
        )
    """)
    
    cursor.execute("""
        CREATE TABLE silk_inventory (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            player_id INTEGER,
            silk_type TEXT,
            quantity INTEGER DEFAULT 0,
            quality_grade INTEGER DEFAULT 300,
            produced_at INTEGER DEFAULT 0
        )
    """)
    
    cursor.execute("""
        CREATE TABLE silk_transactions (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            seller_id INTEGER,
            buyer_id INTEGER,
            transaction_type TEXT,
            silk_type TEXT,
            amount INTEGER DEFAULT 0,
            price_per_unit INTEGER DEFAULT 0,
            total_price INTEGER DEFAULT 0,
            created_at INTEGER DEFAULT 0
        )
    """)
    
    # –¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä–æ–∫–∞ —Å –Ω–∞—á–∞–ª—å–Ω—ã–º–∏ –º–æ–Ω–µ—Ç–∞–º–∏
    test_user_id = 12345
    initial_coins = 100000
    
    cursor.execute(
        "INSERT INTO players (user_id, username, coins) VALUES (?, ?, ?)",
        (test_user_id, "test_user", initial_coins)
    )
    conn.commit()
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –∏–≥—Ä–æ–∫ —Å {initial_coins:,} –º–æ–Ω–µ—Ç")
    
    # –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Ä–æ–≤–Ω–µ–π –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π
    print(f"‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ {len(SILK_INVESTMENT_LEVELS)} —É—Ä–æ–≤–Ω–µ–π –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π:")
    for level, config in SILK_INVESTMENT_LEVELS.items():
        print(f"   ‚Ä¢ {level}: {config['cost']:,} —Å–µ–ø—Ç–∏–º–æ–≤, {config['trees']} –¥–µ—Ä–µ–≤—å–µ–≤")
    
    # –¢–µ—Å—Ç 3: –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞–Ω—Ç–∞—Ü–∏–∏
    level = 'starter'
    config = SILK_INVESTMENT_LEVELS[level]
    current_time = int(time.time())
    
    cursor.execute("""
        INSERT INTO silk_plantations (
            player_id, plantation_name, silk_trees_count, planted_at,
            harvest_ready_at, investment_cost, expected_yield, investment_level
        ) VALUES (?, ?, ?, ?, ?, ?, ?, ?)
    """, (
        test_user_id, "–¢–µ—Å—Ç–æ–≤–∞—è –ø–ª–∞–Ω—Ç–∞—Ü–∏—è", config['trees'], current_time,
        current_time + 10,  # –ì–æ—Ç–æ–≤ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥ –¥–ª—è —Ç–µ—Å—Ç–∞
        config['cost'], random.randint(config['min_yield'], config['max_yield']), level
    ))
    
    # –°–ø–∏—Å—ã–≤–∞–µ–º –º–æ–Ω–µ—Ç—ã
    cursor.execute(
        "UPDATE players SET coins = coins - ? WHERE user_id = ?",
        (config['cost'], test_user_id)
    )
    conn.commit()
    
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –ø–ª–∞–Ω—Ç–∞—Ü–∏—è —É—Ä–æ–≤–Ω—è '{level}' –∑–∞ {config['cost']:,} —Å–µ–ø—Ç–∏–º–æ–≤")
    
    # –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤ —à—ë–ª–∫–∞
    print(f"‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ {len(SILK_TYPES)} —Ç–∏–ø–æ–≤ —à—ë–ª–∫–∞:")
    for silk_type, config in SILK_TYPES.items():
        print(f"   ‚Ä¢ {silk_type}: {config['name']} {config['emoji']} ({config['probability']}%)")
    
    # –¢–µ—Å—Ç 5: –°–∏–º—É–ª—è—Ü–∏—è —Å–±–æ—Ä–∞ —É—Ä–æ–∂–∞—è
    print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —É—Ä–æ–∂–∞—è...")
    time.sleep(11)  # –ñ–¥—ë–º –±–æ–ª—å—à–µ 10 —Å–µ–∫—É–Ω–¥
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞–Ω—Ç–∞—Ü–∏–∏
    cursor.execute(
        "UPDATE silk_plantations SET status = 'ready' WHERE player_id = ? AND harvest_ready_at <= ?",
        (test_user_id, int(time.time()))
    )
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º —Å–±–æ—Ä —É—Ä–æ–∂–∞—è
    cursor.execute(
        "SELECT * FROM silk_plantations WHERE player_id = ? AND status = 'ready'",
        (test_user_id,)
    )
    ready_plantation = cursor.fetchone()
    
    if ready_plantation:
        plantation_id, player_id, name, trees, planted_at, ready_at, status, cost, expected_yield = ready_plantation[:9]
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —É—Ä–æ–∂–∞–π —à—ë–ª–∫–∞
        silk_harvest = {}
        total_yield = expected_yield
        
        for silk_type, config in SILK_TYPES.items():
            probability = config['probability'] / 100.0
            type_yield = int(total_yield * probability * random.uniform(0.8, 1.2))
            if type_yield > 0:
                silk_harvest[silk_type] = type_yield
        
        # –î–æ–±–∞–≤–ª—è–µ–º —à—ë–ª–∫ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
        for silk_type, quantity in silk_harvest.items():
            cursor.execute("""
                INSERT INTO silk_inventory (player_id, silk_type, quantity, produced_at)
                VALUES (?, ?, ?, ?)
            """, (test_user_id, silk_type, quantity, int(time.time())))
        
        # –ü–æ–º–µ—á–∞–µ–º –ø–ª–∞–Ω—Ç–∞—Ü–∏—é –∫–∞–∫ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—É—é
        cursor.execute(
            "UPDATE silk_plantations SET status = 'completed' WHERE id = ?",
            (plantation_id,)
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –±–æ–Ω—É—Å–Ω—ã–µ –º–æ–Ω–µ—Ç—ã
        bonus_coins = random.randint(50, 150)
        cursor.execute(
            "UPDATE players SET coins = coins + ? WHERE user_id = ?",
            (bonus_coins, test_user_id)
        )
        
        conn.commit()
        
        print(f"‚úÖ –£—Ä–æ–∂–∞–π —Å–æ–±—Ä–∞–Ω! –ü–æ–ª—É—á–µ–Ω–æ:")
        for silk_type, quantity in silk_harvest.items():
            config = SILK_TYPES[silk_type]
            print(f"   ‚Ä¢ {quantity} {config['emoji']} {config['name']}")
        print(f"   ‚Ä¢ –ë–æ–Ω—É—Å: +{bonus_coins} –º–æ–Ω–µ—Ç")
    
    # –¢–µ—Å—Ç 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
    cursor.execute(
        "SELECT silk_type, quantity FROM silk_inventory WHERE player_id = ?",
        (test_user_id,)
    )
    inventory = cursor.fetchall()
    
    print("üì¶ –ò—Ç–æ–≥–æ–≤—ã–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å —à—ë–ª–∫–∞:")
    for silk_type, quantity in inventory:
        config = SILK_TYPES[silk_type]
        print(f"   ‚Ä¢ {quantity} {config['emoji']} {config['name']}")
    
    # –¢–µ—Å—Ç 7: –°–∏–º—É–ª—è—Ü–∏—è –ø—Ä–æ–¥–∞–∂–∏
    if inventory:
        silk_type, quantity = inventory[0]
        sell_quantity = min(5, quantity)
        base_price = SILK_TYPES[silk_type]['base_price']
        sale_price = random.randint(base_price - 5, base_price + 5)
        total_earnings = sale_price * sell_quantity
        
        # –£–±–∏—Ä–∞–µ–º —à—ë–ª–∫ –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
        cursor.execute(
            "UPDATE silk_inventory SET quantity = quantity - ? WHERE player_id = ? AND silk_type = ?",
            (sell_quantity, test_user_id, silk_type)
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –º–æ–Ω–µ—Ç—ã
        cursor.execute(
            "UPDATE players SET coins = coins + ? WHERE user_id = ?",
            (total_earnings, test_user_id)
        )
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        cursor.execute("""
            INSERT INTO silk_transactions (
                seller_id, transaction_type, silk_type, amount, price_per_unit, total_price, created_at
            ) VALUES (?, ?, ?, ?, ?, ?, ?)
        """, (test_user_id, 'npc_sale', silk_type, sell_quantity, sale_price, total_earnings, int(time.time())))
        
        conn.commit()
        
        config = SILK_TYPES[silk_type]
        print(f"üí∞ –ü—Ä–æ–¥–∞–Ω–æ: {sell_quantity} {config['emoji']} {config['name']} –∑–∞ {total_earnings:,} –º–æ–Ω–µ—Ç")
    
    # –¢–µ—Å—Ç 8: –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    cursor.execute("SELECT coins FROM players WHERE user_id = ?", (test_user_id,))
    final_coins = cursor.fetchone()[0]
    
    cursor.execute("SELECT COUNT(*) FROM silk_plantations WHERE player_id = ?", (test_user_id,))
    total_plantations = cursor.fetchone()[0]
    
    cursor.execute("SELECT COUNT(*) FROM silk_transactions WHERE seller_id = ?", (test_user_id,))
    total_sales = cursor.fetchone()[0]
    
    profit = final_coins - initial_coins
    
    print(f"\nüìä –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"   üí∞ –ù–∞—á–∞–ª—å–Ω—ã–µ –º–æ–Ω–µ—Ç—ã: {initial_coins:,}")
    print(f"   üí∞ –ò—Ç–æ–≥–æ–≤—ã–µ –º–æ–Ω–µ—Ç—ã: {final_coins:,}")
    print(f"   üìà –ü—Ä–∏–±—ã–ª—å: {profit:,}")
    print(f"   üå≥ –°–æ–∑–¥–∞–Ω–æ –ø–ª–∞–Ω—Ç–∞—Ü–∏–π: {total_plantations}")
    print(f"   üõí –°–æ–≤–µ—Ä—à–µ–Ω–æ –ø—Ä–æ–¥–∞–∂: {total_sales}")
    
    # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ —É–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –±–∞–∑—É
    conn.close()
    os.remove(test_db)
    
    print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã —Å–∏—Å—Ç–µ–º—ã –ì–æ—Ä–æ–¥ –®—ë–ª–∫–∞ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
    return True

def test_silk_constants():
    """–¢–µ—Å—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç —Å–∏—Å—Ç–µ–º—ã —à—ë–ª–∫–∞."""
    print("\nüîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç —Å–∏—Å—Ç–µ–º—ã —à—ë–ª–∫–∞...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Ä–æ–≤–Ω–∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π
    assert len(SILK_INVESTMENT_LEVELS) == 4, "–î–æ–ª–∂–Ω–æ –±—ã—Ç—å 4 —É—Ä–æ–≤–Ω—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π"
    for level, config in SILK_INVESTMENT_LEVELS.items():
        assert 'cost' in config, f"–£—Ä–æ–≤–µ–Ω—å {level} –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å"
        assert 'trees' in config, f"–£—Ä–æ–≤–µ–Ω—å {level} –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ä–µ–≤—å–µ–≤"
        assert 'grow_time' in config, f"–£—Ä–æ–≤–µ–Ω—å {level} –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –≤—Ä–µ–º—è —Ä–æ—Å—Ç–∞"
        assert 'min_yield' in config, f"–£—Ä–æ–≤–µ–Ω—å {level} –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–∂–∞–π"
        assert 'max_yield' in config, f"–£—Ä–æ–≤–µ–Ω—å {level} –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–∂–∞–π"
        assert config['min_yield'] <= config['max_yield'], f"–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–∂–∞–π –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –≤ {level}"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã —à—ë–ª–∫–∞
    assert len(SILK_TYPES) == 3, "–î–æ–ª–∂–Ω–æ –±—ã—Ç—å 3 —Ç–∏–ø–∞ —à—ë–ª–∫–∞"
    total_probability = sum(config['probability'] for config in SILK_TYPES.values())
    assert total_probability == 100, f"–û–±—â–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å 100%, –ø–æ–ª—É—á–µ–Ω–æ {total_probability}%"
    
    for silk_type, config in SILK_TYPES.items():
        assert 'name' in config, f"–¢–∏–ø —à—ë–ª–∫–∞ {silk_type} –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ"
        assert 'emoji' in config, f"–¢–∏–ø —à—ë–ª–∫–∞ {silk_type} –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å —ç–º–æ–¥–∑–∏"
        assert 'base_price' in config, f"–¢–∏–ø —à—ë–ª–∫–∞ {silk_type} –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –±–∞–∑–æ–≤—É—é —Ü–µ–Ω—É"
        assert 'probability' in config, f"–¢–∏–ø —à—ë–ª–∫–∞ {silk_type} –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å"
        assert 0 < config['probability'] <= 100, f"–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å {silk_type} –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 1 –¥–æ 100"
    
    print("‚úÖ –í—Å–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã!")
    return True

if __name__ == "__main__":
    try:
        test_silk_constants()
        test_basic_silk_functionality()
        print("\nüöÄ –°–∏—Å—Ç–µ–º–∞ –ì–æ—Ä–æ–¥ –®—ë–ª–∫–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö: {e}")
        import traceback
        traceback.print_exc()