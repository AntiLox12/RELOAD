# file: vip_plus_handlers.py
"""
VIP+ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –±–æ—Ç–∞ RELOAD.
–°–æ–¥–µ—Ä–∂–∏—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–∫–∞–∑–∞ –º–µ–Ω—é VIP+ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–∫—É–ø–æ–∫.
"""

import time
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.error import BadRequest
from telegram.ext import ContextTypes
import database as db
from constants import VIP_PLUS_EMOJI, VIP_PLUS_COSTS, VIP_PLUS_DURATIONS_SEC

# –¢–µ–∫—Å—Ç–æ–≤—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è VIP+
VIP_PLUS_TEXTS = {
    'vip_plus_title': {
        'ru': '–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ V.I.P+:\n\n–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:\n‚Ä¢ üíé –ó–Ω–∞—á–æ–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ –ª–∏–¥–µ—Ä–æ–≤\n‚Ä¢ ‚è± –ö—É–ª–¥–∞—É–Ω –ø–æ–∏—Å–∫–∞ ‚Äî x0.25 (–≤ 4 —Ä–∞–∑–∞ –±—ã—Å—Ç—Ä–µ–µ!)\n‚Ä¢ üéÅ –ö—É–ª–¥–∞—É–Ω –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞ ‚Äî x0.25 (–≤ 4 —Ä–∞–∑–∞ –±—ã—Å—Ç—Ä–µ–µ!)\n‚Ä¢ üí∞ –ù–∞–≥—Ä–∞–¥–∞ –º–æ–Ω–µ—Ç –∑–∞ –ø–æ–∏—Å–∫ ‚Äî x2\n‚Ä¢ üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø–æ–∏—Å–∫–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ —Å–æ–∫—Ä–∞—â—ë–Ω–Ω–æ–º—É –ö–î\n‚Ä¢ üöÄ –ê–≤—Ç–æ–ø–æ–∏—Å–∫ –≤ 2 —Ä–∞–∑–∞ –±–æ–ª—å—à–µ (120 –≤ –¥–µ–Ω—å)',
        'en': 'Choose V.I.P+ duration:\n\nPerks:\n‚Ä¢ üíé Badge in the leaderboard\n‚Ä¢ ‚è± Search cooldown ‚Äî x0.25 (4x faster!)\n‚Ä¢ üéÅ Daily bonus cooldown ‚Äî x0.25 (4x faster!)\n‚Ä¢ üí∞ Coin reward from search ‚Äî x2\n‚Ä¢ üîî Search reminder respects reduced cooldown\n‚Ä¢ üöÄ Auto-search 2x more (120 per day)'
    },
    'vip_plus_1d': {'ru': '1 –î–µ–Ω—å', 'en': '1 Day'},
    'vip_plus_7d': {'ru': '7 –¥–Ω–µ–π', 'en': '7 days'},
    'vip_plus_30d': {'ru': '30 –¥–Ω–µ–π', 'en': '30 days'},
    'vip_plus_details_1d': {
        'ru': '<b>V.I.P+ –Ω–∞ 1 –¥–µ–Ω—å</b>\n\n–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:\n‚Ä¢ üíé –ó–Ω–∞—á–æ–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ –ª–∏–¥–µ—Ä–æ–≤\n‚Ä¢ ‚è± –ö—É–ª–¥–∞—É–Ω –ø–æ–∏—Å–∫–∞ ‚Äî x0.25 (–≤ 4 —Ä–∞–∑–∞ –±—ã—Å—Ç—Ä–µ–µ!)\n‚Ä¢ üéÅ –ö—É–ª–¥–∞—É–Ω –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞ ‚Äî x0.25 (–≤ 4 —Ä–∞–∑–∞ –±—ã—Å—Ç—Ä–µ–µ!)\n‚Ä¢ üí∞ –ù–∞–≥—Ä–∞–¥–∞ –º–æ–Ω–µ—Ç –∑–∞ –ø–æ–∏—Å–∫ ‚Äî x2\n‚Ä¢ üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø–æ–∏—Å–∫–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ —Å–æ–∫—Ä–∞—â—ë–Ω–Ω–æ–º—É –ö–î\n‚Ä¢ üöÄ –ê–≤—Ç–æ–ø–æ–∏—Å–∫ –≤ 2 —Ä–∞–∑–∞ –±–æ–ª—å—à–µ (120 –≤ –¥–µ–Ω—å)\n',
        'en': '<b>V.I.P+ for 1 day</b>\n\nPerks:\n‚Ä¢ üíé Badge in the leaderboard\n‚Ä¢ ‚è± Search cooldown ‚Äî x0.25 (4x faster!)\n‚Ä¢ üéÅ Daily bonus cooldown ‚Äî x0.25 (4x faster!)\n‚Ä¢ üí∞ Coin reward from search ‚Äî x2\n‚Ä¢ üîî Search reminder respects reduced cooldown\n‚Ä¢ üöÄ Auto-search 2x more (120 per day)\n'
    },
    'vip_plus_details_7d': {
        'ru': '<b>V.I.P+ –Ω–∞ 7 –¥–Ω–µ–π</b>\n\n–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:\n‚Ä¢ üíé –ó–Ω–∞—á–æ–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ –ª–∏–¥–µ—Ä–æ–≤\n‚Ä¢ ‚è± –ö—É–ª–¥–∞—É–Ω –ø–æ–∏—Å–∫–∞ ‚Äî x0.25 (–≤ 4 —Ä–∞–∑–∞ –±—ã—Å—Ç—Ä–µ–µ!)\n‚Ä¢ üéÅ –ö—É–ª–¥–∞—É–Ω –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞ ‚Äî x0.25 (–≤ 4 —Ä–∞–∑–∞ –±—ã—Å—Ç—Ä–µ–µ!)\n‚Ä¢ üí∞ –ù–∞–≥—Ä–∞–¥–∞ –º–æ–Ω–µ—Ç –∑–∞ –ø–æ–∏—Å–∫ ‚Äî x2\n‚Ä¢ üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø–æ–∏—Å–∫–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ —Å–æ–∫—Ä–∞—â—ë–Ω–Ω–æ–º—É –ö–î\n‚Ä¢ üöÄ –ê–≤—Ç–æ–ø–æ–∏—Å–∫ –≤ 2 —Ä–∞–∑–∞ –±–æ–ª—å—à–µ (120 –≤ –¥–µ–Ω—å)\n',
        'en': '<b>V.I.P+ for 7 days</b>\n\nPerks:\n‚Ä¢ üíé Badge in the leaderboard\n‚Ä¢ ‚è± Search cooldown ‚Äî x0.25 (4x faster!)\n‚Ä¢ üéÅ Daily bonus cooldown ‚Äî x0.25 (4x faster!)\n‚Ä¢ üí∞ Coin reward from search ‚Äî x2\n‚Ä¢ üîî Search reminder respects reduced cooldown\n‚Ä¢ üöÄ Auto-search 2x more (120 per day)\n'
    },
    'vip_plus_details_30d': {
        'ru': '<b>V.I.P+ –Ω–∞ 30 –¥–Ω–µ–π</b>\n\n–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:\n‚Ä¢ üíé –ó–Ω–∞—á–æ–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ –ª–∏–¥–µ—Ä–æ–≤\n‚Ä¢ ‚è± –ö—É–ª–¥–∞—É–Ω –ø–æ–∏—Å–∫–∞ ‚Äî x0.25 (–≤ 4 —Ä–∞–∑–∞ –±—ã—Å—Ç—Ä–µ–µ!)\n‚Ä¢ üéÅ –ö—É–ª–¥–∞—É–Ω –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞ ‚Äî x0.25 (–≤ 4 —Ä–∞–∑–∞ –±—ã—Å—Ç—Ä–µ–µ!)\n‚Ä¢ üí∞ –ù–∞–≥—Ä–∞–¥–∞ –º–æ–Ω–µ—Ç –∑–∞ –ø–æ–∏—Å–∫ ‚Äî x2\n‚Ä¢ üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø–æ–∏—Å–∫–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ —Å–æ–∫—Ä–∞—â—ë–Ω–Ω–æ–º—É –ö–î\n‚Ä¢ üöÄ –ê–≤—Ç–æ–ø–æ–∏—Å–∫ –≤ 2 —Ä–∞–∑–∞ –±–æ–ª—å—à–µ (120 –≤ –¥–µ–Ω—å)\n',
        'en': '<b>V.I.P+ for 30 days</b>\n\nPerks:\n‚Ä¢ üíé Badge in the leaderboard\n‚Ä¢ ‚è± Search cooldown ‚Äî x0.25 (4x faster!)\n‚Ä¢ üéÅ Daily bonus cooldown ‚Äî x0.25 (4x faster!)\n‚Ä¢ üí∞ Coin reward from search ‚Äî x2\n‚Ä¢ üîî Search reminder respects reduced cooldown\n‚Ä¢ üöÄ Auto-search 2x more (120 per day)\n'
    },
    'vip_plus_buy': {'ru': '–ö—É–ø–∏—Ç—å', 'en': 'Buy'},
    'vip_plus_price': {'ru': '–¶–µ–Ω–∞: {cost} —Å–µ–ø—Ç–∏–º–æ–≤', 'en': 'Price: {cost} septims'},
    'vip_plus_until': {'ru': 'V.I.P+ –∞–∫—Ç–∏–≤–µ–Ω –¥–æ: {dt}', 'en': 'V.I.P+ active until: {dt}'},
    'vip_plus_not_enough': {'ru': '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç.', 'en': 'Not enough coins.'},
    'vip_plus_bought': {'ru': '–ü–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–∞! {emoji} –î–æ: {dt}\n–ë–∞–ª–∞–Ω—Å: {coins}', 'en': 'Purchased! {emoji} Until: {dt}\nBalance: {coins}'},
    'vip_plus_insufficient': {
        'ru': '‚ùó –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç: {coins}/{cost}',
        'en': '‚ùó Not enough coins: {coins}/{cost}'
    },
    'btn_back': {'ru': '–ù–∞–∑–∞–¥', 'en': 'Back'},
    'on': {'ru': '–í–∫–ª', 'en': 'On'},
    'off': {'ru': '–í—ã–∫–ª', 'en': 'Off'},
    'vip_auto_header': {'ru': '\n<b>ü§ñ –ê–≤—Ç–æ–ø–æ–∏—Å–∫</b>', 'en': '\n<b>ü§ñ Auto-search</b>'},
    'vip_auto_state': {'ru': '–°–æ—Å—Ç–æ—è–Ω–∏–µ: {state}', 'en': 'State: {state}'},
    'vip_auto_today': {'ru': '–°–µ–≥–æ–¥–Ω—è: {count}/{limit}', 'en': 'Today: {count}/{limit}'},
}

def vip_plus_t(lang: str, key: str) -> str:
    """–§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–ª—è VIP+ —Ç–µ–∫—Å—Ç–æ–≤."""
    return VIP_PLUS_TEXTS.get(key, {}).get(lang, VIP_PLUS_TEXTS.get(key, {}).get('ru', key))

async def show_vip_plus_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–¥–º–µ–Ω—é V.I.P+ —Å –≤—ã–±–æ—Ä–æ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏."""
    query = update.callback_query
    await query.answer()

    user = query.from_user
    player = db.get_or_create_player(user.id, user.username or user.first_name)
    lang = player.language

    text = vip_plus_t(lang, 'vip_plus_title')
    # –î–æ–±–∞–≤–∏–º –±–ª–æ–∫ –æ —Ç–µ–∫—É—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∞–≤—Ç–æ–ø–æ–∏—Å–∫–∞ VIP+
    try:
        auto_state = vip_plus_t(lang, 'on') if getattr(player, 'auto_search_enabled', False) else vip_plus_t(lang, 'off')
        auto_count = int(getattr(player, 'auto_search_count', 0) or 0)
        auto_limit = db.get_auto_search_daily_limit(user.id)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é —Å —É—á—ë—Ç–æ–º VIP+
        text += vip_plus_t(lang, 'vip_auto_header')
        text += "\n" + vip_plus_t(lang, 'vip_auto_state').format(state=auto_state)
        text += "\n" + vip_plus_t(lang, 'vip_auto_today').format(count=auto_count, limit=auto_limit)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å VIP+
        if db.is_vip_plus(user.id):
            vip_plus_until = db.get_vip_plus_until(user.id)
            until_str = time.strftime('%d.%m.%Y %H:%M', time.localtime(vip_plus_until)) if vip_plus_until else '‚Äî'
            text += f"\n\n{VIP_PLUS_EMOJI} VIP+ –¥–æ: {until_str}"
        else:
            text += f"\n\n{VIP_PLUS_EMOJI} VIP+: –Ω–µ—Ç"
    except Exception:
        pass
    
    keyboard = [
        [InlineKeyboardButton(vip_plus_t(lang, 'vip_plus_1d'), callback_data='vip_plus_1d')],
        [InlineKeyboardButton(vip_plus_t(lang, 'vip_plus_7d'), callback_data='vip_plus_7d')],
        [InlineKeyboardButton(vip_plus_t(lang, 'vip_plus_30d'), callback_data='vip_plus_30d')],
        [InlineKeyboardButton(vip_plus_t(lang, 'btn_back'), callback_data='extra_bonuses')],
        [InlineKeyboardButton("üîô –í –º–µ–Ω—é", callback_data='menu')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    message = query.message
    if getattr(message, 'photo', None) or getattr(message, 'document', None) or getattr(message, 'video', None):
        try:
            await message.delete()
        except BadRequest:
            pass
        await context.bot.send_message(chat_id=user.id, text=text, reply_markup=reply_markup, parse_mode='HTML')
    else:
        try:
            await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='HTML')
        except BadRequest:
            await context.bot.send_message(chat_id=user.id, text=text, reply_markup=reply_markup, parse_mode='HTML')

async def show_vip_plus_1d(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ VIP+ –Ω–∞ 1 –¥–µ–Ω—å."""
    query = update.callback_query
    await query.answer()

    user = query.from_user
    player = db.get_or_create_player(user.id, user.username or user.first_name)
    lang = player.language

    cost = VIP_PLUS_COSTS['1d']
    vip_plus_until = db.get_vip_plus_until(user.id)
    until_str = time.strftime('%d.%m.%Y %H:%M', time.localtime(vip_plus_until)) if vip_plus_until else None
    text = vip_plus_t(lang, 'vip_plus_details_1d')
    text += f"\n{vip_plus_t(lang, 'vip_plus_price').format(cost=cost)}"
    if until_str:
        text += f"\n{vip_plus_t(lang, 'vip_plus_until').format(dt=until_str)}"
    current_coins = int(player.coins or 0)
    if current_coins < cost:
        text += f"\n{vip_plus_t(lang, 'vip_plus_insufficient').format(coins=current_coins, cost=cost)}"
    
    keyboard = [
        [InlineKeyboardButton(f"{vip_plus_t(lang, 'vip_plus_buy')} ‚Äî {cost}", callback_data='buy_vip_plus_1d')],
        [InlineKeyboardButton(vip_plus_t(lang, 'btn_back'), callback_data='vip_plus_menu')],
        [InlineKeyboardButton("üîô –í –º–µ–Ω—é", callback_data='menu')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    message = query.message
    if getattr(message, 'photo', None) or getattr(message, 'document', None) or getattr(message, 'video', None):
        try:
            await message.delete()
        except BadRequest:
            pass
        await context.bot.send_message(chat_id=user.id, text=text, reply_markup=reply_markup, parse_mode='HTML')
    else:
        try:
            await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='HTML')
        except BadRequest:
            await context.bot.send_message(chat_id=user.id, text=text, reply_markup=reply_markup, parse_mode='HTML')

async def show_vip_plus_7d(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ VIP+ –Ω–∞ 7 –¥–Ω–µ–π."""
    query = update.callback_query
    await query.answer()

    user = query.from_user
    player = db.get_or_create_player(user.id, user.username or user.first_name)
    lang = player.language

    cost = VIP_PLUS_COSTS['7d']
    vip_plus_until = db.get_vip_plus_until(user.id)
    until_str = time.strftime('%d.%m.%Y %H:%M', time.localtime(vip_plus_until)) if vip_plus_until else None
    text = vip_plus_t(lang, 'vip_plus_details_7d')
    text += f"\n{vip_plus_t(lang, 'vip_plus_price').format(cost=cost)}"
    if until_str:
        text += f"\n{vip_plus_t(lang, 'vip_plus_until').format(dt=until_str)}"
    current_coins = int(player.coins or 0)
    if current_coins < cost:
        text += f"\n{vip_plus_t(lang, 'vip_plus_insufficient').format(coins=current_coins, cost=cost)}"
    
    keyboard = [
        [InlineKeyboardButton(f"{vip_plus_t(lang, 'vip_plus_buy')} ‚Äî {cost}", callback_data='buy_vip_plus_7d')],
        [InlineKeyboardButton(vip_plus_t(lang, 'btn_back'), callback_data='vip_plus_menu')],
        [InlineKeyboardButton("üîô –í –º–µ–Ω—é", callback_data='menu')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    message = query.message
    if getattr(message, 'photo', None) or getattr(message, 'document', None) or getattr(message, 'video', None):
        try:
            await message.delete()
        except BadRequest:
            pass
        await context.bot.send_message(chat_id=user.id, text=text, reply_markup=reply_markup, parse_mode='HTML')
    else:
        try:
            await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='HTML')
        except BadRequest:
            await context.bot.send_message(chat_id=user.id, text=text, reply_markup=reply_markup, parse_mode='HTML')

async def show_vip_plus_30d(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ VIP+ –Ω–∞ 30 –¥–Ω–µ–π."""
    query = update.callback_query
    await query.answer()

    user = query.from_user
    player = db.get_or_create_player(user.id, user.username or user.first_name)
    lang = player.language

    cost = VIP_PLUS_COSTS['30d']
    vip_plus_until = db.get_vip_plus_until(user.id)
    until_str = time.strftime('%d.%m.%Y %H:%M', time.localtime(vip_plus_until)) if vip_plus_until else None
    text = vip_plus_t(lang, 'vip_plus_details_30d')
    text += f"\n{vip_plus_t(lang, 'vip_plus_price').format(cost=cost)}"
    if until_str:
        text += f"\n{vip_plus_t(lang, 'vip_plus_until').format(dt=until_str)}"
    current_coins = int(player.coins or 0)
    if current_coins < cost:
        text += f"\n{vip_plus_t(lang, 'vip_plus_insufficient').format(coins=current_coins, cost=cost)}"
    
    keyboard = [
        [InlineKeyboardButton(f"{vip_plus_t(lang, 'vip_plus_buy')} ‚Äî {cost}", callback_data='buy_vip_plus_30d')],
        [InlineKeyboardButton(vip_plus_t(lang, 'btn_back'), callback_data='vip_plus_menu')],
        [InlineKeyboardButton("üîô –í –º–µ–Ω—é", callback_data='menu')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    message = query.message
    if getattr(message, 'photo', None) or getattr(message, 'document', None) or getattr(message, 'video', None):
        try:
            await message.delete()
        except BadRequest:
            pass
        await context.bot.send_message(chat_id=user.id, text=text, reply_markup=reply_markup, parse_mode='HTML')
    else:
        try:
            await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='HTML')
        except BadRequest:
            await context.bot.send_message(chat_id=user.id, text=text, reply_markup=reply_markup, parse_mode='HTML')

async def buy_vip_plus(update: Update, context: ContextTypes.DEFAULT_TYPE, plan_key: str):
    """–ü–æ–∫—É–ø–∫–∞ VIP+ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π —Å—Ä–æ–∫ (plan_key: '1d'|'7d'|'30d')."""
    query = update.callback_query
    await query.answer()

    user = query.from_user
    player = db.get_or_create_player(user.id, user.username or user.first_name)
    lang = player.language

    if plan_key not in VIP_PLUS_COSTS or plan_key not in VIP_PLUS_DURATIONS_SEC:
        await query.answer("–û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∞", show_alert=True)
        return

    cost = VIP_PLUS_COSTS[plan_key]
    duration = VIP_PLUS_DURATIONS_SEC[plan_key]
    res = db.purchase_vip_plus(user.id, cost, duration)
    if not res.get('ok'):
        reason = res.get('reason')
        if reason == 'not_enough_coins':
            await query.answer(vip_plus_t(lang, 'vip_plus_not_enough'), show_alert=True)
        else:
            await query.answer('–û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', show_alert=True)
        return

    vip_plus_until_ts = res.get('vip_plus_until') or db.get_vip_plus_until(user.id)
    coins_left = res.get('coins_left')
    until_str = time.strftime('%d.%m.%Y %H:%M', time.localtime(int(vip_plus_until_ts))) if vip_plus_until_ts else '‚Äî'

    text = vip_plus_t(lang, 'vip_plus_bought').format(emoji=VIP_PLUS_EMOJI, dt=until_str, coins=coins_left)
    keyboard = [
        [InlineKeyboardButton(vip_plus_t(lang, 'btn_back'), callback_data='vip_plus_menu')],
        [InlineKeyboardButton("üîô –í –º–µ–Ω—é", callback_data='menu')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    message = query.message
    if getattr(message, 'photo', None) or getattr(message, 'document', None) or getattr(message, 'video', None):
        try:
            await message.delete()
        except BadRequest:
            pass
        await context.bot.send_message(chat_id=user.id, text=text, reply_markup=reply_markup, parse_mode='HTML')
    else:
        try:
            await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='HTML')
        except BadRequest:
            await context.bot.send_message(chat_id=user.id, text=text, reply_markup=reply_markup, parse_mode='HTML')